{
	"info": {
		"_postman_id": "cfaa96c3-6dd5-46c6-948f-2a3b33524d75",
		"name": "Framework API(s)",
		"description": "The Framework API resources is basically a supporting data structure which serves as a template\n\n- It can be used in places where the structure remains the same but only the usage changes as per the requirement.\n- These resources are used to create, update, read, search, the objects like channels, frameworks, catergories, terms\n- The Hierarchy is as: FrameworkCategoryTerms\n    - Category: An abstract classification of the terms partitioned according to requirement\n    - Terms: Refers to a keyword or a phrase to descibe a Concept\n- [TestCases](https://www.getpostman.com/collections/10a84f4c27c0b45f690b)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19432603",
		"_collection_link": "https://blue-flare-639335.postman.co/workspace/API-automation-Knowlg~3ae6d444-e850-468d-bdb0-8be163d62aea/collection/19432603-cfaa96c3-6dd5-46c6-948f-2a3b33524d75?action=share&source=collection_link&creator=19432603"
	},
	"item": [
		{
			"name": "channel/v1",
			"item": [
				{
					"name": "Channel",
					"item": [
						{
							"name": "Create Channel",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "Create Channel with mandatory fields",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"channel\", \"channel_ch4\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"id has string - api.channel.create \", function () {\r",
															"    pm.expect(jsonResponse.id).to.be.equal(\"api.channel.create\");\r",
															"});\r",
															"\r",
															"pm.test(\"Version is 3.0 \", function () {\r",
															"    pm.expect(jsonResponse.ver).to.be.equal(\"3.0\");\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','status', 'err','errmsg');\r",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.params.msgid).to.be.a(\"null\"); \r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"null\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status is successful \", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"successful\");\r",
															"});\r",
															"\r",
															"pm.test(\"ResponseCode is OK \", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.result).to.have.all.keys('identifier','node_id');\r",
															"  pm.expect(jsonResponse.result.node_id).to.be.a('String');\r",
															"  pm.expect(jsonResponse.result.identifier).to.be.a('String');\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "value",
															"value": "{{apiKey}}",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"request\": {\n    \"channel\": {\n      \"name\": \"Channel Name\",\n      \"code\": \"{{channel}}\"\n    }\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/channel/v3/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"channel",
														"v3",
														"create"
													]
												},
												"description": "This API is used for creating a channel    \n  - The endpoint for **Create Channel** is `/channel/v1/create`\n  - It points to knowledge-mw-service - `/v1/channel/create`\n  - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
											},
											"response": [
												{
													"name": "OK ! Successful operation.\"Create channel\" operation was successfully executed.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require bearer authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"channel\": {\n      \"name\": \"Channel Name\",\n      \"code\": \"channel-id\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/channel/v1/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"channel",
																"v1",
																"create"
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.channel.create\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T08:27:27.810Z\",\n  \"params\": {\n    \"resmsgid\": \"3357da20-3de6-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": \"3353bb70-3de6-11eb-9ff3-67c41480f6aa\",\n    \"status\": \"successful\",\n    \"err\": null,\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"identifier\": \"channel-id\",\n    \"node_id\": \"channel-id\"\n  }\n}"
												},
												{
													"name": "BAD REQUEST. The \"Create Channel\" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter or providing some wrong request.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require bearer authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"channel\": {\n      \"name\": \"Channel Name\",\n      \"code\": \"channel-id\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/channel/v1/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"channel",
																"v1",
																"create"
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.channel.create\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T08:26:15.914Z\",\n  \"params\": {\n    \"resmsgid\": \"087d64a0-3de6-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"CONSTRAINT_VALIDATION_FAILED\",\n    \"errmsg\": \"Object already exists with identifier: channel-id\"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {\n    \"messages\": null\n  }\n}"
												},
												{
													"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require bearer authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"channel\": {\n      \"name\": \"Channel Name\",\n      \"code\": \"channel-id\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/channel/v1/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"channel",
																"v1",
																"create"
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Create a channel with all fields",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"channel2\", \"channel_ch0\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"id has string - api.channel.create \", function () {\r",
															"    pm.expect(jsonResponse.id).to.be.equal(\"api.channel.create\");\r",
															"});\r",
															"\r",
															"pm.test(\"Version is 3.0 \", function () {\r",
															"    pm.expect(jsonResponse.ver).to.be.equal(\"3.0\");\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','status', 'err','errmsg');\r",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.params.msgid).to.be.a(\"null\"); \r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"null\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status is successful \", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"successful\");\r",
															"});\r",
															"\r",
															"pm.test(\"ResponseCode is OK \", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.result).to.have.all.keys('identifier','node_id');\r",
															"  pm.expect(jsonResponse.result.node_id).to.be.a('String');\r",
															"  pm.expect(jsonResponse.result.identifier).to.be.a('String');\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "{{apiKey}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"request\": {\n    \"channel\": {\n      \"name\": \"Channel Name\",\n      \"code\": \"{{channel2}}\",\n      \"description\":\"Channel description\"\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{host}}/channel/v3/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"channel",
														"v3",
														"create"
													]
												}
											},
											"response": []
										}
									],
									"description": "1. Channel name has to be updated in both scenarios (Positive) evertime before running the collection"
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Create a Channel with missing mandatory fields",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"pm.test(\"id has string - api.channel.create \", function () {\r",
															"    pm.expect(jsonResponse.id).to.be.equal(\"api.channel.create\");\r",
															"});\r",
															"\r",
															"pm.test(\"Version is 3.0 \", function () {\r",
															"    pm.expect(jsonResponse.ver).to.be.equal(\"3.0\");\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','status', 'err','errmsg');\r",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.msgid).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"String\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status has string \", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"failed\");\r",
															"});\r",
															"\r",
															"pm.test(\"Err has string: ERR_CODE_IS_REQUIRED\", function () {\r",
															"    pm.expect(jsonResponse.params.err).to.be.equal(\"ERR_CODE_IS_REQUIRED\");\r",
															"});\r",
															"\r",
															"pm.test(\"errmsg has string\", function () {\r",
															"    pm.expect(jsonResponse.params.errmsg).to.be.equal(\"Code is required for creating a channel\");\r",
															"});\r",
															"\r",
															"pm.test(\"Responsecode has string\", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"CLIENT_ERROR\");\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "{{apiKey}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"request\": {\n    \"channel\": {\n      \"name\": \"Channel Name\"\n      \n    }\n  }\n}"
												},
												"url": {
													"raw": "{{host}}/channel/v3/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"channel",
														"v3",
														"create"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create an existing channel",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.get(\"channel\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"pm.test(\"id has string - api.channel.create \", function () {\r",
															"    pm.expect(jsonResponse.id).to.be.equal(\"api.channel.create\");\r",
															"});\r",
															"\r",
															"pm.test(\"Version is 3.0 \", function () {\r",
															"    pm.expect(jsonResponse.ver).to.be.equal(\"3.0\");\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','status', 'err','errmsg');\r",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.msgid).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"String\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status has string \", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"failed\");\r",
															"});\r",
															"\r",
															"pm.test(\"Err has string: CONSTRAINT_VALIDATION_FAILED\", function () {\r",
															"    pm.expect(jsonResponse.params.err).to.be.equal(\"CONSTRAINT_VALIDATION_FAILED\");\r",
															"});\r",
															"\r",
															"pm.test(\"errmsg has string\", function () {\r",
															"    pm.expect(jsonResponse.params.errmsg).to.be.equal(\"Object already exists with identifier: channel_ch1\");\r",
															"});\r",
															"\r",
															"pm.test(\"Responsecode has string\", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"CLIENT_ERROR\");\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "{{apiKey}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"request\": {\n    \"channel\": {\n      \"name\": \"Channel Name\",\n      \"code\": \"{{channel}}\"\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{host}}/channel/v3/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"channel",
														"v3",
														"create"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Read Channel",
							"item": [
								{
									"name": "Pre requisite",
									"item": [
										{
											"name": "Create Channel",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"channel\", \"channel_ch5\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"id has string - api.channel.create \", function () {\r",
															"    pm.expect(jsonResponse.id).to.be.equal(\"api.channel.create\");\r",
															"});\r",
															"\r",
															"pm.test(\"Version is 3.0 \", function () {\r",
															"    pm.expect(jsonResponse.ver).to.be.equal(\"3.0\");\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','status', 'err','errmsg');\r",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.params.msgid).to.be.a(\"null\"); \r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"null\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status is successful \", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"successful\");\r",
															"});\r",
															"\r",
															"pm.test(\"ResponseCode is OK \", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.result).to.have.all.keys('identifier','node_id');\r",
															"  pm.expect(jsonResponse.result.node_id).to.be.a('String');\r",
															"  pm.expect(jsonResponse.result.identifier).to.be.a('String');\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "value",
															"value": "{{apiKey}}",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"request\": {\n    \"channel\": {\n      \"name\": \"Channel Name\",\n      \"code\": \"{{channel}}\"\n    }\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/channel/v3/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"channel",
														"v3",
														"create"
													]
												},
												"description": "This API is used for creating a channel    \n  - The endpoint for **Create Channel** is `/channel/v1/create`\n  - It points to knowledge-mw-service - `/v1/channel/create`\n  - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
											},
											"response": [
												{
													"name": "OK ! Successful operation.\"Create channel\" operation was successfully executed.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require bearer authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"channel\": {\n      \"name\": \"Channel Name\",\n      \"code\": \"channel-id\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/channel/v1/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"channel",
																"v1",
																"create"
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.channel.create\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T08:27:27.810Z\",\n  \"params\": {\n    \"resmsgid\": \"3357da20-3de6-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": \"3353bb70-3de6-11eb-9ff3-67c41480f6aa\",\n    \"status\": \"successful\",\n    \"err\": null,\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"identifier\": \"channel-id\",\n    \"node_id\": \"channel-id\"\n  }\n}"
												},
												{
													"name": "BAD REQUEST. The \"Create Channel\" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter or providing some wrong request.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require bearer authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"channel\": {\n      \"name\": \"Channel Name\",\n      \"code\": \"channel-id\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/channel/v1/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"channel",
																"v1",
																"create"
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.channel.create\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T08:26:15.914Z\",\n  \"params\": {\n    \"resmsgid\": \"087d64a0-3de6-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"CONSTRAINT_VALIDATION_FAILED\",\n    \"errmsg\": \"Object already exists with identifier: channel-id\"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {\n    \"messages\": null\n  }\n}"
												},
												{
													"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require bearer authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"channel\": {\n      \"name\": \"Channel Name\",\n      \"code\": \"channel-id\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/channel/v1/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"channel",
																"v1",
																"create"
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "Positive",
									"item": [
										{
											"name": "Read a valid channel id",
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "value",
															"value": "{{apiKey}}",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/channel/v3/read/{{channel}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"channel",
														"v3",
														"read",
														"{{channel}}"
													]
												},
												"description": "This API is associated with fetching a channel by a specific channel ID\n   - The endpoint for **Get a Channel** is `/channel/v1/read/{ID}`\n   - It points to knowledge-mw-service - `/v1/channel/read/{ID}` \n   - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
											},
											"response": [
												{
													"name": "OK ! Successful operation. **Channel Read** operation was successfully executed. \\n Please refer for different additional [metadata](https://github.com/project-sunbird/knowledge-platform/blob/release-3.5.0/schemas/content/1.0/schema.json)",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   \n   - application/json\n   - multipart/form-data\n   - application/x-www-form-urlencoded",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/channel/v1/read/:ID",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"channel",
																"v1",
																"read",
																":ID"
															],
															"variable": [
																{
																	"key": "ID",
																	"value": "Ut enim offici",
																	"description": "(Required) Unique identifier of the channel to get"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.channel.read\",\n  \"ver\": \"3.0\",\n  \"ts\": \"2020-12-14T08:33:50ZZ\",\n  \"params\": {\n    \"resmsgid\": \"02c742d2-57e1-4441-aa31-0ce339c3917b\",\n    \"msgid\": null,\n    \"err\": null,\n    \"status\": \"successful\",\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"channel\": {\n      \"identifier\": \"channel-405\",\n      \"lastStatusChangedOn\": \"2020-12-14T08:27:49.490+0000\",\n      \"code\": \"channel-405\",\n      \"consumerId\": \"7411b6bd-89f3-40ec-98d1-229dc64ce77d\",\n      \"assetAdditionalCategories\": [],\n      \"autoCreateBatch\": \"Enabled\",\n      \"languageCode\": [],\n      \"suggested_frameworks\": [\n        {\n          \"identifier\": \"NCF\",\n          \"code\": \"NCF\",\n          \"name\": \"NCF\",\n          \"objectType\": \"Framework\"\n        }\n      ],\n      \"createdOn\": \"2020-12-14T08:27:49.490+0000\",\n      \"objectType\": \"Channel\",\n      \"versionKey\": \"1607934825088\",\n      \"collectionPrimaryCategories\": [\n        \"Content Playlist\",\n        \"Course\",\n        \"Digital Textbook\",\n        \"Explanation Content\"\n      ],\n      \"contentPrimaryCategories\": [\n        \"Course Assessment\",\n        \"eTextbook\",\n        \"Explanation Content\",\n        \"Learning Resource\",\n        \"Practice Question Set\",\n        \"Teacher Resource\"\n      ],\n      \"name\": \"Channel without Default License\",\n      \"lastUpdatedOn\": \"2020-12-14T08:33:45.088+0000\",\n      \"defaultCourseFramework\": \"TPD\",\n      \"collectionAdditionalCategories\": [\n        \"Textbook\",\n        \"Lesson Plan\",\n        \"TV Lesson\"\n      ],\n      \"assetPrimaryCategories\": [\n        \"Asset\",\n        \"CertAsset\",\n        \"Certificate Template\"\n      ],\n      \"contentAdditionalCategories\": [\n        \"Classroom Teaching Video\",\n        \"Concept Map\",\n        \"Curiosity Question Set\",\n        \"Experiential Resource\",\n        \"Explanation Video\",\n        \"Focus Spot\",\n        \"Learning Outcome Definition\",\n        \"Lesson Plan\",\n        \"Marking Scheme Rubric\",\n        \"Pedagogy Flow\",\n        \"Previous Board Exam Papers\",\n        \"TV Lesson\",\n        \"Textbook\"\n      ],\n      \"status\": \"Live\",\n      \"defaultFramework\": \"NCF\"\n    }\n  }\n}"
												},
												{
													"name": "RESOURCE NOT FOUND. The **Channel Read** operation failed ! The possible reason for failure is that you may have passed invalid channel id.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   \n   - application/json\n   - multipart/form-data\n   - application/x-www-form-urlencoded",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/channel/v1/read/:ID",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"channel",
																"v1",
																"read",
																":ID"
															],
															"variable": [
																{
																	"key": "ID",
																	"value": "Ut enim offici",
																	"description": "(Required) Unique identifier of the channel to get"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.channel.read\",\n  \"ver\": \"3.0\",\n  \"ts\": \"2020-12-14T08:36:08ZZ\",\n  \"params\": {\n    \"resmsgid\": \"e54ff3af-4026-420e-9412-0fcd3eba1674\",\n    \"msgid\": null,\n    \"err\": \"NOT_FOUND\",\n    \"status\": \"failed\",\n    \"errmsg\": \"Error! Node(s) doesn't Exists. | [Invalid Node Id.]: channel-407\"\n  },\n  \"responseCode\": \"RESOURCE_NOT_FOUND\",\n  \"result\": {\n    \"messages\": null\n  }\n}"
												},
												{
													"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   \n   - application/json\n   - multipart/form-data\n   - application/x-www-form-urlencoded",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/channel/v1/read/:ID",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"channel",
																"v1",
																"read",
																":ID"
															],
															"variable": [
																{
																	"key": "ID",
																	"value": "Ut enim offici",
																	"description": "(Required) Unique identifier of the channel to get"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Read an invalid channel id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string: Not Found\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});\r",
															"pm.test(\"id has string - api.channel.read \", function () {\r",
															"    pm.expect(jsonResponse.id).to.be.equal(\"api.channel.read\");\r",
															"});\r",
															"\r",
															"pm.test(\"Version is 3.0 \", function () {\r",
															"    pm.expect(jsonResponse.ver).to.be.equal(\"3.0\");\r",
															"});\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','err','status','errmsg');\r",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.msgid).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"String\");\r",
															"  });\r",
															"\r",
															"pm.test(\"Err has string\", function () {\r",
															"    pm.expect(jsonResponse.params.err).to.be.equal(\"NOT_FOUND\");\r",
															"});\r",
															"pm.test(\"Status has string\", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"failed\");\r",
															"});\r",
															"pm.test(\"errmsg has string\", function () {\r",
															"    pm.expect(jsonResponse.params.errmsg).to.be.include(\"Error! Node(s) doesn't Exists. | [Invalid Node Id.]: \");\r",
															"});\r",
															"pm.test(\"responseCode has string\", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"RESOURCE_NOT_FOUND\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{auth_token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "{{apiKey}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{host}}/channel/v3/read/dummy",
													"host": [
														"{{host}}"
													],
													"path": [
														"channel",
														"v3",
														"read",
														"dummy"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Update Channel",
							"item": [
								{
									"name": "Pre requisite",
									"item": [
										{
											"name": "Create Channel",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"channel\", \"channel_ch4\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"id has string - api.channel.create \", function () {\r",
															"    pm.expect(jsonResponse.id).to.be.equal(\"api.channel.create\");\r",
															"});\r",
															"\r",
															"pm.test(\"Version is 3.0 \", function () {\r",
															"    pm.expect(jsonResponse.ver).to.be.equal(\"3.0\");\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','status', 'err','errmsg');\r",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.params.msgid).to.be.a(\"null\"); \r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"null\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status is successful \", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"successful\");\r",
															"});\r",
															"\r",
															"pm.test(\"ResponseCode is OK \", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.result).to.have.all.keys('identifier','node_id');\r",
															"  pm.expect(jsonResponse.result.node_id).to.be.a('String');\r",
															"  pm.expect(jsonResponse.result.identifier).to.be.a('String');\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "value",
															"value": "{{apiKey}}",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"request\": {\n    \"channel\": {\n      \"name\": \"Channel Name\",\n      \"code\": \"{{channel}}\"\n    }\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/channel/v3/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"channel",
														"v3",
														"create"
													]
												},
												"description": "This API is used for creating a channel    \n  - The endpoint for **Create Channel** is `/channel/v1/create`\n  - It points to knowledge-mw-service - `/v1/channel/create`\n  - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
											},
											"response": [
												{
													"name": "OK ! Successful operation.\"Create channel\" operation was successfully executed.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require bearer authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"channel\": {\n      \"name\": \"Channel Name\",\n      \"code\": \"channel-id\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/channel/v1/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"channel",
																"v1",
																"create"
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.channel.create\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T08:27:27.810Z\",\n  \"params\": {\n    \"resmsgid\": \"3357da20-3de6-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": \"3353bb70-3de6-11eb-9ff3-67c41480f6aa\",\n    \"status\": \"successful\",\n    \"err\": null,\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"identifier\": \"channel-id\",\n    \"node_id\": \"channel-id\"\n  }\n}"
												},
												{
													"name": "BAD REQUEST. The \"Create Channel\" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter or providing some wrong request.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require bearer authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"channel\": {\n      \"name\": \"Channel Name\",\n      \"code\": \"channel-id\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/channel/v1/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"channel",
																"v1",
																"create"
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.channel.create\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T08:26:15.914Z\",\n  \"params\": {\n    \"resmsgid\": \"087d64a0-3de6-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"CONSTRAINT_VALIDATION_FAILED\",\n    \"errmsg\": \"Object already exists with identifier: channel-id\"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {\n    \"messages\": null\n  }\n}"
												},
												{
													"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require bearer authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"channel\": {\n      \"name\": \"Channel Name\",\n      \"code\": \"channel-id\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/channel/v1/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"channel",
																"v1",
																"create"
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "Positive",
									"item": [
										{
											"name": "Update a channel id with Valid fields",
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "value",
															"value": "{{apiKey}}",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"request\": {\n    \"channel\": {\n      \"description\": \"Updated channel description\"\n    }\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/channel/v3/update/{{channel}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"channel",
														"v3",
														"update",
														"{{channel}}"
													]
												},
												"description": "This API is associated with updating a specific channel\n  - The endpoint for **Update Channel** is `/channel/v1/update/{ID}`\n  - It points to knowledge-mw-service - `/v1/channel/update/{ID}`\n  - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
											},
											"response": [
												{
													"name": "OK ! Successful operation.\"Update channel by ID\" operation was successfully executed.",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.\n Possible media types can be:- \n   - application/json\n   - multipart/form-data\n   - application/x-www-form-urlencoded",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"channel\": {\n      \"description\": \"Updated channel description\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/channel/v1/update/:ID",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"channel",
																"v1",
																"update",
																":ID"
															],
															"variable": [
																{
																	"key": "ID",
																	"value": "Ut enim offici",
																	"description": "(Required) Unique identifier of the channel to be updated"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.channel.update\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T08:29:24.724Z\",\n  \"params\": {\n    \"resmsgid\": \"79078340-3de6-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": \"78fef7c0-3de6-11eb-9ff3-67c41480f6aa\",\n    \"status\": \"successful\",\n    \"err\": null,\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"identifier\": \"channel-405\",\n    \"node_id\": \"channel-405\"\n  }\n}"
												},
												{
													"name": "BAD REQUEST. The **Update Channel\" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.\n Possible media types can be:- \n   - application/json\n   - multipart/form-data\n   - application/x-www-form-urlencoded",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"channel\": {\n      \"description\": \"Updated channel description\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/channel/v1/update/:ID",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"channel",
																"v1",
																"update",
																":ID"
															],
															"variable": [
																{
																	"key": "ID",
																	"value": "Ut enim offici",
																	"description": "(Required) Unique identifier of the channel to be updated"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"ts\": 79777367,\n  \"id\": \"Lorem in dolore ex ullamco\",\n  \"params\": {\n    \"msgid\": \"in mollit commodo\",\n    \"resmsgid\": \"fugiat deserunt Lorem\",\n    \"status\": \"failed\",\n    \"err\": \"ut dolor et repreh\",\n    \"errmsg\": \"ut enim \"\n  },\n  \"ver\": \"reprehenderit laboris\",\n  \"responseCode\": \"proident qui minim\",\n  \"result\": {}\n}"
												},
												{
													"name": "RESOURCE NOT FOUND. The \"update channel by ID\" operation failed ! The possible reason for failure is that you may have passed invalid channel id.",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.\n Possible media types can be:- \n   - application/json\n   - multipart/form-data\n   - application/x-www-form-urlencoded",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"channel\": {\n      \"description\": \"Updated channel description\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/channel/v1/update/:ID",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"channel",
																"v1",
																"update",
																":ID"
															],
															"variable": [
																{
																	"key": "ID",
																	"value": "Ut enim offici",
																	"description": "(Required) Unique identifier of the channel to be updated"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.channel.update\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T08:30:44.219Z\",\n  \"params\": {\n    \"resmsgid\": \"a8697cb0-3de6-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"NOT_FOUND\",\n    \"errmsg\": \"Error! Node(s) doesn't Exists. | [Invalid Node Id.]: channel-406\"\n  },\n  \"responseCode\": \"RESOURCE_NOT_FOUND\",\n  \"result\": {\n    \"messages\": null\n  }\n}"
												},
												{
													"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.\n Possible media types can be:- \n   - application/json\n   - multipart/form-data\n   - application/x-www-form-urlencoded",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"channel\": {\n      \"description\": \"Updated channel description\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/channel/v1/update/:ID",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"channel",
																"v1",
																"update",
																":ID"
															],
															"variable": [
																{
																	"key": "ID",
																	"value": "Ut enim offici",
																	"description": "(Required) Unique identifier of the channel to be updated"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Update a channel id with Invalid fields",
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "{{apiKey}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"request\": {\n    \"channel\": {\n      \"123\":\"abc\"\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{host}}/channel/v3/update/{{channel}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"channel",
														"v3",
														"update",
														"{{channel}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update a channel which does not exist",
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{auth_token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "{{apiKey}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"request\": {\n    \"channel\": {\n      \"description\": \"Updated channel description\"\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{host}}/channel/v3/update/dummy",
													"host": [
														"{{host}}"
													],
													"path": [
														"channel",
														"v3",
														"update",
														"dummy"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Channel Category",
					"item": [
						{
							"name": "Create Channel Category",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "Create Channel category for valid channel id with valid Mandatory fields",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "user-id",
														"value": "{{user-id}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "{{APIKey}}"
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel}}"
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"categoryInstance\": {\n            \"name\": \"category\",\n            \"code\": \"org.ekstep.test.categoryInstance.medium\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/channel/v3/category/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"channel",
														"v3",
														"category",
														"create"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create channel category for valid channel id with all valid  fieldsNew Request",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "user-id",
														"value": "{{user-id}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "{{APIKey}}"
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"categoryInstance\": {\n            \"name\": \"category\",\n            \"Description\": \"Channel description\",\n            \"code\": \"org.ekstep.test.categoryInstance.medium\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/channel/v3/category/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"channel",
														"v3",
														"category",
														"create"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Create channel category for invalid channel id with all valid fields",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "user-id",
														"value": "{{user-id}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "{{APIKey}}"
													},
													{
														"key": "X-Channel-Id",
														"value": "dummy"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"categoryInstance\": {\n            \"name\": \"category\",\n            \"Description\": \"Channel description\",\n            \"code\": \"org.ekstep.test.categoryInstance.medium\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/channel/v3/category/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"channel",
														"v3",
														"category",
														"create"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create channel category for valid channel id with missing mandatory field",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "user-id",
														"value": "rayuluv"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "{{APIKey}}"
													},
													{
														"key": "X-Channel-Id",
														"value": "channel_ch1"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"categoryInstance\": {\n            \"name\": \"category\",\n            \"Description\": \"Channel description\"\n            \n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/channel/v3/category/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"channel",
														"v3",
														"category",
														"create"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Read Channel category",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "Read a valid channel category",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "user-id",
														"value": "{{user-id}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{api_key}}"
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel}}"
													}
												],
												"url": {
													"raw": "{{host}}/channel/v3/category/read/class",
													"host": [
														"{{host}}"
													],
													"path": [
														"channel",
														"v3",
														"category",
														"read",
														"class"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Read an invalid channel category from valid channel",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "user-id",
														"value": "{{user-id}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{api_key}}"
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel}}"
													}
												],
												"url": {
													"raw": "{{host}}/channel/v3/category/read/dummy",
													"host": [
														"{{host}}"
													],
													"path": [
														"channel",
														"v3",
														"category",
														"read",
														"dummy"
													]
												}
											},
											"response": []
										},
										{
											"name": "Read a valid channel category with invalid channel id",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "user-id",
														"value": "{{user-id}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{api_key}}"
													},
													{
														"key": "X-Channel-Id",
														"value": "dummy"
													}
												],
												"url": {
													"raw": "{{host}}/channel/v3/category/read/class",
													"host": [
														"{{host}}"
													],
													"path": [
														"channel",
														"v3",
														"category",
														"read",
														"class"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Search Channel category",
							"item": [
								{
									"name": "Positive",
									"item": []
								},
								{
									"name": "Negative",
									"item": []
								}
							]
						},
						{
							"name": "Update Channel category",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "Update a channel category with valid fields",
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "user-id",
														"value": "ilimi"
													},
													{
														"key": "Accept-Charset",
														"value": "UTF-8"
													},
													{
														"key": "Accept-Encoding",
														"value": "UTF-8"
													},
													{
														"key": "Authorization",
														"value": "{{APIKey}}"
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"request\": {\n      \"category\":{\n        \"description\":\"LP category API\",\n        \"name\":\"test\",\n        \"code\":\"testUpdate\"\n      }\n  }\n}"
												},
												"url": {
													"raw": "{{host}}/channel/v3/category/update/{{do_id}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"channel",
														"v3",
														"category",
														"update",
														"{{do_id}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Update a channel category with valid fields with invalid channel id",
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "user-id",
														"value": "{{user-id}}"
													},
													{
														"key": "Accept-Charset",
														"value": "UTF-8"
													},
													{
														"key": "Accept-Encoding",
														"value": "UTF-8"
													},
													{
														"key": "Authorization",
														"value": "{{APIKey}}"
													},
													{
														"key": "X-Channel-Id",
														"value": "dummy"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"request\": {\n      \"category\":{\n        \"description\":\"LP category API\",\n        \"name\":\"test\",\n        \"code\":\"testUpdate\"\n      }\n  }\n}"
												},
												"url": {
													"raw": "{{host}}/channel/v3/category/update/{{do_id}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"channel",
														"v3",
														"category",
														"update",
														"{{do_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update a channel category with invalid fields",
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "user-id",
														"value": "rayuluv"
													},
													{
														"key": "Accept-Charset",
														"value": "UTF-8"
													},
													{
														"key": "Accept-Encoding",
														"value": "UTF-8"
													},
													{
														"key": "Authorization",
														"value": "{{APIKey}}"
													},
													{
														"key": "X-Channel-Id",
														"value": "channel_ch1"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"request\": {\n      \"category\":{\n        \"description\":\"LP category API\",\n        \"name\":\"test\",\n        \"code\":\"testUpdate\"\n      }\n  }\n}"
												},
												"url": {
													"raw": "{{host}}/channel/v3/category/update/{{do_id}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"channel",
														"v3",
														"category",
														"update",
														"{{do_id}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Delete Channel Category",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "Retire a valid channel category",
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "user-id",
														"value": "{{user-id}}"
													},
													{
														"key": "Authorization",
														"value": "{{APIKey}}"
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel}}"
													}
												],
												"url": {
													"raw": "{{host}}/channel/v3/category/retire/",
													"host": [
														"{{host}}"
													],
													"path": [
														"channel",
														"v3",
														"category",
														"retire",
														""
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Retire a valid channel category with invalid channel id",
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "user-id",
														"value": "{{user-id}}"
													},
													{
														"key": "Authorization",
														"value": "{{APIKey}}"
													},
													{
														"key": "X-Channel-Id",
														"value": "dummy"
													}
												],
												"url": {
													"raw": "{{host}}/channel/v3/category/retire/class",
													"host": [
														"{{host}}"
													],
													"path": [
														"channel",
														"v3",
														"category",
														"retire",
														"class"
													]
												}
											},
											"response": []
										},
										{
											"name": "Retire a non existing channel category from valid channel id",
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "user-id",
														"value": "{{user-id}}"
													},
													{
														"key": "Authorization",
														"value": "{{APIKey}}"
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel}}"
													}
												],
												"url": {
													"raw": "{{host}}/channel/v3/category/retire/abc",
													"host": [
														"{{host}}"
													],
													"path": [
														"channel",
														"v3",
														"category",
														"retire",
														"abc"
													]
												}
											},
											"response": []
										},
										{
											"name": "Retire a already retired channel category",
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "user-id",
														"value": "{{user-id}}"
													},
													{
														"key": "Authorization",
														"value": "{{APIKey}}"
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel}}"
													}
												],
												"url": {
													"raw": "{{host}}/channel/v3/category/retire/class",
													"host": [
														"{{host}}"
													],
													"path": [
														"channel",
														"v3",
														"category",
														"retire",
														"class"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Channel Term",
					"item": [
						{
							"name": "Create Channel term",
							"item": [
								{
									"name": "Positive",
									"item": []
								},
								{
									"name": "Negative",
									"item": []
								}
							]
						},
						{
							"name": "Read Channel term",
							"item": [
								{
									"name": "Positive",
									"item": []
								},
								{
									"name": "Negative",
									"item": []
								}
							]
						},
						{
							"name": "Search Channel term",
							"item": [
								{
									"name": "Positive",
									"item": []
								},
								{
									"name": "Negative",
									"item": []
								}
							]
						},
						{
							"name": "Update Channel term",
							"item": [
								{
									"name": "Positive",
									"item": []
								},
								{
									"name": "Negative",
									"item": []
								}
							]
						},
						{
							"name": "Delete Channel term",
							"item": [
								{
									"name": "Positive",
									"item": []
								},
								{
									"name": "Negative",
									"item": []
								}
							]
						}
					]
				}
			],
			"description": "Pre-requisite\n\n- Channel name should be updated before running the collection (in the pre requisite folder as well)\n    \n- Channel category should be updated before running the collection (in the pre requisite folder as well)\n    \n- Channel term should be updated before running the collection (in the requisite folders as well)"
		},
		{
			"name": "Master Data",
			"item": [
				{
					"name": "Master Category",
					"item": [
						{
							"name": "Create master categroy",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "Create a master category with valid mandatory fields",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"id has string - api.taxonomy.category.create \", function () {\r",
															"    pm.expect(jsonResponse.id).to.be.equal(\"api.taxonomy.category.create\");\r",
															"});\r",
															"\r",
															"pm.test(\"Version is 3.0 \", function () {\r",
															"    pm.expect(jsonResponse.ver).to.be.equal(\"3.0\");\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','status', 'err','errmsg');\r",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.params.msgid).to.be.a(\"null\"); \r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"null\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status is successful \", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"successful\");\r",
															"});\r",
															"\r",
															"pm.test(\"ResponseCode is OK \", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.result).to.have.all.keys('identifier','node_id');\r",
															"  pm.expect(jsonResponse.result.node_id).to.be.a('String');\r",
															"  pm.expect(jsonResponse.result.identifier).to.be.a('String');\r",
															"});\r",
															"pm.collectionVariables.set(\"master_id\",jsonResponse.result.identifier);\r",
															"console.log(pm.collectionVariables.get(\"master_id\"));\r",
															"pm.collectionVariables.set(\"master_node\",jsonResponse.result.node_id);\r",
															"console.log(pm.collectionVariables.get(\"master_node\"));\r",
															"\r",
															"pm.test(`identifier should be equal to ${pm.collectionVariables.get(\"master_id\")}`, () => {\r",
															"    pm.expect(jsonResponse.result.identifier).to.eql(`${pm.collectionVariables.get(\"master_code\")}`);\r",
															"});\r",
															"\r",
															"pm.test(`node_id should be equal to ${pm.collectionVariables.get(\"master_node\")}`, () => {\r",
															"    pm.expect(jsonResponse.result.node_id).to.eql(`${pm.collectionVariables.get(\"master_code\")}`);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{auth_token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-Channel-Id",
														"value": "{{X-Channel-Id}}"
													},
													{
														"key": "",
														"value": "",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"category\": {\n            \"name\": \"master\",\n            \"code\": \"{{master_code}}\",\n            \"targetIdFieldName\": \"targetmasterIds\",\n            \"searchLabelFieldName\": \"se_master\",\n            \"searchIdFieldName\": \"se_master\",\n            \"orgIdFieldName\": \"masterIds\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/framework/v3/category/master/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"category",
														"master",
														"create"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create a master category with all valid fields",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"id has string - api.taxonomy.category.create \", function () {\r",
															"    pm.expect(jsonResponse.id).to.be.equal(\"api.taxonomy.category.create\");\r",
															"});\r",
															"\r",
															"pm.test(\"Version is 3.0 \", function () {\r",
															"    pm.expect(jsonResponse.ver).to.be.equal(\"3.0\");\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','status', 'err','errmsg');\r",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.params.msgid).to.be.a(\"null\"); \r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"null\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status is successful \", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"successful\");\r",
															"});\r",
															"\r",
															"pm.test(\"ResponseCode is OK \", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.result).to.have.all.keys('identifier','node_id');\r",
															"  pm.expect(jsonResponse.result.node_id).to.be.a('String');\r",
															"  pm.expect(jsonResponse.result.identifier).to.be.a('String');\r",
															"});\r",
															"\r",
															"pm.collectionVariables.set(\"master2_id\",jsonResponse.result.identifier);\r",
															"console.log(pm.collectionVariables.get(\"master2_id\"));\r",
															"pm.collectionVariables.set(\"master2_node\",jsonResponse.result.node_id);\r",
															"console.log(pm.collectionVariables.get(\"master2_node\"));\r",
															"\r",
															"pm.test(`identifier should be equal to ${pm.collectionVariables.get(\"master2_id\")}`, () => {\r",
															"    pm.expect(jsonResponse.result.identifier).to.eql(`${pm.collectionVariables.get(\"master2_code\")}`);\r",
															"});\r",
															"\r",
															"pm.test(`node_id should be equal to ${pm.collectionVariables.get(\"master2_node\")}`, () => {\r",
															"    pm.expect(jsonResponse.result.node_id).to.eql(`${pm.collectionVariables.get(\"master2_code\")}`);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{auth_token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-Channel-Id",
														"value": "{{X-Channel-Id}}"
													},
													{
														"key": "",
														"value": ""
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"category\": {\n            \"name\": \"master\",\n            \"code\": \"{{master2_code}}\",\n            \"description\" : \"Master category description\",\n            \"targetIdFieldName\": \"targetmasterIds\",\n            \"searchLabelFieldName\": \"se_master\",\n            \"searchIdFieldName\": \"se_master\",\n            \"orgIdFieldName\": \"masterIds\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/framework/v3/category/master/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"category",
														"master",
														"create"
													]
												}
											},
											"response": []
										}
									],
									"description": "1. Request body should be updated with unique value each time before creating master category"
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Create a master category with invalid fields",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"id has string - api.taxonomy.category.create \", function () {\r",
															"    pm.expect(jsonResponse.id).to.be.equal(\"api.taxonomy.category.create\");\r",
															"});\r",
															"\r",
															"pm.test(\"Version is 3.0 \", function () {\r",
															"    pm.expect(jsonResponse.ver).to.be.equal(\"3.0\");\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"    pm.expect(jsonResponse.result).to.be.an(\"object\").that.has.all.keys(\r",
															"        'messages'\r",
															"    );\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','status', 'err','errmsg');\r",
															"pm.expect(jsonResponse.params.resmsgid).to.be.a(\"String\");\r",
															"pm.expect(jsonResponse.params.msgid).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"String\");\r",
															"});\r",
															"\r",
															"pm.test(\"err has string: CLIENT_ERROR\", function () {\r",
															"    pm.expect(jsonResponse.params.err).to.be.equal(\"CLIENT_ERROR\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status has string: failed\", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"failed\");\r",
															"});\r",
															"\r",
															"pm.test(\"errmsg has string: Validation Errors\", function () {\r",
															"    pm.expect(jsonResponse.params.errmsg).to.be.equal(\"Validation Errors\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string: Bad Request\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"pm.test(\"ResponseCode has string: CLIENT_ERROR\", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"CLIENT_ERROR\");\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"    pm.expect(jsonResponse.result).to.be.an(\"object\").that.has.all.keys(\r",
															"        'messages'\r",
															"    );\r",
															"  pm.expect(jsonResponse.result.messages).to.be.an(\"array\").that.includes.members([\r",
															"      \"Required Metadata orgIdFieldName not set\",\r",
															"            \"Required Metadata code not set\"\r",
															"    ]);\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{auth_token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-Channel-Id",
														"value": "{{X-Channel-Id}}"
													},
													{
														"key": "",
														"value": "",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"category\": {\n            \"name\": \"class\",\n            \"code\": \"\",\n            \"description\": \"\",\n            \"targetIdFieldName\": \"targetclassIds\",\n            \"searchLabelFieldName\": \"se_class\",\n            \"searchIdFieldName\": \"se_class\",\n            \"orgIdFieldName\": \"\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/framework/v3/category/master/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"category",
														"master",
														"create"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create master category with missing mandatory fields",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"pm.test(\"id has string - api.taxonomy.category.create \", function () {\r",
															"    pm.expect(jsonResponse.id).to.be.equal(\"api.taxonomy.category.create\");\r",
															"});\r",
															"\r",
															"pm.test(\"Version is 3.0 \", function () {\r",
															"    pm.expect(jsonResponse.ver).to.be.equal(\"3.0\");\r",
															"});\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"    pm.expect(jsonResponse.result).to.be.an(\"object\").that.has.all.keys(\r",
															"        'messages'\r",
															"    );\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','status', 'err','errmsg');\r",
															"pm.expect(jsonResponse.params.resmsgid).to.be.a(\"String\");\r",
															"pm.expect(jsonResponse.params.msgid).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"String\");\r",
															"});\r",
															"\r",
															"pm.test(\"err has string\", function () {\r",
															"    pm.expect(jsonResponse.params.err).to.be.equal(\"CLIENT_ERROR\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status has string\", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"failed\");\r",
															"});\r",
															"\r",
															"pm.test(\"errmsg has string\", function () {\r",
															"    pm.expect(jsonResponse.params.errmsg).to.be.equal(\"Validation Errors\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string: Bad Request\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"pm.test(\"ResponseCode has string: CLIENT_ERROR\", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"CLIENT_ERROR\");\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"    pm.expect(jsonResponse.result).to.be.an(\"object\").that.has.all.keys(\r",
															"        'messages'\r",
															"    );\r",
															"  pm.expect(jsonResponse.result.messages).to.be.an(\"array\").that.includes.members([\r",
															"        \"Required Metadata searchLabelFieldName not set\",\r",
															"        \"Required Metadata searchIdFieldName not set\",\r",
															"        \"Required Metadata targetIdFieldName not set\",\r",
															"        \"Required Metadata orgIdFieldName not set\"\r",
															"    ]);\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "user-id",
														"value": "rayuluv"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-Channel-Id",
														"value": "in.ekstep"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{api_key}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"category\": {\n            \"name\": \"Class\",\n            \"code\": \"Class\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/framework/v3/category/master/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"category",
														"master",
														"create"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create existing category",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"    pm.expect(jsonResponse.result).to.be.an(\"object\").that.has.all.keys(\r",
															"        'messages'\r",
															"    );\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','status', 'err','errmsg');\r",
															"pm.expect(jsonResponse.params.resmsgid).to.be.a(\"String\");\r",
															"pm.expect(jsonResponse.params.msgid).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"String\");\r",
															"});\r",
															"\r",
															"pm.test(\"err has string\", function () {\r",
															"    pm.expect(jsonResponse.params.err).to.be.equal(\"CONSTRAINT_VALIDATION_FAILED\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status has string\", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"failed\");\r",
															"});\r",
															"\r",
															"pm.test(\"errmsg has string\", function () {\r",
															"    pm.expect(jsonResponse.params.errmsg).to.eql(\"Object already exists with identifier: class\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string: Bad Request\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"pm.test(\"ResponseCode has string: CLIENT_ERROR\", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"CLIENT_ERROR\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "user-id",
														"value": "rayuluv"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-Channel-Id",
														"value": "in.ekstep"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{api_key}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"category\": {\n            \"name\": \"class\",\n            \"code\": \"class\",\n            \"description\": \"class description\",\n            \"targetIdFieldName\": \"targetclassIds\",\n            \"searchLabelFieldName\": \"se_class\",\n            \"searchIdFieldName\": \"se_class\",\n            \"orgIdFieldName\": \"se_class\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/framework/v3/category/master/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"category",
														"master",
														"create"
													]
												}
											},
											"response": []
										}
									],
									"description": "1. Third scenario, existing details should be updated in request body"
								}
							],
							"description": "1. Master category code should be updated everytime befor running the collection (Positive)"
						},
						{
							"name": "Update Master category",
							"item": [
								{
									"name": "Pre requisite",
									"item": [
										{
											"name": "Create Master category",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.collectionVariables.set(\"master3_id\",jsonResponse.result.identifier);\r",
															"console.log(pm.collectionVariables.get(\"master3_id\"));\r",
															"pm.collectionVariables.set(\"master3_node\",jsonResponse.result.node_id);\r",
															"console.log(pm.collectionVariables.get(\"master3_node\"));\r",
															"\r",
															"pm.test(`identifier should be equal to ${pm.collectionVariables.get(\"master3_id\")}`, () => {\r",
															"    pm.expect(jsonResponse.result.identifier).to.eql(`${pm.collectionVariables.get(\"master3_code\")}`);\r",
															"});\r",
															"\r",
															"pm.test(`node_id should be equal to ${pm.collectionVariables.get(\"master3_node\")}`, () => {\r",
															"    pm.expect(jsonResponse.result.node_id).to.eql(`${pm.collectionVariables.get(\"master3_code\")}`);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{auth_token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-Channel-Id",
														"value": "{{X-Channel-Id}}"
													},
													{
														"key": "",
														"value": "",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"category\": {\n            \"name\": \"master\",\n            \"code\": \"{{master3_code}}\",\n            \"targetIdFieldName\": \"targetmasterIds\",\n            \"searchLabelFieldName\": \"se_master\",\n            \"searchIdFieldName\": \"se_master\",\n            \"orgIdFieldName\": \"masterIds\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/framework/v3/category/master/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"category",
														"master",
														"create"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Positive",
									"item": [
										{
											"name": "Update details for existing master category with valid fields",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"id has string - api.taxonomy.category.update\", function () {\r",
															"    pm.expect(jsonResponse.id).to.be.equal(\"api.taxonomy.category.update\");\r",
															"});\r",
															"pm.test(\"Version is 3.0 \", function () {\r",
															"    pm.expect(jsonResponse.ver).to.be.equal(\"3.0\");\r",
															"});\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','status', 'err','errmsg');\r",
															"  pm.expect(jsonResponse.params.msgid).to.be.a(\"null\"); \r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"null\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status has string \", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"successful\");\r",
															"});\r",
															"pm.test(\"ResponseCode is OK \", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"OK\");\r",
															"});\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.result).to.have.all.keys('identifier','node_id');\r",
															"  pm.expect(jsonResponse.result.node_id).to.be.a('String');\r",
															"  pm.expect(jsonResponse.result.identifier).to.be.a('String');\r",
															"});\r",
															"\r",
															"pm.collectionVariables.set(\"master3_id\",jsonResponse.result.identifier);\r",
															"console.log(pm.collectionVariables.get(\"master3_id\"));\r",
															"pm.collectionVariables.set(\"master3_node\",jsonResponse.result.node_id);\r",
															"console.log(pm.collectionVariables.get(\"master3_node\"));\r",
															"\r",
															"pm.test(`identifier should be equal to ${pm.collectionVariables.get(\"master3_id\")}`, () => {\r",
															"    pm.expect(jsonResponse.result.identifier).to.eql(`${pm.collectionVariables.get(\"master3_code\")}`);\r",
															"});\r",
															"\r",
															"pm.test(`node_id should be equal to ${pm.collectionVariables.get(\"master3_node\")}`, () => {\r",
															"    pm.expect(jsonResponse.result.node_id).to.eql(`${pm.collectionVariables.get(\"master3_code\")}`);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{auth_token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "X-Channel-Id",
														"value": "{{X-Channel-Id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"request\": {\n      \"category\":{\n        \"Description\":\"Description of class category\"\n      }\n  }\n}"
												},
												"url": {
													"raw": "{{host}}/framework/v3/category/master/update/{{master3_code}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"category",
														"master",
														"update",
														"{{master3_code}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Update details for invalid master category",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});\r",
															"pm.test(\"id has string - api.taxonomy.category.update\", function () {\r",
															"    pm.expect(jsonResponse.id).to.be.equal(\"api.taxonomy.category.update\");\r",
															"});\r",
															"pm.test(\"Version is 3.0 \", function () {\r",
															"    pm.expect(jsonResponse.ver).to.be.equal(\"3.0\");\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','err','status','errmsg');\r",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.msgid).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"String\");\r",
															"  });\r",
															"\r",
															"pm.test(\"Err has string - Not Found\", function () {\r",
															"    pm.expect(jsonResponse.params.err).to.be.equal(\"NOT_FOUND\");\r",
															"});\r",
															"pm.test(\"Status has string - Failed\", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"failed\");\r",
															"});\r",
															"pm.test(\"errmsg has string\", function () {\r",
															"    pm.expect(jsonResponse.params.errmsg).to.be.include(\"Error! Node(s) doesn't Exists. | [Invalid Node Id.]: \");\r",
															"});\r",
															"pm.test(\"responseCode has RESOURCE_NOT_FOUND\", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"RESOURCE_NOT_FOUND\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "X-Channel-Id",
														"value": "sunbird"
													},
													{
														"key": "Authorization",
														"value": "{{auth_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"request\": {\n      \"category\":{\n        \"Description\":\"Description of class category\"\n      }\n  }\n}"
												},
												"url": {
													"raw": "{{host}}/framework/v3/category/master/update/abc",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"category",
														"master",
														"update",
														"abc"
													]
												}
											},
											"response": []
										}
									]
								}
							],
							"description": "- Master category code should be updated everytime befor running the collection (Positive)"
						},
						{
							"name": "Delete Master category",
							"item": [
								{
									"name": "Pre requisite",
									"item": [
										{
											"name": "Create Master category",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.collectionVariables.set(\"master4_id\",jsonResponse.result.identifier);\r",
															"console.log(pm.collectionVariables.get(\"master4_id\"));\r",
															"pm.collectionVariables.set(\"master4_node\",jsonResponse.result.node_id);\r",
															"console.log(pm.collectionVariables.get(\"master4_node\"));\r",
															"\r",
															"pm.test(`identifier should be equal to ${pm.collectionVariables.get(\"master4_id\")}`, () => {\r",
															"    pm.expect(jsonResponse.result.identifier).to.eql(`${pm.collectionVariables.get(\"master4_code\")}`);\r",
															"});\r",
															"\r",
															"pm.test(`node_id should be equal to ${pm.collectionVariables.get(\"master4_node\")}`, () => {\r",
															"    pm.expect(jsonResponse.result.node_id).to.eql(`${pm.collectionVariables.get(\"master4_code\")}`);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{auth_token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-Channel-Id",
														"value": "{{X-Channel-Id}}"
													},
													{
														"key": "",
														"value": "",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"category\": {\n            \"name\": \"master\",\n            \"code\": \"{{master4_code}}\",\n            \"targetIdFieldName\": \"targetmasterIds\",\n            \"searchLabelFieldName\": \"se_master\",\n            \"searchIdFieldName\": \"se_master\",\n            \"orgIdFieldName\": \"masterIds\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/framework/v3/category/master/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"category",
														"master",
														"create"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Positive",
									"item": [
										{
											"name": "Delete a valid master category",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"id has string - api.taxonomy.category.retire \", function () {\r",
															"    pm.expect(jsonResponse.id).to.be.equal(\"api.taxonomy.category.retire\");\r",
															"});\r",
															"\r",
															"pm.test(\"Version is 3.0 \", function () {\r",
															"    pm.expect(jsonResponse.ver).to.be.equal(\"3.0\");\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','status', 'err','errmsg');\r",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.params.msgid).to.be.a(\"null\"); \r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"null\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status is successful \", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"successful\");\r",
															"});\r",
															"\r",
															"pm.test(\"ResponseCode is OK \", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.result).to.have.all.keys('identifier','node_id');\r",
															"  pm.expect(jsonResponse.result.node_id).to.be.a('String');\r",
															"  pm.expect(jsonResponse.result.identifier).to.be.a('String');\r",
															"});\r",
															"\r",
															"pm.collectionVariables.set(\"master4_id\",jsonResponse.result.identifier);\r",
															"console.log(pm.collectionVariables.get(\"master4_id\"));\r",
															"pm.collectionVariables.set(\"master4_node\",jsonResponse.result.node_id);\r",
															"console.log(pm.collectionVariables.get(\"master4_node\"));\r",
															"\r",
															"pm.test(`identifier should be equal to ${pm.collectionVariables.get(\"master4_id\")}`, () => {\r",
															"    pm.expect(jsonResponse.result.identifier).to.eql(`${pm.collectionVariables.get(\"master4_code\")}`);\r",
															"});\r",
															"\r",
															"pm.test(`node_id should be equal to ${pm.collectionVariables.get(\"master4_node\")}`, () => {\r",
															"    pm.expect(jsonResponse.result.node_id).to.eql(`${pm.collectionVariables.get(\"master4_code\")}`);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{auth_token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-Channel-Id",
														"value": "{{X-Channel-Id}}"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{host}}/framework/v3/category/master/retire/{{master4_code}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"category",
														"master",
														"retire",
														"{{master4_code}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Delete an invalid master category",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});\r",
															"pm.test(\"id has string - api.taxonomy.category.retire \", function () {\r",
															"    pm.expect(jsonResponse.id).to.be.equal(\"api.taxonomy.category.retire\");\r",
															"});\r",
															"\r",
															"pm.test(\"Version is 3.0 \", function () {\r",
															"    pm.expect(jsonResponse.ver).to.be.equal(\"3.0\");\r",
															"});\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','err','status','errmsg');\r",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.msgid).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"String\");\r",
															"  });\r",
															"\r",
															"pm.test(\"Err has string\", function () {\r",
															"    pm.expect(jsonResponse.params.err).to.be.equal(\"NOT_FOUND\");\r",
															"});\r",
															"pm.test(\"Status has string\", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"failed\");\r",
															"});\r",
															"pm.test(\"errmsg has string\", function () {\r",
															"    pm.expect(jsonResponse.params.errmsg).to.be.include(\"Error! Node(s) doesn't Exists. | [Invalid Node Id.]: \");\r",
															"});\r",
															"pm.test(\"responseCode has string\", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"RESOURCE_NOT_FOUND\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{auth_token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-Channel-Id",
														"value": "{{X-Channel-Id}}"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "",
														"value": "",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{host}}/framework/v3/category/master/retire/abc",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"category",
														"master",
														"retire",
														"abc"
													]
												}
											},
											"response": []
										}
									]
								}
							],
							"description": "- Master category code should be updated everytime befor running the collection (Positive)"
						},
						{
							"name": "Get Master Category",
							"item": [
								{
									"name": "Pre requisite",
									"item": [
										{
											"name": "Create a master category",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.collectionVariables.set(\"master5_id\",jsonResponse.result.identifier);\r",
															"console.log(pm.collectionVariables.get(\"master5_id\"));\r",
															"pm.collectionVariables.set(\"master5_node\",jsonResponse.result.node_id);\r",
															"console.log(pm.collectionVariables.get(\"master5_node\"));\r",
															"\r",
															"pm.test(`identifier should be equal to ${pm.collectionVariables.get(\"master5_id\")}`, () => {\r",
															"    pm.expect(jsonResponse.result.identifier).to.eql(`${pm.collectionVariables.get(\"master5_code\")}`);\r",
															"});\r",
															"\r",
															"pm.test(`node_id should be equal to ${pm.collectionVariables.get(\"master5_node\")}`, () => {\r",
															"    pm.expect(jsonResponse.result.node_id).to.eql(`${pm.collectionVariables.get(\"master5_code\")}`);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{auth_token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-Channel-Id",
														"value": "{{X-Channel-Id}}"
													},
													{
														"key": "",
														"value": "",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"category\": {\n            \"name\": \"master\",\n            \"code\": \"{{master5_code}}\",\n            \"targetIdFieldName\": \"targetmasterIds\",\n            \"searchLabelFieldName\": \"se_master\",\n            \"searchIdFieldName\": \"se_master\",\n            \"orgIdFieldName\": \"masterIds\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/framework/v3/category/master/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"category",
														"master",
														"create"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Positive",
									"item": [
										{
											"name": "Read a live master category",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"id has string - api.taxonomy.category.read \", function () {\r",
															"    pm.expect(jsonResponse.id).to.be.equal(\"api.taxonomy.category.read\");\r",
															"});\r",
															"\r",
															"pm.test(\"Version is 3.0 \", function () {\r",
															"    pm.expect(jsonResponse.ver).to.be.equal(\"3.0\");\r",
															"});\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','status', 'err','errmsg');\r",
															"pm.expect(jsonResponse.params.resmsgid).to.be.a(\"String\");\r",
															"pm.expect(jsonResponse.params.msgid).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"null\");\r",
															"});\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.result).to.be.an(\"object\").that.has.all.keys(\r",
															"        'category'\r",
															"    );\r",
															"  pm.expect(jsonResponse.result.category).to.have.all.keys('trackable','identifier','lastStatusChangedOn', 'code','targetIdFieldName','channel','searchLabelFieldName','languageCode','createdOn','objectType','versionKey','name','lastUpdatedOn','searchIdFieldName','orgIdFieldName','status');\r",
															"});\r",
															"\r",
															"pm.test(\"Status has String: Live \", function () {\r",
															"    pm.expect(jsonResponse.result.category.status).to.be.equal(\"Live\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{auth_token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "X-Channel-Id",
														"value": "{{X-Channel-Id}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "",
														"value": "",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{host}}/framework/v3/category/master/read/{{master5_node}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"category",
														"master",
														"read",
														"{{master5_node}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Read a retired master category",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"id has string - api.taxonomy.category.read \", function () {\r",
															"    pm.expect(jsonResponse.id).to.be.equal(\"api.taxonomy.category.read\");\r",
															"});\r",
															"\r",
															"pm.test(\"Version is 3.0 \", function () {\r",
															"    pm.expect(jsonResponse.ver).to.be.equal(\"3.0\");\r",
															"});\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','status', 'err','errmsg');\r",
															"pm.expect(jsonResponse.params.resmsgid).to.be.a(\"String\");\r",
															"pm.expect(jsonResponse.params.msgid).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"null\");\r",
															"});\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.result).to.be.an(\"object\").that.has.all.keys(\r",
															"        'category'\r",
															"    );\r",
															"  pm.expect(jsonResponse.result.category).to.have.all.keys('trackable','identifier','lastStatusChangedOn', 'code','targetIdFieldName','channel','searchLabelFieldName','languageCode','createdOn','objectType','versionKey','name','lastUpdatedOn','searchIdFieldName','orgIdFieldName','status');\r",
															"});\r",
															"\r",
															"pm.test(\"Status has String: retired \", function () {\r",
															"    pm.expect(jsonResponse.result.category.status).to.be.equal(\"Retired\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{auth_token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "X-Channel-Id",
														"value": "{{X-Channel-Id}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "{{auth_token}}"
													}
												],
												"url": {
													"raw": "{{host}}/framework/v3/category/master/read/{{master4_code}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"category",
														"master",
														"read",
														"{{master4_code}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Read an invalid master category",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});\r",
															"pm.test(\"id has string - api.taxonomy.category.read \", function () {\r",
															"    pm.expect(jsonResponse.id).to.be.equal(\"api.taxonomy.category.read\");\r",
															"});\r",
															"\r",
															"pm.test(\"Version is 3.0 \", function () {\r",
															"    pm.expect(jsonResponse.ver).to.be.equal(\"3.0\");\r",
															"});\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','err','status','errmsg');\r",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.msgid).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"String\");\r",
															"  });\r",
															"\r",
															"pm.test(\"Err has string\", function () {\r",
															"    pm.expect(jsonResponse.params.err).to.be.equal(\"NOT_FOUND\");\r",
															"});\r",
															"pm.test(\"Status has string\", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"failed\");\r",
															"});\r",
															"pm.test(\"errmsg has string\", function () {\r",
															"    pm.expect(jsonResponse.params.errmsg).to.be.include(\"Error! Node(s) doesn't Exists. | [Invalid Node Id.]: \");\r",
															"});\r",
															"pm.test(\"responseCode has string\", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"RESOURCE_NOT_FOUND\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{auth_token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "X-Channel-Id",
														"value": "sunbird"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-Channel-Id",
														"value": "{{X-Channel-Id}}"
													}
												],
												"url": {
													"raw": "{{host}}/framework/v3/category/master/read/abc",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"category",
														"master",
														"read",
														"abc"
													]
												}
											},
											"response": []
										}
									]
								}
							],
							"description": "- Master category code should be updated everytime befor running the collection (Positive)"
						},
						{
							"name": "Delete data",
							"item": [
								{
									"name": "Delete master category",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json()\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(`identifier should be equal to ${pm.collectionVariables.get(\"master_id\")}`, () => {\r",
													"    pm.expect(jsonResponse.result.identifier).to.eql(`${pm.collectionVariables.get(\"master_code\")}`);\r",
													"});\r",
													"\r",
													"pm.test(`node_id should be equal to ${pm.collectionVariables.get(\"master_node\")}`, () => {\r",
													"    pm.expect(jsonResponse.result.node_id).to.eql(`${pm.collectionVariables.get(\"master_code\")}`);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{auth_token}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Channel-Id",
												"value": "{{X-Channel-Id}}"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{host}}/framework/v3/category/master/retire/{{master_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"framework",
												"v3",
												"category",
												"master",
												"retire",
												"{{master_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete master category",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json()\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(`identifier should be equal to ${pm.collectionVariables.get(\"master2_id\")}`, () => {\r",
													"    pm.expect(jsonResponse.result.identifier).to.eql(`${pm.collectionVariables.get(\"master2_code\")}`);\r",
													"});\r",
													"\r",
													"pm.test(`node_id should be equal to ${pm.collectionVariables.get(\"master2_node\")}`, () => {\r",
													"    pm.expect(jsonResponse.result.node_id).to.eql(`${pm.collectionVariables.get(\"master2_code\")}`);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{auth_token}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Channel-Id",
												"value": "{{X-Channel-Id}}"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{host}}/framework/v3/category/master/retire/{{master2_code}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"framework",
												"v3",
												"category",
												"master",
												"retire",
												"{{master2_code}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete master category",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json()\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(`identifier should be equal to ${pm.collectionVariables.get(\"master3_id\")}`, () => {\r",
													"    pm.expect(jsonResponse.result.identifier).to.eql(`${pm.collectionVariables.get(\"master3_code\")}`);\r",
													"});\r",
													"\r",
													"pm.test(`node_id should be equal to ${pm.collectionVariables.get(\"master3_node\")}`, () => {\r",
													"    pm.expect(jsonResponse.result.node_id).to.eql(`${pm.collectionVariables.get(\"master3_code\")}`);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{auth_token}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Channel-Id",
												"value": "{{X-Channel-Id}}"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{host}}/framework/v3/category/master/retire/{{master3_code}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"framework",
												"v3",
												"category",
												"master",
												"retire",
												"{{master3_code}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete master category",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json()\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(`identifier should be equal to ${pm.collectionVariables.get(\"master4_id\")}`, () => {\r",
													"    pm.expect(jsonResponse.result.identifier).to.eql(`${pm.collectionVariables.get(\"master4_code\")}`);\r",
													"});\r",
													"\r",
													"pm.test(`node_id should be equal to ${pm.collectionVariables.get(\"master4_node\")}`, () => {\r",
													"    pm.expect(jsonResponse.result.node_id).to.eql(`${pm.collectionVariables.get(\"master4_code\")}`);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{auth_token}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Channel-Id",
												"value": "{{X-Channel-Id}}"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{host}}/framework/v3/category/master/retire/{{master4_code}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"framework",
												"v3",
												"category",
												"master",
												"retire",
												"{{master4_code}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete master category",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json()\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(`identifier should be equal to ${pm.collectionVariables.get(\"master5_id\")}`, () => {\r",
													"    pm.expect(jsonResponse.result.identifier).to.eql(`${pm.collectionVariables.get(\"master5_code\")}`);\r",
													"});\r",
													"\r",
													"pm.test(`node_id should be equal to ${pm.collectionVariables.get(\"master5_node\")}`, () => {\r",
													"    pm.expect(jsonResponse.result.node_id).to.eql(`${pm.collectionVariables.get(\"master5_code\")}`);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{auth_token}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Channel-Id",
												"value": "{{X-Channel-Id}}"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{host}}/framework/v3/category/master/retire/{{master5_code}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"framework",
												"v3",
												"category",
												"master",
												"retire",
												"{{master5_code}}"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"//Scenarion-1",
									"pm.collectionVariables.set(\"master_code\", \"master_cat_9\");",
									"pm.collectionVariables.set(\"master2_code\", \"master2_cat_7\");",
									"//Scenario-2",
									"pm.collectionVariables.set(\"master3_code\", \"master3_cat_8\");",
									"//Scenario-3",
									"pm.collectionVariables.set(\"master4_code\", \"master4_cat_7\");",
									"//Scenario-4",
									"pm.collectionVariables.set(\"master5_code\", \"master5_cat_8\");"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"description": "Pre requisite:\n\n- Master category name should be updated before running the collection (in the pre requisite folder as well)"
		},
		{
			"name": "framework/v1",
			"item": [
				{
					"name": "framework",
					"item": [
						{
							"name": "Create a Framework",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "Create a framework with valid mandatory fields",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"id has string - api.taxonomy.framework.create \", function () {\r",
															"    pm.expect(jsonResponse.id).to.be.equal(\"api.taxonomy.framework.create\");\r",
															"});\r",
															"\r",
															"pm.test(\"Version is 3.0 \", function () {\r",
															"    pm.expect(jsonResponse.ver).to.be.equal(\"3.0\");\r",
															"});\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','status', 'err','errmsg');\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"null\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status has string \", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"successful\");\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.result).to.have.all.keys('node_id', 'versionKey');\r",
															"  pm.expect(jsonResponse.result.node_id).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.result.versionKey).to.be.a(\"string\");\r",
															"});\r",
															"\r",
															"pm.collectionVariables.set(\"fw1_node\",jsonResponse.result.node_id);\r",
															"console.log(pm.collectionVariables.get(\"fw1_node\"));\r",
															"\r",
															"pm.test(`node id should be equal to ${pm.collectionVariables.get(\"fw1_node\")}`, () => {\r",
															"    pm.expect(jsonResponse.result.node_id).to.eql(pm.collectionVariables.get(\"fw1_code\"));\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {}
											},
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{auth_token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"description": "(Required) It is the Unique Id to identify the root organisation to which the user belongs",
														"key": "X-Channel-Id",
														"value": "{{X-Channel-Id}}"
													},
													{
														"key": "",
														"value": "",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"framework\": {\n            \"name\": \"{{fw1_name}}\",\n            \"code\": \"{{fw1_code}}\"\n            \n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/framework/v3/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"create"
													]
												},
												"description": "This API is associated with creating a new framework on the Sunbird Platform.\n   - The endpoint for **Create a Framework** is `/framework/v1/create`\n   - It points to knowledge-mw-service - `/v1/framework/create`\n   - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
											},
											"response": [
												{
													"name": "OK ! Successful operation.\"create framework\" operation was successfully executed.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) It is the Unique Id to identify the root organisation to which the user belongs",
																"key": "X-Channel-Id",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"framework\": {\n      \"name\": \"Framework Name\",\n      \"code\": \"dummy_framework\",\n      \"channels\": [\n        {\n          \"identifier\": \"in.ekstep\"\n        }\n      ]\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"create"
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.framework.create\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T09:49:06.794Z\",\n  \"params\": {\n    \"resmsgid\": \"9b5d7ca0-3df1-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": \"9b4a90e0-3df1-11eb-9ff3-67c41480f6aa\",\n    \"status\": \"successful\",\n    \"err\": null,\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"node_id\": \"dummy_framework\",\n    \"versionKey\": \"1607939346678\"\n  }\n}"
												},
												{
													"name": "BAD REQUEST. The \"create framework\" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) It is the Unique Id to identify the root organisation to which the user belongs",
																"key": "X-Channel-Id",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"framework\": {\n      \"name\": \"Framework Name\",\n      \"code\": \"dummy_framework\",\n      \"channels\": [\n        {\n          \"identifier\": \"in.ekstep\"\n        }\n      ]\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"create"
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.framework.create\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T09:50:45.249Z\",\n  \"params\": {\n    \"resmsgid\": \"d60c8710-3df1-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"CONSTRAINT_VALIDATION_FAILED\",\n    \"errmsg\": \"Object already exists with identifier: dummy_framework\"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {}\n}"
												},
												{
													"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) It is the Unique Id to identify the root organisation to which the user belongs",
																"key": "X-Channel-Id",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"framework\": {\n      \"name\": \"Framework Name\",\n      \"code\": \"dummy_framework\",\n      \"channels\": [\n        {\n          \"identifier\": \"in.ekstep\"\n        }\n      ]\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"create"
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Create a framework with all valid fields",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"id has string - api.taxonomy.framework.create \", function () {\r",
															"    pm.expect(jsonResponse.id).to.be.equal(\"api.taxonomy.framework.create\");\r",
															"});\r",
															"\r",
															"pm.test(\"Version is 3.0 \", function () {\r",
															"    pm.expect(jsonResponse.ver).to.be.equal(\"3.0\");\r",
															"});\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','status', 'err','errmsg');\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"null\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status has string \", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"successful\");\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.result).to.have.all.keys('node_id', 'versionKey');\r",
															"  pm.expect(jsonResponse.result.node_id).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.result.versionKey).to.be.a(\"string\");\r",
															"});\r",
															"\r",
															"pm.collectionVariables.set(\"fw2_node\",jsonResponse.result.node_id);\r",
															"console.log(pm.collectionVariables.get(\"fw2_node\"));\r",
															"\r",
															"pm.test(`node id should be equal to ${pm.collectionVariables.get(\"fw2_node\")}`, () => {\r",
															"    pm.expect(jsonResponse.result.node_id).to.eql(pm.collectionVariables.get(\"fw2_code\"));\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{auth_token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "X-Channel-Id",
														"value": "{{X-Channel-Id}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"request\": {\r\n        \"framework\": {\r\n            \"name\": \"{{fw2_name}}\",\r\n            \"code\": \"{{fw2_code}}\",\r\n            \"Description\": \"This is a Sample Framework\",\r\n            \"channels\": [\r\n                {\r\n                    \"identifier\": \"{{channel_id}}\"\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{host}}/framework/v3/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"create"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Create a framework with invalid fields",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"pm.test(\"id has string - api.taxonomy.framework.create \", function () {\r",
															"    pm.expect(jsonResponse.id).to.be.equal(\"api.taxonomy.framework.create\");\r",
															"});\r",
															"\r",
															"pm.test(\"Version is 3.0 \", function () {\r",
															"    pm.expect(jsonResponse.ver).to.be.equal(\"3.0\");\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','status', 'err','errmsg');\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"String\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status has string \", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"failed\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.expect(jsonResponse.params.err).to.be.equal(\"ERR_INVALID_REQUEST\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.expect(jsonResponse.params.errmsg).to.be.equal(\"Invalid Request. Please Provide Required Properties!\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"CLIENT_ERROR\");\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {}
											},
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{auth_token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "X-Channel-Id",
														"value": "{{X-Channel-Id}}",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"request\": {\r\n        \"framework\": {\r\n            \"name\": [],\r\n            \"code\": \"Sample Framework\",\r\n            \"channels\": [\r\n                {\r\n                    \"identifier\": \"in.ekstep\"\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{host}}/framework/v3/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"create"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create a framework for invalid channel id",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.globals.set(\"name\", \"Framework19\");\r",
															"pm.globals.set(\"code\", \"Framework19\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});\r",
															"pm.test(\"id has string - api.taxonomy.framework.create \", function () {\r",
															"    pm.expect(jsonResponse.id).to.be.equal(\"api.taxonomy.framework.create\");\r",
															"});\r",
															"\r",
															"pm.test(\"Version is 3.0 \", function () {\r",
															"    pm.expect(jsonResponse.ver).to.be.equal(\"3.0\");\r",
															"});\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','status', 'err','errmsg');\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"String\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status has string \", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"failed\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.expect(jsonResponse.params.err).to.be.equal(\"NOT_FOUND\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string: Error! Node(s) doesn't Exists. | [Invalid Node Id.]: dummy\", function () {\r",
															"    pm.expect(jsonResponse.params.errmsg).to.be.equal(\"Error! Node(s) doesn't Exists. | [Invalid Node Id.]: dummy\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"RESOURCE_NOT_FOUND\");\r",
															"});\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{auth_token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "X-Channel-Id",
														"value": "dummy",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"request\": {\r\n        \"framework\": {\r\n            \"name\": \"{{name}}\",\r\n            \"code\": \"{{code}}\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{host}}/framework/v3/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"create"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create a framework that already exists",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"\r",
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"pm.test(\"id has string - api.taxonomy.framework.create \", function () {\r",
															"    pm.expect(jsonResponse.id).to.be.equal(\"api.taxonomy.framework.create\");\r",
															"});\r",
															"\r",
															"pm.test(\"Version is 3.0 \", function () {\r",
															"    pm.expect(jsonResponse.ver).to.be.equal(\"3.0\");\r",
															"});\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','status', 'err','errmsg');\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"String\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status has string \", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"failed\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.expect(jsonResponse.params.err).to.be.equal(\"CONSTRAINT_VALIDATION_FAILED\");\r",
															"});\r",
															"\r",
															"pm.test(`errmsg has string Object already exists with identifier:  ${pm.globals.get(\"node\")}`, () => {\r",
															"    pm.expect(jsonResponse.params.errmsg).to.eql(`Object already exists with identifier: ${pm.globals.get(\"node\")}` );\r",
															"}); \r",
															"console.log(`Object already exists with identifier: ${pm.globals.get(\"node\")}`);\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"CLIENT_ERROR\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{auth_token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "X-Channel-Id",
														"value": "{{X-Channel-Id}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"request\": {\r\n        \"framework\": {\r\n            \"name\": \"Sample Framework\",\r\n            \"code\": \"{{node}}\"\r\n        }\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{host}}/framework/v3/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"create"
													]
												}
											},
											"response": []
										}
									]
								}
							],
							"description": "1. Framework name should be updated before every run"
						},
						{
							"name": "Update framework",
							"item": [
								{
									"name": "Pre requisite",
									"item": [
										{
											"name": "Create a framework with valid mandatory fields Copy",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"\r",
															"pm.collectionVariables.set(\"fw3_node\",jsonResponse.result.node_id);\r",
															"console.log(pm.collectionVariables.get(\"fw3_node\"));\r",
															"\r",
															"pm.test(`node id should be equal to ${pm.collectionVariables.get(\"fw3_node\")}`, () => {\r",
															"    pm.expect(jsonResponse.result.node_id).to.eql(pm.collectionVariables.get(\"fw3_code\"));\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {}
											},
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{auth_token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"description": "(Required) It is the Unique Id to identify the root organisation to which the user belongs",
														"key": "X-Channel-Id",
														"value": "{{X-Channel-Id}}"
													},
													{
														"key": "",
														"value": "",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"framework\": {\n            \"name\": \"{{fw3_name}}\",\n            \"code\": \"{{fw3_code}}\"\n            \n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/framework/v3/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"create"
													]
												},
												"description": "This API is associated with creating a new framework on the Sunbird Platform.\n   - The endpoint for **Create a Framework** is `/framework/v1/create`\n   - It points to knowledge-mw-service - `/v1/framework/create`\n   - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
											},
											"response": [
												{
													"name": "OK ! Successful operation.\"create framework\" operation was successfully executed.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) It is the Unique Id to identify the root organisation to which the user belongs",
																"key": "X-Channel-Id",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"framework\": {\n      \"name\": \"Framework Name\",\n      \"code\": \"dummy_framework\",\n      \"channels\": [\n        {\n          \"identifier\": \"in.ekstep\"\n        }\n      ]\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"create"
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.framework.create\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T09:49:06.794Z\",\n  \"params\": {\n    \"resmsgid\": \"9b5d7ca0-3df1-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": \"9b4a90e0-3df1-11eb-9ff3-67c41480f6aa\",\n    \"status\": \"successful\",\n    \"err\": null,\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"node_id\": \"dummy_framework\",\n    \"versionKey\": \"1607939346678\"\n  }\n}"
												},
												{
													"name": "BAD REQUEST. The \"create framework\" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) It is the Unique Id to identify the root organisation to which the user belongs",
																"key": "X-Channel-Id",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"framework\": {\n      \"name\": \"Framework Name\",\n      \"code\": \"dummy_framework\",\n      \"channels\": [\n        {\n          \"identifier\": \"in.ekstep\"\n        }\n      ]\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"create"
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.framework.create\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T09:50:45.249Z\",\n  \"params\": {\n    \"resmsgid\": \"d60c8710-3df1-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"CONSTRAINT_VALIDATION_FAILED\",\n    \"errmsg\": \"Object already exists with identifier: dummy_framework\"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {}\n}"
												},
												{
													"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) It is the Unique Id to identify the root organisation to which the user belongs",
																"key": "X-Channel-Id",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"framework\": {\n      \"name\": \"Framework Name\",\n      \"code\": \"dummy_framework\",\n      \"channels\": [\n        {\n          \"identifier\": \"in.ekstep\"\n        }\n      ]\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"create"
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									],
									"description": "1. Each time before running the folder, unique name should be given for the framework for create framework API"
								},
								{
									"name": "Positive",
									"item": [
										{
											"name": "Update an existing framework with valid fields",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"id has string - api.taxonomy.framework.update \", function () {\r",
															"    pm.expect(jsonResponse.id).to.be.equal(\"api.taxonomy.framework.update\");\r",
															"});\r",
															"pm.test(\"Version is 3.0 \", function () {\r",
															"    pm.expect(jsonResponse.ver).to.be.equal(\"3.0\");\r",
															"});\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','status', 'err','errmsg');\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"null\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status has string \", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"successful\");\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.result).to.have.all.keys('node_id', 'versionKey');\r",
															"  pm.expect(jsonResponse.result.node_id).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.result.versionKey).to.be.a(\"string\");\r",
															"});\r",
															"\r",
															"pm.collectionVariables.set(\"fw3_node\",jsonResponse.result.node_id);\r",
															"console.log(pm.collectionVariables.get(\"fw3_node\"));\r",
															"\r",
															"pm.test(`node id should be equal to ${pm.collectionVariables.get(\"fw3_node\")}`, () => {\r",
															"    pm.expect(jsonResponse.result.node_id).to.eql(pm.collectionVariables.get(\"fw3_code\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "value",
															"value": "{{apiKey}}",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [
													{
														"description": "(Required) It is the Unique Id to identify the root organisation to which the user belongs",
														"key": "X-Channel-Id",
														"value": "{{X-Channel-Id}}",
														"disabled": true
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"request\": {\n    \"framework\": {\n      \"description\": \"Description for framework\"\n    }\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/framework/v3/update/{{fw3_code}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"update",
														"{{fw3_code}}"
													]
												},
												"description": "This API is associated with updating a framework\n  - The endpoint for **Update Framework** is `/framework/v1/update/{ID}`\n  - It points to knowledge-mw-service - `/v1/framework/update/{ID}`\n  - The fieldsmarked with an asterisk (*) are mandatory. They cannot be null or empty."
											},
											"response": [
												{
													"name": "OK ! Successful operation.\"update framework\" operation was successfully executed.",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json\n   - multipart/form-data\n   - application/x-www-form-urlencoded",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) It is the Unique Id to identify the root organisation to which the user belongs",
																"key": "X-Channel-Id",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"framework\": {\n      \"description\": \"Dumy framework updated\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/update/:ID",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"update",
																":ID"
															],
															"variable": [
																{
																	"key": "ID",
																	"value": "Ut enim offici",
																	"description": "(Required) The identifier of the framework to be updated"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.framework.update\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T09:57:20.317Z\",\n  \"params\": {\n    \"resmsgid\": \"c1871ed0-3df2-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": \"c17ff2e0-3df2-11eb-9ff3-67c41480f6aa\",\n    \"status\": \"successful\",\n    \"err\": null,\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"node_id\": \"dummy_framework\",\n    \"versionKey\": \"1607939840281\"\n  }\n}"
												},
												{
													"name": "BAD REQUEST. The \"update framework\" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json\n   - multipart/form-data\n   - application/x-www-form-urlencoded",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) It is the Unique Id to identify the root organisation to which the user belongs",
																"key": "X-Channel-Id",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"framework\": {\n      \"description\": \"Dumy framework updated\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/update/:ID",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"update",
																":ID"
															],
															"variable": [
																{
																	"key": "ID",
																	"value": "Ut enim offici",
																	"description": "(Required) The identifier of the framework to be updated"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"ts\": 24700756,\n  \"id\": \"ut culpa\",\n  \"params\": {\n    \"msgid\": \"esse consequat\",\n    \"resmsgid\": \"commodo aliqua magna Excepteur\",\n    \"status\": \"failed\",\n    \"err\": \"dolor laborum in ullamco\",\n    \"errmsg\": \"laborum laboris sunt\"\n  },\n  \"ver\": \"laboris ut qu\",\n  \"responseCode\": \"exercitation adipisicing in aliqua\",\n  \"result\": {}\n}"
												},
												{
													"name": "RESOURCE NOT FOUND. The \"update framework\" operation failed ! The possible reason for failure is that you may have passed invalid framework id.",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json\n   - multipart/form-data\n   - application/x-www-form-urlencoded",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) It is the Unique Id to identify the root organisation to which the user belongs",
																"key": "X-Channel-Id",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"framework\": {\n      \"description\": \"Dumy framework updated\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/update/:ID",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"update",
																":ID"
															],
															"variable": [
																{
																	"key": "ID",
																	"value": "Ut enim offici",
																	"description": "(Required) The identifier of the framework to be updated"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.framework.update\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T09:57:50.352Z\",\n  \"params\": {\n    \"resmsgid\": \"d36e1900-3df2-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"ERR_FRAMEWORK_NOT_FOUND\",\n    \"errmsg\": \"Framework Not Found With Id : dummy_framework1\"\n  },\n  \"responseCode\": \"RESOURCE_NOT_FOUND\",\n  \"result\": {}\n}"
												},
												{
													"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json\n   - multipart/form-data\n   - application/x-www-form-urlencoded",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) It is the Unique Id to identify the root organisation to which the user belongs",
																"key": "X-Channel-Id",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"framework\": {\n      \"description\": \"Dumy framework updated\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/update/:ID",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"update",
																":ID"
															],
															"variable": [
																{
																	"key": "ID",
																	"value": "Ut enim offici",
																	"description": "(Required) The identifier of the framework to be updated"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Update a non existing framework",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});\r",
															"pm.test(\"id has string - api.taxonomy.framework.update \", function () {\r",
															"    pm.expect(jsonResponse.id).to.be.equal(\"api.taxonomy.framework.update\");\r",
															"});\r",
															"pm.test(\"Version is 3.0 \", function () {\r",
															"    pm.expect(jsonResponse.ver).to.be.equal(\"3.0\");\r",
															"});\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','err','status','errmsg');\r",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.msgid).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"String\");\r",
															"  });\r",
															"\r",
															"pm.test(\"Err has string\", function () {\r",
															"    pm.expect(jsonResponse.params.err).to.be.equal(\"NOT_FOUND\");\r",
															"});\r",
															"pm.test(\"Status has string\", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"failed\");\r",
															"});\r",
															"pm.test(\"errmsg has string\", function () {\r",
															"    pm.expect(jsonResponse.params.errmsg).to.be.equal(\"Error! Node(s) doesn't Exists. | [Invalid Node Id.]: abc\");\r",
															"});\r",
															"pm.test(\"responseCode has string: RESOURCE_NOT_FOUND\", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"RESOURCE_NOT_FOUND\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "in",
															"value": "header",
															"type": "string"
														},
														{
															"key": "value",
															"value": "{{auth_token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "X-Channel-Id",
														"value": "{{X-Channel-Id}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"request\": {\r\n    \"framework\": {\r\n      \"description\": \"Description for framework\"\r\n    }\r\n  }\r\n}"
												},
												"url": {
													"raw": "{{host}}/framework/v3/update/abc",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"update",
														"abc"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Delete a Framework",
							"item": [
								{
									"name": "Pre requisite",
									"item": [
										{
											"name": "Create a framework",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.collectionVariables.set(\"fw4_node\",jsonResponse.result.node_id);\r",
															"console.log(pm.collectionVariables.get(\"fw4_node\"));\r",
															"\r",
															"pm.test(`node id should be equal to ${pm.collectionVariables.get(\"fw4_node\")}`, () => {\r",
															"    pm.expect(jsonResponse.result.node_id).to.eql(pm.collectionVariables.get(\"fw4_code\"));\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {}
											},
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{auth_token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"description": "(Required) It is the Unique Id to identify the root organisation to which the user belongs",
														"key": "X-Channel-Id",
														"value": "{{X-Channel-Id}}"
													},
													{
														"key": "",
														"value": "",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"framework\": {\n            \"name\": \"{{fw4_name}}\",\n            \"code\": \"{{fw4_code}}\"\n            \n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/framework/v3/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"create"
													]
												},
												"description": "This API is associated with creating a new framework on the Sunbird Platform.\n   - The endpoint for **Create a Framework** is `/framework/v1/create`\n   - It points to knowledge-mw-service - `/v1/framework/create`\n   - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
											},
											"response": [
												{
													"name": "OK ! Successful operation.\"create framework\" operation was successfully executed.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) It is the Unique Id to identify the root organisation to which the user belongs",
																"key": "X-Channel-Id",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"framework\": {\n      \"name\": \"Framework Name\",\n      \"code\": \"dummy_framework\",\n      \"channels\": [\n        {\n          \"identifier\": \"in.ekstep\"\n        }\n      ]\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"create"
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.framework.create\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T09:49:06.794Z\",\n  \"params\": {\n    \"resmsgid\": \"9b5d7ca0-3df1-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": \"9b4a90e0-3df1-11eb-9ff3-67c41480f6aa\",\n    \"status\": \"successful\",\n    \"err\": null,\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"node_id\": \"dummy_framework\",\n    \"versionKey\": \"1607939346678\"\n  }\n}"
												},
												{
													"name": "BAD REQUEST. The \"create framework\" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) It is the Unique Id to identify the root organisation to which the user belongs",
																"key": "X-Channel-Id",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"framework\": {\n      \"name\": \"Framework Name\",\n      \"code\": \"dummy_framework\",\n      \"channels\": [\n        {\n          \"identifier\": \"in.ekstep\"\n        }\n      ]\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"create"
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.framework.create\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T09:50:45.249Z\",\n  \"params\": {\n    \"resmsgid\": \"d60c8710-3df1-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"CONSTRAINT_VALIDATION_FAILED\",\n    \"errmsg\": \"Object already exists with identifier: dummy_framework\"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {}\n}"
												},
												{
													"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) It is the Unique Id to identify the root organisation to which the user belongs",
																"key": "X-Channel-Id",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"framework\": {\n      \"name\": \"Framework Name\",\n      \"code\": \"dummy_framework\",\n      \"channels\": [\n        {\n          \"identifier\": \"in.ekstep\"\n        }\n      ]\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"create"
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									],
									"description": "1. Each time before running the folder, unique name should be given for the framework for create framework API"
								},
								{
									"name": "Positive",
									"item": [
										{
											"name": "Delete a valid framework",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"id has string - api.taxonomy.framework.retire \", function () {\r",
															"    pm.expect(jsonResponse.id).to.be.equal(\"api.taxonomy.framework.retire\");\r",
															"});\r",
															"pm.test(\"Version is 3.0 \", function () {\r",
															"    pm.expect(jsonResponse.ver).to.be.equal(\"3.0\");\r",
															"});\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','err','status','errmsg');\r",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.msgid).to.be.a('null');\r",
															"  pm.expect(jsonResponse.params.err).to.be.a('null');\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a('null');\r",
															"  });\r",
															"\r",
															"\r",
															"pm.test(\"Status has string\", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"successful\");\r",
															"});\r",
															"\r",
															"pm.test(\"responseCode has string\", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.result).to.have.all.keys('identifier','node_id');\r",
															"  pm.expect(jsonResponse.result.identifier).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.result.node_id).to.be.a(\"string\");\r",
															"});\r",
															"\r",
															"pm.collectionVariables.set(\"fw4_node\",jsonResponse.result.node_id);\r",
															"console.log(pm.collectionVariables.get(\"fw4_node\"));\r",
															"\r",
															"pm.collectionVariables.set(\"fw4_id\",jsonResponse.result.identifier);\r",
															"console.log(pm.collectionVariables.get(\"fw4_id\"));\r",
															"\r",
															"pm.test(`identifier should be equal to ${pm.collectionVariables.get(\"fw4_id\")}`, () => {\r",
															"    pm.expect(jsonResponse.result.identifier).to.eql(pm.collectionVariables.get(\"fw4_code\"));\r",
															"});\r",
															"\r",
															"pm.test(`node id should be equal to ${pm.collectionVariables.get(\"fw4_node\")}`, () => {\r",
															"    pm.expect(jsonResponse.result.node_id).to.eql(pm.collectionVariables.get(\"fw4_code\"));\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "in",
															"value": "header",
															"type": "string"
														},
														{
															"key": "value",
															"value": "{{auth_token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [
													{
														"key": "X-Channel-Id",
														"value": "{{X-Channel-Id}}",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{host}}/framework/v3/retire/{{fw4_code}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"retire",
														"{{fw4_code}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Delete an invalid framework",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string:Not Found\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});\r",
															"pm.test(\"id has string - api.taxonomy.framework.retire \", function () {\r",
															"    pm.expect(jsonResponse.id).to.be.equal(\"api.taxonomy.framework.retire\");\r",
															"});\r",
															"pm.test(\"Version is 3.0 \", function () {\r",
															"    pm.expect(jsonResponse.ver).to.be.equal(\"3.0\");\r",
															"});\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','err','status','errmsg');\r",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.msgid).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"String\");\r",
															"  });\r",
															"\r",
															"pm.test(\"Err has string: NOT_FOUND\", function () {\r",
															"    pm.expect(jsonResponse.params.err).to.be.equal(\"NOT_FOUND\");\r",
															"});\r",
															"pm.test(\"Status has string: failed\", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"failed\");\r",
															"});\r",
															"pm.test(\"errmsg has string: Error! Node(s) doesn't Exists. | [Invalid Node Id.]: abc\", function () {\r",
															"    pm.expect(jsonResponse.params.errmsg).to.be.equal(\"Error! Node(s) doesn't Exists. | [Invalid Node Id.]: abc\");\r",
															"});\r",
															"pm.test(\"responseCode has string: RESOURCE_NOT_FOUND\", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"RESOURCE_NOT_FOUND\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "in",
															"value": "header",
															"type": "string"
														},
														{
															"key": "value",
															"value": "{{auth_token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "X-Channel-Id",
														"value": "{{X-Channel-Id}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{host}}/framework/v3/retire/abc",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"retire",
														"abc"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Publish Framework",
							"item": [
								{
									"name": "Pre requisite",
									"item": [
										{
											"name": "Create Master category",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.collectionVariables.set(\"master6_id\",jsonResponse.result.identifier);\r",
															"console.log(pm.collectionVariables.get(\"master6_id\"));\r",
															"pm.collectionVariables.set(\"master6_node\",jsonResponse.result.node_id);\r",
															"console.log(pm.collectionVariables.get(\"master6_node\"));\r",
															"\r",
															"pm.test(`identifier should be equal to ${pm.collectionVariables.get(\"master6_id\")}`, () => {\r",
															"    pm.expect(jsonResponse.result.identifier).to.eql(`${pm.collectionVariables.get(\"master6_code\")}`);\r",
															"});\r",
															"\r",
															"pm.test(`node_id should be equal to ${pm.collectionVariables.get(\"master6_node\")}`, () => {\r",
															"    pm.expect(jsonResponse.result.node_id).to.eql(`${pm.collectionVariables.get(\"master6_code\")}`);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{auth_token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-Channel-Id",
														"value": "{{X-Channel-Id}}"
													},
													{
														"key": "",
														"value": "",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"category\": {\n            \"name\": \"master\",\n            \"code\": \"{{master6_code}}\",\n            \"targetIdFieldName\": \"targetmasterIds\",\n            \"searchLabelFieldName\": \"se_master\",\n            \"searchIdFieldName\": \"se_master\",\n            \"orgIdFieldName\": \"masterIds\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/framework/v3/category/master/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"category",
														"master",
														"create"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create a framework",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.collectionVariables.set(\"fw5_node\",jsonResponse.result.node_id);\r",
															"console.log(pm.collectionVariables.get(\"fw5_node\"));\r",
															"\r",
															"pm.test(`node id should be equal to ${pm.collectionVariables.get(\"fw5_node\")}`, () => {\r",
															"    pm.expect(jsonResponse.result.node_id).to.eql(pm.collectionVariables.get(\"fw5_code\"));\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {}
											},
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{auth_token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"description": "(Required) It is the Unique Id to identify the root organisation to which the user belongs",
														"key": "X-Channel-Id",
														"value": "{{X-Channel-Id}}"
													},
													{
														"key": "",
														"value": "",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"framework\": {\n            \"name\": \"{{fw5_name}}\",\n            \"code\": \"{{fw5_code}}\"\n            \n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/framework/v3/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"create"
													]
												},
												"description": "This API is associated with creating a new framework on the Sunbird Platform.\n   - The endpoint for **Create a Framework** is `/framework/v1/create`\n   - It points to knowledge-mw-service - `/v1/framework/create`\n   - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
											},
											"response": [
												{
													"name": "OK ! Successful operation.\"create framework\" operation was successfully executed.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) It is the Unique Id to identify the root organisation to which the user belongs",
																"key": "X-Channel-Id",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"framework\": {\n      \"name\": \"Framework Name\",\n      \"code\": \"dummy_framework\",\n      \"channels\": [\n        {\n          \"identifier\": \"in.ekstep\"\n        }\n      ]\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"create"
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.framework.create\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T09:49:06.794Z\",\n  \"params\": {\n    \"resmsgid\": \"9b5d7ca0-3df1-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": \"9b4a90e0-3df1-11eb-9ff3-67c41480f6aa\",\n    \"status\": \"successful\",\n    \"err\": null,\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"node_id\": \"dummy_framework\",\n    \"versionKey\": \"1607939346678\"\n  }\n}"
												},
												{
													"name": "BAD REQUEST. The \"create framework\" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) It is the Unique Id to identify the root organisation to which the user belongs",
																"key": "X-Channel-Id",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"framework\": {\n      \"name\": \"Framework Name\",\n      \"code\": \"dummy_framework\",\n      \"channels\": [\n        {\n          \"identifier\": \"in.ekstep\"\n        }\n      ]\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"create"
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.framework.create\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T09:50:45.249Z\",\n  \"params\": {\n    \"resmsgid\": \"d60c8710-3df1-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"CONSTRAINT_VALIDATION_FAILED\",\n    \"errmsg\": \"Object already exists with identifier: dummy_framework\"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {}\n}"
												},
												{
													"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) It is the Unique Id to identify the root organisation to which the user belongs",
																"key": "X-Channel-Id",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"framework\": {\n      \"name\": \"Framework Name\",\n      \"code\": \"dummy_framework\",\n      \"channels\": [\n        {\n          \"identifier\": \"in.ekstep\"\n        }\n      ]\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"create"
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Create Framework category",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.collectionVariables.set(\"fwcat_cat1\",jsonResponse.result.identifier);\r",
															"console.log(pm.collectionVariables.get(\"fwcat_cat1\"));\r",
															"\r",
															"pm.test(`identifier should be equal to ${pm.collectionVariables.get(\"fwcat_cat1\")}`, () => {\r",
															"    pm.expect(jsonResponse.result.identifier).to.eql(`${pm.collectionVariables.get(\"fw5_code\")}_${pm.collectionVariables.get(\"master6_code\")}`);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "X-Channel-Id",
														"value": "{{X-Channel-Id}}"
													},
													{
														"key": "Authorization",
														"value": ""
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"request\": {\n    \"category\": {\n      \"name\": \"Board\",\n      \"code\": \"{{master6_code}}\",\n      \"description\":\"Board category\"\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{host}}/framework/v3/category/create?framework={{fw5_code}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"category",
														"create"
													],
													"query": [
														{
															"key": "framework",
															"value": "{{fw5_code}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Positive",
									"item": [
										{
											"name": "Publish a valid Framework",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"id has string - api.taxonomy.framework.publish \", function () {\r",
															"    pm.expect(jsonResponse.id).to.be.equal(\"api.taxonomy.framework.publish\");\r",
															"});\r",
															"pm.test(\"Version is 3.0 \", function () {\r",
															"    pm.expect(jsonResponse.ver).to.be.equal(\"3.0\");\r",
															"});\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','err','status','errmsg');\r",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.msgid).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"null\");\r",
															"  });\r",
															"\r",
															"pm.test(\"responseCode has string\", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"OK\");\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(`publishStatus has string: Publish Event for Framework Id ${pm.collectionVariables.get(\"fw5_code\")} is pushed Successfully!`, function () {\r",
															"    pm.expect(jsonResponse.result.publishStatus).to.eql(`Publish Event for Framework Id '${pm.collectionVariables.get(\"fw5_code\")}' is pushed Successfully!`);\r",
															"});\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{auth_token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"description": "(Required) It is the Unique Id to identify the root organisation to which the user belongs",
														"key": "X-Channel-Id",
														"value": "{{X-Channel-Id}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/framework/v3/publish/{{fw5_code}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"publish",
														"{{fw5_code}}"
													]
												},
												"description": "This API is associated with publishing a framework\n  - The endpoint for **Publish Framework** is `/framework/v1/publish/{ID}`\n  - It points to knowledge-mw-service - `/v1/framework/publish/{ID}`\n  - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
											},
											"response": [
												{
													"name": "OK ! Successful operation.\"Publish framework\" operation was successfully executed.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "The Content Type entity is the media type of the resource.\n  Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) It is the Unique Id to identify the root organisation to which the user belongs",
																"key": "X-Channel-Id",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/publish/:ID",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"publish",
																":ID"
															],
															"variable": [
																{
																	"key": "ID",
																	"value": "Ut enim offici",
																	"description": "(Required) The identifier of the framework to be published"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.framework.publish\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T10:07:54.648Z\",\n  \"params\": {\n    \"resmsgid\": \"3b9e5980-3df4-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": \"3b9cabd0-3df4-11eb-9ff3-67c41480f6aa\",\n    \"status\": \"successful\",\n    \"err\": null,\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"publishStatus\": \"Publish Operation for Framework Id 'dummy_framework' Started Successfully!\"\n  }\n}"
												},
												{
													"name": "BAD REQUEST. The \"Publish Framework\" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "The Content Type entity is the media type of the resource.\n  Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) It is the Unique Id to identify the root organisation to which the user belongs",
																"key": "X-Channel-Id",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/publish/:ID",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"publish",
																":ID"
															],
															"variable": [
																{
																	"key": "ID",
																	"value": "Ut enim offici",
																	"description": "(Required) The identifier of the framework to be published"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.framework.publish\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T10:08:19.872Z\",\n  \"params\": {\n    \"resmsgid\": \"4aa73a00-3df4-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"ERR_INVALID_FRAMEOWRK_ID\",\n    \"errmsg\": \"Invalid Framework Id. Framework doesn't exist.\"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {}\n}"
												},
												{
													"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "The Content Type entity is the media type of the resource.\n  Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) It is the Unique Id to identify the root organisation to which the user belongs",
																"key": "X-Channel-Id",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/publish/:ID",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"publish",
																":ID"
															],
															"variable": [
																{
																	"key": "ID",
																	"value": "Ut enim offici",
																	"description": "(Required) The identifier of the framework to be published"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Publish an invalid framework",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 500\", function () {\r",
															"    pm.response.to.have.status(500);\r",
															"});\r",
															"pm.test(\"id has string - api.taxonomy.framework.publish \", function () {\r",
															"    pm.expect(jsonResponse.id).to.be.equal(\"api.taxonomy.framework.publish\");\r",
															"});\r",
															"pm.test(\"Version is 3.0 \", function () {\r",
															"    pm.expect(jsonResponse.ver).to.be.equal(\"3.0\");\r",
															"});\r",
															"pm.test(\"errmsg has string\", function () {\r",
															"    pm.expect(jsonResponse.params.errmsg).to.be.equal(\"Something went wrong in server while processing the request\");\r",
															"});\r",
															"\r",
															"pm.test(\"responseCode has string\", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"SERVER_ERROR\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Channel-Id",
														"value": "sunbird"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "{{auth_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}"
												},
												"url": {
													"raw": "{{host}}/framework/v3/publish/dummy",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"publish",
														"dummy"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Copy Framework",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "Copy a valid framework",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"id has string - api.taxonomy.framework.copy \", function () {\r",
															"    pm.expect(jsonResponse.id).to.be.equal(\"api.taxonomy.framework.copy\");\r",
															"});\r",
															"pm.test(\"Version is 3.0 \", function () {\r",
															"    pm.expect(jsonResponse.ver).to.be.equal(\"3.0\");\r",
															"});\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','status', 'err','errmsg');\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"null\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status has string Successful\", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"successful\");\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.result).to.have.all.keys('node_id');\r",
															"  pm.expect(jsonResponse.result.node_id).to.be.a(\"String\");\r",
															"});\r",
															"\r",
															"pm.collectionVariables.set(\"copy_node\",jsonResponse.result.node_id);\r",
															"console.log(pm.collectionVariables.get(\"copy_node\"));\r",
															"\r",
															"pm.test(`node id should be equal to ${pm.collectionVariables.get(\"copy_fw\")}`, () => {\r",
															"    pm.expect(jsonResponse.result.node_id).to.eql(pm.collectionVariables.get(\"copy_fw\"));\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "value",
															"value": "{{apiKey}}",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"description": "(Required) It is the Unique Id to identify the root organisation to which the user belongs",
														"key": "X-Channel-Id",
														"value": "{{X-Channel-Id}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"request\": {\n    \"framework\": {\n      \"code\": \"{{copy_fw}}\"\n    }\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/framework/v3/copy/{{fw5_code}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"copy",
														"{{fw5_code}}"
													]
												},
												"description": "This API is associated with copying a framework\n  - The endpoint for **Copy Framework** is `/framework/v1/copy/{ID}`\n  - It points to knowledge-mw-service - `v1/framework/copy/{ID}`\n  - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
											},
											"response": [
												{
													"name": "OK ! Successful operation.\"Copy framework\" operation was successfully executed.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.\n  Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) It is the Unique Id to identify the root organisation to which the user belongs",
																"key": "X-Channel-Id",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"framework\": {\n      \"code\": \"NCERTCOPY11\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/copy/:ID",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"copy",
																":ID"
															],
															"variable": [
																{
																	"key": "ID",
																	"value": "Ut enim offici",
																	"description": "(Required) The identifier of the framework to be copied"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.framework.copy\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T10:46:44.287Z\",\n  \"params\": {\n    \"resmsgid\": \"a8310cf0-3df9-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": \"a6b2aa50-3df9-11eb-9ff3-67c41480f6aa\",\n    \"status\": \"successful\",\n    \"err\": null,\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"node_id\": \"NCERTCOPY11\"\n  }\n}"
												},
												{
													"name": "BAD REQUEST. The \"Copy fFramework\" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.\n  Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) It is the Unique Id to identify the root organisation to which the user belongs",
																"key": "X-Channel-Id",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"framework\": {\n      \"code\": \"NCERTCOPY11\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/copy/:ID",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"copy",
																":ID"
															],
															"variable": [
																{
																	"key": "ID",
																	"value": "Ut enim offici",
																	"description": "(Required) The identifier of the framework to be copied"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.framework.copy\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T10:47:22.578Z\",\n  \"params\": {\n    \"resmsgid\": \"bf03cb20-3df9-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"ERR_FRAMEWORK_EXISTS\",\n    \"errmsg\": \"Framework with code: NCERTCOPY11, already exists.\"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {}\n}"
												},
												{
													"name": "RESOURCE NOT FOUND. The \"Copy fFramework\" operation failed ! The possible reason for failure is that you may have missed invlalid framework id.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.\n  Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) It is the Unique Id to identify the root organisation to which the user belongs",
																"key": "X-Channel-Id",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"framework\": {\n      \"code\": \"NCERTCOPY11\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/copy/:ID",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"copy",
																":ID"
															],
															"variable": [
																{
																	"key": "ID",
																	"value": "Ut enim offici",
																	"description": "(Required) The identifier of the framework to be copied"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.framework.copy\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T10:47:47.865Z\",\n  \"params\": {\n    \"resmsgid\": \"ce164890-3df9-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"ERR_DATA_NOT_FOUND\",\n    \"errmsg\": \"Data not found with id : NCERT101100\"\n  },\n  \"responseCode\": \"RESOURCE_NOT_FOUND\",\n  \"result\": {}\n}"
												},
												{
													"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.\n  Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) It is the Unique Id to identify the root organisation to which the user belongs",
																"key": "X-Channel-Id",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"framework\": {\n      \"code\": \"NCERTCOPY11\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/copy/:ID",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"copy",
																":ID"
															],
															"variable": [
																{
																	"key": "ID",
																	"value": "Ut enim offici",
																	"description": "(Required) The identifier of the framework to be copied"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									],
									"description": "name of the framework should be updated before every run"
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Copy an invalid framework",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});\r",
															"pm.test(\"id has string - api.taxonomy.framework.copy \", function () {\r",
															"    pm.expect(jsonResponse.id).to.be.equal(\"api.taxonomy.framework.copy\");\r",
															"});\r",
															"pm.test(\"Version is 3.0 \", function () {\r",
															"    pm.expect(jsonResponse.ver).to.be.equal(\"3.0\");\r",
															"});\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','err','status','errmsg');\r",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.msgid).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"String\");\r",
															"  });\r",
															"\r",
															"pm.test(\"Err has string\", function () {\r",
															"    pm.expect(jsonResponse.params.err).to.be.equal(\"NOT_FOUND\");\r",
															"});\r",
															"pm.test(\"Status has string\", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"failed\");\r",
															"});\r",
															"pm.test(\"errmsg has string\", function () {\r",
															"    pm.expect(jsonResponse.params.errmsg).to.be.equal(\"Error! Node(s) doesn't Exists. | [Invalid Node Id.]: dummy\");\r",
															"});\r",
															"pm.test(\"responseCode has string\", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"RESOURCE_NOT_FOUND\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "in",
															"value": "header",
															"type": "string"
														},
														{
															"key": "value",
															"value": "{{auth_token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "X-Channel-Id",
														"value": "{{X-Channel-Id}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"request\": {\r\n    \"framework\": {\r\n      \"code\": \"Framework_copy_5\"\r\n    }\r\n  }\r\n}"
												},
												"url": {
													"raw": "{{host}}/framework/v3/copy/dummy",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"copy",
														"dummy"
													]
												}
											},
											"response": []
										},
										{
											"name": "Copy a framework with existing name",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"pm.test(\"id has string - api.taxonomy.framework.copy \", function () {\r",
															"    pm.expect(jsonResponse.id).to.be.equal(\"api.taxonomy.framework.copy\");\r",
															"});\r",
															"pm.test(\"Version is 3.0 \", function () {\r",
															"    pm.expect(jsonResponse.ver).to.be.equal(\"3.0\");\r",
															"});\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','err','status','errmsg');\r",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.msgid).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"String\");\r",
															"  });\r",
															"\r",
															"pm.test(\"Err has string\", function () {\r",
															"    pm.expect(jsonResponse.params.err).to.be.equal(\"CONSTRAINT_VALIDATION_FAILED\");\r",
															"});\r",
															"pm.test(\"Status has string\", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"failed\");\r",
															"});\r",
															"pm.test(`errmsg has string- Object already exists with identifier: ${(pm.collectionVariables.get(\"copy_fw\"))}`, function () {\r",
															"    pm.expect(jsonResponse.params.errmsg).to.be.equal(`Object already exists with identifier: ${(pm.collectionVariables.get(\"copy_fw\"))}`);\r",
															"});\r",
															"pm.test(\"responseCode has string\", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"CLIENT_ERROR\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "in",
															"value": "header",
															"type": "string"
														},
														{
															"key": "value",
															"value": "{{auth_token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "X-Channel-Id",
														"value": "{{X-Channel-Id}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"request\": {\r\n    \"framework\": {\r\n      \"code\": \"{{copy_fw}}\"\r\n    }\r\n  }\r\n}"
												},
												"url": {
													"raw": "{{host}}/framework/v3/copy/{{fw5_code}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"copy",
														"{{fw5_code}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Read a Framework",
							"item": [
								{
									"name": "Pre requisite",
									"item": [
										{
											"name": "Create Master category",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.collectionVariables.set(\"master7_id\",jsonResponse.result.identifier);\r",
															"console.log(pm.collectionVariables.get(\"master7_id\"));\r",
															"pm.collectionVariables.set(\"master7_node\",jsonResponse.result.node_id);\r",
															"console.log(pm.collectionVariables.get(\"master7_node\"));\r",
															"\r",
															"pm.test(`identifier should be equal to ${pm.collectionVariables.get(\"master7_id\")}`, () => {\r",
															"    pm.expect(jsonResponse.result.identifier).to.eql(`${pm.collectionVariables.get(\"master7_code\")}`);\r",
															"});\r",
															"\r",
															"pm.test(`node_id should be equal to ${pm.collectionVariables.get(\"master7_node\")}`, () => {\r",
															"    pm.expect(jsonResponse.result.node_id).to.eql(`${pm.collectionVariables.get(\"master7_code\")}`);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{auth_token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-Channel-Id",
														"value": "{{X-Channel-Id}}"
													},
													{
														"key": "",
														"value": "",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"category\": {\n            \"name\": \"master\",\n            \"code\": \"{{master7_code}}\",\n            \"targetIdFieldName\": \"targetmasterIds\",\n            \"searchLabelFieldName\": \"se_master\",\n            \"searchIdFieldName\": \"se_master\",\n            \"orgIdFieldName\": \"masterIds\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/framework/v3/category/master/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"category",
														"master",
														"create"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create a framework",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.collectionVariables.set(\"fw6_node\",jsonResponse.result.node_id);\r",
															"console.log(pm.collectionVariables.get(\"fw6_node\"));\r",
															"\r",
															"pm.test(`node id should be equal to ${pm.collectionVariables.get(\"fw6_node\")}`, () => {\r",
															"    pm.expect(jsonResponse.result.node_id).to.eql(pm.collectionVariables.get(\"fw6_code\"));\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {}
											},
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{auth_token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"description": "(Required) It is the Unique Id to identify the root organisation to which the user belongs",
														"key": "X-Channel-Id",
														"value": "{{X-Channel-Id}}"
													},
													{
														"key": "",
														"value": "",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"framework\": {\n            \"name\": \"{{fw6_name}}\",\n            \"code\": \"{{fw6_code}}\"\n            \n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/framework/v3/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"create"
													]
												},
												"description": "This API is associated with creating a new framework on the Sunbird Platform.\n   - The endpoint for **Create a Framework** is `/framework/v1/create`\n   - It points to knowledge-mw-service - `/v1/framework/create`\n   - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
											},
											"response": [
												{
													"name": "OK ! Successful operation.\"create framework\" operation was successfully executed.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) It is the Unique Id to identify the root organisation to which the user belongs",
																"key": "X-Channel-Id",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"framework\": {\n      \"name\": \"Framework Name\",\n      \"code\": \"dummy_framework\",\n      \"channels\": [\n        {\n          \"identifier\": \"in.ekstep\"\n        }\n      ]\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"create"
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.framework.create\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T09:49:06.794Z\",\n  \"params\": {\n    \"resmsgid\": \"9b5d7ca0-3df1-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": \"9b4a90e0-3df1-11eb-9ff3-67c41480f6aa\",\n    \"status\": \"successful\",\n    \"err\": null,\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"node_id\": \"dummy_framework\",\n    \"versionKey\": \"1607939346678\"\n  }\n}"
												},
												{
													"name": "BAD REQUEST. The \"create framework\" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) It is the Unique Id to identify the root organisation to which the user belongs",
																"key": "X-Channel-Id",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"framework\": {\n      \"name\": \"Framework Name\",\n      \"code\": \"dummy_framework\",\n      \"channels\": [\n        {\n          \"identifier\": \"in.ekstep\"\n        }\n      ]\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"create"
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.framework.create\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T09:50:45.249Z\",\n  \"params\": {\n    \"resmsgid\": \"d60c8710-3df1-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"CONSTRAINT_VALIDATION_FAILED\",\n    \"errmsg\": \"Object already exists with identifier: dummy_framework\"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {}\n}"
												},
												{
													"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) It is the Unique Id to identify the root organisation to which the user belongs",
																"key": "X-Channel-Id",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"framework\": {\n      \"name\": \"Framework Name\",\n      \"code\": \"dummy_framework\",\n      \"channels\": [\n        {\n          \"identifier\": \"in.ekstep\"\n        }\n      ]\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"create"
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Link  the framework to the category",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.collectionVariables.set(\"fwcat_cat2\",jsonResponse.result.identifier);\r",
															"console.log(pm.collectionVariables.get(\"fwcat_cat2\"));\r",
															"\r",
															"pm.test(`identifier should be equal to ${pm.collectionVariables.get(\"fwcat_cat2\")}`, () => {\r",
															"    pm.expect(jsonResponse.result.identifier).to.eql(`${pm.collectionVariables.get(\"fw6_code\")}_${pm.collectionVariables.get(\"master7_code\")}`);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "X-Channel-Id",
														"value": "{{X-Channel-Id}}"
													},
													{
														"key": "Authorization",
														"value": ""
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"request\": {\n    \"category\": {\n      \"name\": \"Board\",\n      \"code\": \"{{master7_code}}\",\n      \"description\":\"Board category\"\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{host}}/framework/v3/category/create?framework={{fw6_code}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"category",
														"create"
													],
													"query": [
														{
															"key": "framework",
															"value": "{{fw6_code}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Publish a valid Framework Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"id has string - api.taxonomy.framework.publish \", function () {\r",
															"    pm.expect(jsonResponse.id).to.be.equal(\"api.taxonomy.framework.publish\");\r",
															"});\r",
															"pm.test(\"Version is 3.0 \", function () {\r",
															"    pm.expect(jsonResponse.ver).to.be.equal(\"3.0\");\r",
															"});\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','err','status','errmsg');\r",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.msgid).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"null\");\r",
															"  });\r",
															"\r",
															"pm.test(\"responseCode has string\", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"OK\");\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(`publishStatus has string: Publish Event for Framework Id ${pm.collectionVariables.get(\"fw6_code\")} is pushed Successfully!`, function () {\r",
															"    pm.expect(jsonResponse.result.publishStatus).to.eql(`Publish Event for Framework Id '${pm.collectionVariables.get(\"fw6_code\")}' is pushed Successfully!`);\r",
															"});\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{auth_token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"description": "(Required) It is the Unique Id to identify the root organisation to which the user belongs",
														"key": "X-Channel-Id",
														"value": "{{X-Channel-Id}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/framework/v3/publish/{{fw6_code}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"publish",
														"{{fw6_code}}"
													]
												},
												"description": "This API is associated with publishing a framework\n  - The endpoint for **Publish Framework** is `/framework/v1/publish/{ID}`\n  - It points to knowledge-mw-service - `/v1/framework/publish/{ID}`\n  - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
											},
											"response": [
												{
													"name": "OK ! Successful operation.\"Publish framework\" operation was successfully executed.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "The Content Type entity is the media type of the resource.\n  Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) It is the Unique Id to identify the root organisation to which the user belongs",
																"key": "X-Channel-Id",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/publish/:ID",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"publish",
																":ID"
															],
															"variable": [
																{
																	"key": "ID",
																	"value": "Ut enim offici",
																	"description": "(Required) The identifier of the framework to be published"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.framework.publish\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T10:07:54.648Z\",\n  \"params\": {\n    \"resmsgid\": \"3b9e5980-3df4-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": \"3b9cabd0-3df4-11eb-9ff3-67c41480f6aa\",\n    \"status\": \"successful\",\n    \"err\": null,\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"publishStatus\": \"Publish Operation for Framework Id 'dummy_framework' Started Successfully!\"\n  }\n}"
												},
												{
													"name": "BAD REQUEST. The \"Publish Framework\" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "The Content Type entity is the media type of the resource.\n  Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) It is the Unique Id to identify the root organisation to which the user belongs",
																"key": "X-Channel-Id",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/publish/:ID",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"publish",
																":ID"
															],
															"variable": [
																{
																	"key": "ID",
																	"value": "Ut enim offici",
																	"description": "(Required) The identifier of the framework to be published"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.framework.publish\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T10:08:19.872Z\",\n  \"params\": {\n    \"resmsgid\": \"4aa73a00-3df4-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"ERR_INVALID_FRAMEOWRK_ID\",\n    \"errmsg\": \"Invalid Framework Id. Framework doesn't exist.\"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {}\n}"
												},
												{
													"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "The Content Type entity is the media type of the resource.\n  Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) It is the Unique Id to identify the root organisation to which the user belongs",
																"key": "X-Channel-Id",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/publish/:ID",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"publish",
																":ID"
															],
															"variable": [
																{
																	"key": "ID",
																	"value": "Ut enim offici",
																	"description": "(Required) The identifier of the framework to be published"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "Positive",
									"item": [
										{
											"name": "Read a valid Live framework",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"\r",
															"pm.test('Status code is 200', function () {\r",
															"    pm.response.to.have.status(200);\r",
															"})\r",
															"\r",
															"pm.test('id has string - api.taxonomy.framework.read', function () {\r",
															"    pm.expect(jsonResponse.id).to.be.equal('api.taxonomy.framework.read');\r",
															"})\r",
															"\r",
															"pm.test('Version is 3.0 ', function () {\r",
															"    pm.expect(jsonResponse.ver).to.be.equal('3.0');\r",
															"})\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.result.framework).to.have.all.keys('identifier','lastStatusChangedOn','code','channel','languageCode','type','createdOn','objectType','versionKey','systemDefault','name','lastUpdatedOn','status','categories');\r",
															"  pm.expect(jsonResponse.result.framework.identifier).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.result.framework.lastStatusChangedOn).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.result.framework.code).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.result.framework.channel).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.result.framework.languageCode).to.be.a('array');\r",
															"  pm.expect(jsonResponse.result.framework.type).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.result.framework.createdOn).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.result.framework.objectType).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.result.framework.versionKey).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.result.framework.systemDefault).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.result.framework.name).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.result.framework.lastUpdatedOn).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.result.framework.status).to.be.a(\"String\");\r",
															"\r",
															"  const requiredKeys = ['identifier', 'lastStatusChangedOn', 'code', 'channel', 'description', 'index', 'languageCode', 'createdOn', 'versionKey', 'objectType', 'framework', 'name', 'lastUpdatedOn', 'status'];\r",
															"  // Loop through each category and verify the keys\r",
															"  jsonResponse.result.framework.categories.forEach(category => {\r",
															"      requiredKeys.forEach(key => {\r",
															"          pm.expect(category).to.have.property(key);\r",
															"      });\r",
															"  });\r",
															"});\r",
															"\r",
															"pm.test('Status has string Live ', function () {\r",
															"    pm.expect(jsonResponse.result.framework.status).to.be.equal('Live');\r",
															"})\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.globals.get(\"name_fw\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{auth_token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "X-Channel-Id",
														"value": "{{X-Channel-Id}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{host}}/framework/v3/read/{{fw6_code}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"read",
														"{{fw6_code}}"
													]
												},
												"description": "This API is associated with fetching a specific framework\n  - The endpoint for **Get a Framework** is `/framework/v1/read/{ID}`\n  - It points to knowledge-mw-service - `/v1/framework/read/{ID}`\n  - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
											},
											"response": [
												{
													"name": "OK ! Successful operation.\"read framework\" operation was successfully executed.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/framework/v1/read/:ID",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"read",
																":ID"
															],
															"variable": [
																{
																	"key": "ID",
																	"value": "Ut enim offici",
																	"description": "(Required) The identifier of the framework to be fetched"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.framework.read\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T19:51:24ZZ\",\n  \"params\": {\n    \"resmsgid\": \"28f10a2a-ce6c-4dbe-a733-4c193013e84b\",\n    \"msgid\": null,\n    \"err\": null,\n    \"status\": \"successful\",\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"framework\": {\n      \"identifier\": \"dummy_framework\",\n      \"code\": \"Dumy framework updated\",\n      \"name\": \"Framework Name\",\n      \"description\": \"Dumy framework updated\",\n      \"categories\": [\n        {\n          \"identifier\": \"dummy_framework_subject\",\n          \"code\": \"subject\",\n          \"terms\": [\n            {\n              \"identifier\": \"dummy_framework_subject_english\",\n              \"code\": \"english\",\n              \"translations\": null,\n              \"name\": \"English\",\n              \"description\": \"English\",\n              \"index\": 1,\n              \"category\": \"subject\",\n              \"status\": \"Live\"\n            }\n          ],\n          \"translations\": null,\n          \"name\": \"Subject\",\n          \"description\": \"Updated description\",\n          \"index\": 1,\n          \"status\": \"Live\"\n        },\n        {\n          \"identifier\": \"dummy_framework_medium\",\n          \"code\": \"medium\",\n          \"translations\": null,\n          \"name\": \"Medium\",\n          \"description\": \"Medium\",\n          \"index\": 2,\n          \"status\": \"Live\"\n        }\n      ],\n      \"type\": \"K-12\",\n      \"objectType\": \"Framework\"\n    }\n  }\n}"
												},
												{
													"name": "BAD REQUEST. The \"read framework\" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/framework/v1/read/:ID",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"read",
																":ID"
															],
															"variable": [
																{
																	"key": "ID",
																	"value": "Ut enim offici",
																	"description": "(Required) The identifier of the framework to be fetched"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"ts\": 87966182,\n  \"id\": \"laboris q\",\n  \"params\": {\n    \"msgid\": \"do est non incididunt\",\n    \"resmsgid\": \"sint Excepteur sunt\",\n    \"status\": \"successful\",\n    \"err\": \"nisi magna eu\",\n    \"errmsg\": \"velit\"\n  },\n  \"ver\": \"cupidatat exercitation elit\",\n  \"responseCode\": \"do et cillum\",\n  \"result\": {}\n}"
												},
												{
													"name": "RESOURCE NOT FOUND. The \"read framework\" operation failed ! The possible reason for failure is that you may have passed invalid framework id.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/framework/v1/read/:ID",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"read",
																":ID"
															],
															"variable": [
																{
																	"key": "ID",
																	"value": "Ut enim offici",
																	"description": "(Required) The identifier of the framework to be fetched"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.framework.read\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T10:00:12.540Z\",\n  \"params\": {\n    \"resmsgid\": \"282e43c0-3df3-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"ERR_DATA_NOT_FOUND\",\n    \"errmsg\": \"Data not found with id : dummy_framework1\"\n  },\n  \"responseCode\": \"RESOURCE_NOT_FOUND\",\n  \"result\": {}\n}"
												},
												{
													"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/framework/v1/read/:ID",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"read",
																":ID"
															],
															"variable": [
																{
																	"key": "ID",
																	"value": "Ut enim offici",
																	"description": "(Required) The identifier of the framework to be fetched"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Read a retired framewrok",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"id has string - api.taxonomy.framework.read\", function () {\r",
															"    pm.expect(jsonResponse.id).to.be.equal(\"api.taxonomy.framework.read\");\r",
															"});\r",
															"pm.test(\"Version is 3.0 \", function () {\r",
															"    pm.expect(jsonResponse.ver).to.be.equal(\"3.0\");\r",
															"});\r",
															"// pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"//   pm.expect(jsonResponse.result.framework).to.have.all.keys('identifier','lastStatusChangedOn','code','channel','languageCode','type','createdOn','objectType','versionKey','systemDefault','name','lastUpdatedOn','status','description');\r",
															"//   pm.expect(jsonResponse.result.framework.identifier).to.be.a(\"String\");\r",
															"//   pm.expect(jsonResponse.result.framework.lastStatusChangedOn).to.be.a(\"String\");\r",
															"//   pm.expect(jsonResponse.result.framework.code).to.be.a(\"String\");\r",
															"//   //pm.expect(jsonResponse.result.framework.consumerId).to.be.a(\"String\");\r",
															"//   pm.expect(jsonResponse.result.framework.channel).to.be.a(\"String\");\r",
															"//   pm.expect(jsonResponse.result.framework.languageCode).to.be.a('array');\r",
															"//   pm.expect(jsonResponse.result.framework.type).to.be.a(\"String\");\r",
															"//   pm.expect(jsonResponse.result.framework.createdOn).to.be.a(\"String\");\r",
															"//   pm.expect(jsonResponse.result.framework.objectType).to.be.a(\"String\");\r",
															"//   pm.expect(jsonResponse.result.framework.versionKey).to.be.a(\"String\");\r",
															"//   pm.expect(jsonResponse.result.framework.systemDefault).to.be.a(\"String\");\r",
															"//   pm.expect(jsonResponse.result.framework.name).to.be.a(\"String\");\r",
															"//   pm.expect(jsonResponse.result.framework.lastUpdatedOn).to.be.a(\"String\");\r",
															"// pm.expect(jsonResponse.result.framework.status).to.be.a(\"String\");\r",
															"// });\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.result.framework).to.have.all.keys('identifier', 'lastStatusChangedOn', 'code','channel', 'type','languageCode','createdOn', 'objectType', 'versionKey', 'systemDefault', 'name', 'lastUpdatedOn', 'status');\r",
															"pm.expect(jsonResponse.result.framework.code).to.be.equal(pm.collectionVariables.get(\"fw4_code\"));\r",
															"});\r",
															"\r",
															"pm.test(\"Status has string Retired\", function () {\r",
															"    pm.expect(jsonResponse.result.framework.status).to.be.equal(\"Retired\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "X-Channel-Id",
														"value": "{{X-Channel-Id}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{host}}/framework/v3/read/{{fw4_code}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"read",
														"{{fw4_code}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Read an invalid framework",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','err','status','errmsg');\r",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.msgid).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"String\");\r",
															"  });\r",
															"\r",
															"pm.test(\"Err has string\", function () {\r",
															"    pm.expect(jsonResponse.params.err).to.be.equal(\"NOT_FOUND\");\r",
															"});\r",
															"pm.test(\"Status has string\", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"failed\");\r",
															"});\r",
															"pm.test(\"errmsg has string\", function () {\r",
															"    pm.expect(jsonResponse.params.errmsg).to.be.equal(\"Error! Node(s) doesn't Exists. | [Invalid Node Id.]: invalid_fw\");\r",
															"});\r",
															"pm.test(\"responseCode has string\", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"RESOURCE_NOT_FOUND\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{auth_token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "X-Channel-Id",
														"value": "{{X-Channel-Id}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{host}}/framework/v3/read/invalid_fw",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"read",
														"invalid_fw"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Delete data",
							"item": [
								{
									"name": "Delete framework",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json()\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"fw1_node\",jsonResponse.result.node_id);\r",
													"console.log(pm.collectionVariables.get(\"fw1_node\"));\r",
													"\r",
													"pm.test(`node id should be equal to ${pm.collectionVariables.get(\"fw1_node\")}`, () => {\r",
													"    pm.expect(jsonResponse.result.node_id).to.eql(pm.collectionVariables.get(\"fw1_code\"));\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "in",
													"value": "header",
													"type": "string"
												},
												{
													"key": "value",
													"value": "{{auth_token}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "X-Channel-Id",
												"value": "{{X-Channel-Id}}",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{host}}/framework/v3/retire/{{fw1_code}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"framework",
												"v3",
												"retire",
												"{{fw1_code}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete framework",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json()\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.collectionVariables.set(\"fw2_node\",jsonResponse.result.node_id);\r",
													"console.log(pm.collectionVariables.get(\"fw2_node\"));\r",
													"\r",
													"pm.test(`node id should be equal to ${pm.collectionVariables.get(\"fw2_node\")}`, () => {\r",
													"    pm.expect(jsonResponse.result.node_id).to.eql(pm.collectionVariables.get(\"fw2_code\"));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "in",
													"value": "header",
													"type": "string"
												},
												{
													"key": "value",
													"value": "{{auth_token}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "X-Channel-Id",
												"value": "{{X-Channel-Id}}",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{host}}/framework/v3/retire/{{fw2_code}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"framework",
												"v3",
												"retire",
												"{{fw2_code}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete framework",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json()\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.collectionVariables.set(\"fw3_node\",jsonResponse.result.node_id);\r",
													"console.log(pm.collectionVariables.get(\"fw3_node\"));\r",
													"\r",
													"pm.test(`node id should be equal to ${pm.collectionVariables.get(\"fw3_node\")}`, () => {\r",
													"    pm.expect(jsonResponse.result.node_id).to.eql(pm.collectionVariables.get(\"fw3_code\"));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "in",
													"value": "header",
													"type": "string"
												},
												{
													"key": "value",
													"value": "{{auth_token}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "X-Channel-Id",
												"value": "{{X-Channel-Id}}",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{host}}/framework/v3/retire/{{fw3_code}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"framework",
												"v3",
												"retire",
												"{{fw3_code}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete master category",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json()\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.collectionVariables.set(\"master6_node\",jsonResponse.result.node_id);\r",
													"console.log(pm.collectionVariables.get(\"master6_node\"));\r",
													"\r",
													"pm.collectionVariables.set(\"master6_id\",jsonResponse.result.node_id);\r",
													"console.log(pm.collectionVariables.get(\"master6_id\"));\r",
													"\r",
													"pm.test(`identifier should be equal to ${pm.collectionVariables.get(\"master6_id\")}`, () => {\r",
													"    pm.expect(jsonResponse.result.identifier).to.eql(`${pm.collectionVariables.get(\"master6_code\")}`);\r",
													"});\r",
													"\r",
													"pm.test(`node_id should be equal to ${pm.collectionVariables.get(\"master6_node\")}`, () => {\r",
													"    pm.expect(jsonResponse.result.node_id).to.eql(`${pm.collectionVariables.get(\"master6_code\")}`);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{auth_token}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Channel-Id",
												"value": "{{X-Channel-Id}}"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{host}}/framework/v3/category/master/retire/{{master6_code}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"framework",
												"v3",
												"category",
												"master",
												"retire",
												"{{master6_code}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete framework",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json()\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.collectionVariables.set(\"fw5_node\",jsonResponse.result.node_id);\r",
													"console.log(pm.collectionVariables.get(\"fw5_node\"));\r",
													"\r",
													"pm.test(`node id should be equal to ${pm.collectionVariables.get(\"fw5_node\")}`, () => {\r",
													"    pm.expect(jsonResponse.result.node_id).to.eql(pm.collectionVariables.get(\"fw5_code\"));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "in",
													"value": "header",
													"type": "string"
												},
												{
													"key": "value",
													"value": "{{auth_token}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "X-Channel-Id",
												"value": "{{X-Channel-Id}}",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{host}}/framework/v3/retire/{{fw5_code}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"framework",
												"v3",
												"retire",
												"{{fw5_code}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete framework category",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json()\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"fw_catgry\",jsonResponse.result.identifier);\r",
													"console.log(pm.collectionVariables.get(\"fw_catgry\"));\r",
													"\r",
													"pm.test(`identifier should be equal to ${pm.collectionVariables.get(\"fw_catgry\")}`, () => {\r",
													"    pm.expect(jsonResponse.result.identifier).to.eql(`${pm.collectionVariables.get(\"fw5_code\")}_${pm.collectionVariables.get(\"master6_code\")}`);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Channel-Id",
												"value": "sunbird"
											}
										],
										"url": {
											"raw": "{{host}}/framework/v3/category/retire/{{master6_code}}?framework={{fw5_code}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"framework",
												"v3",
												"category",
												"retire",
												"{{master6_code}}"
											],
											"query": [
												{
													"key": "framework",
													"value": "{{fw5_code}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete framework",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json()\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.collectionVariables.set(\"copy_node\",jsonResponse.result.node_id);\r",
													"console.log(pm.collectionVariables.get(\"copy_node\"));\r",
													"\r",
													"pm.test(`node id should be equal to ${pm.collectionVariables.get(\"copy_node\")}`, () => {\r",
													"    pm.expect(jsonResponse.result.node_id).to.eql(pm.collectionVariables.get(\"copy_fw\"));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "in",
													"value": "header",
													"type": "string"
												},
												{
													"key": "value",
													"value": "{{auth_token}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "X-Channel-Id",
												"value": "{{X-Channel-Id}}",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{host}}/framework/v3/retire/{{copy_fw}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"framework",
												"v3",
												"retire",
												"{{copy_fw}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete master category",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json()\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.collectionVariables.set(\"master7_node\",jsonResponse.result.node_id);\r",
													"console.log(pm.collectionVariables.get(\"master7_node\"));\r",
													"\r",
													"pm.collectionVariables.set(\"master7_id\",jsonResponse.result.node_id);\r",
													"console.log(pm.collectionVariables.get(\"master7_id\"));\r",
													"\r",
													"pm.test(`identifier should be equal to ${pm.collectionVariables.get(\"master7_id\")}`, () => {\r",
													"    pm.expect(jsonResponse.result.identifier).to.eql(`${pm.collectionVariables.get(\"master7_code\")}`);\r",
													"});\r",
													"\r",
													"pm.test(`node_id should be equal to ${pm.collectionVariables.get(\"master7_node\")}`, () => {\r",
													"    pm.expect(jsonResponse.result.node_id).to.eql(`${pm.collectionVariables.get(\"master7_code\")}`);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{auth_token}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Channel-Id",
												"value": "{{X-Channel-Id}}"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{host}}/framework/v3/category/master/retire/{{master7_code}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"framework",
												"v3",
												"category",
												"master",
												"retire",
												"{{master7_code}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete framework",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json()\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.collectionVariables.set(\"fw6_node\",jsonResponse.result.node_id);\r",
													"console.log(pm.collectionVariables.get(\"fw6_node\"));\r",
													"\r",
													"pm.test(`node id should be equal to ${pm.collectionVariables.get(\"fw6_node\")}`, () => {\r",
													"    pm.expect(jsonResponse.result.node_id).to.eql(pm.collectionVariables.get(\"fw6_code\"));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "in",
													"value": "header",
													"type": "string"
												},
												{
													"key": "value",
													"value": "{{auth_token}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "X-Channel-Id",
												"value": "{{X-Channel-Id}}",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{host}}/framework/v3/retire/{{fw6_code}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"framework",
												"v3",
												"retire",
												"{{fw6_code}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete framework category",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json()\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"fw_catgry\",jsonResponse.result.identifier);\r",
													"console.log(pm.collectionVariables.get(\"fw_catgry\"));\r",
													"\r",
													"pm.test(`identifier should be equal to ${pm.collectionVariables.get(\"fw_catgry\")}`, () => {\r",
													"    pm.expect(jsonResponse.result.identifier).to.eql(`${pm.collectionVariables.get(\"fw6_code\")}_${pm.collectionVariables.get(\"master7_code\")}`);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Channel-Id",
												"value": "sunbird"
											}
										],
										"url": {
											"raw": "{{host}}/framework/v3/category/retire/{{master7_code}}?framework={{fw6_code}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"framework",
												"v3",
												"category",
												"retire",
												"{{master7_code}}"
											],
											"query": [
												{
													"key": "framework",
													"value": "{{fw6_code}}"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"description": "1. Each time before running the folder, unique name should be given for the framework for create framework API (in the pre requisite folder as well)\n    \n2. Framework should be associated with a framework category before publishing the framework (which is dependent on master category)\n    \n3. In the pre requisite, maste caretgory and framework category should be updated before running the collection",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"//Scenario-1",
									"pm.collectionVariables.set(\"fw1_name\", \"fw1_name\");",
									"pm.collectionVariables.set(\"fw1_code\", \"fw1_code8\");",
									"//Scenario-1",
									"pm.collectionVariables.set(\"fw2_name\", \"fw2_name\");",
									"pm.collectionVariables.set(\"fw2_code\", \"fw2_code6\");",
									"//Scenario-2",
									"pm.collectionVariables.set(\"fw3_name\", \"fw3_name\");",
									"pm.collectionVariables.set(\"fw3_code\", \"fw3_code7\");",
									"//Scenario-3",
									"pm.collectionVariables.set(\"fw4_name\", \"fw4_name\");",
									"pm.collectionVariables.set(\"fw4_code\", \"fw4_code9\");",
									"//Scenarion-4",
									"pm.collectionVariables.set(\"master6_code\", \"master6_cat_7\");",
									"pm.collectionVariables.set(\"fw5_name\", \"fw5_name\");",
									"pm.collectionVariables.set(\"fw5_code\", \"fw5_code9\");",
									"//Scenario-4",
									"pm.collectionVariables.set(\"copy_fw\", \"copy_fw5\");",
									"//Scenario-6",
									"pm.collectionVariables.set(\"master7_code\", \"master7_cat_5\");",
									"pm.collectionVariables.set(\"fw6_name\", \"fw6_name\");",
									"pm.collectionVariables.set(\"fw6_code\", \"fw6_code6\");",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Framework Category",
					"item": [
						{
							"name": "Create framework category",
							"item": [
								{
									"name": "Pre requisite",
									"item": [
										{
											"name": "Create a master category",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.collectionVariables.set(\"master8_id\",jsonResponse.result.identifier);\r",
															"console.log(pm.collectionVariables.get(\"master8_id\"));\r",
															"pm.collectionVariables.set(\"master8_node\",jsonResponse.result.node_id);\r",
															"console.log(pm.collectionVariables.get(\"master8_node\"));\r",
															"\r",
															"pm.test(`identifier should be equal to ${pm.collectionVariables.get(\"master8_id\")}`, () => {\r",
															"    pm.expect(jsonResponse.result.identifier).to.eql(`${pm.collectionVariables.get(\"master8_code\")}`);\r",
															"});\r",
															"\r",
															"pm.test(`node_id should be equal to ${pm.collectionVariables.get(\"master8_node\")}`, () => {\r",
															"    pm.expect(jsonResponse.result.node_id).to.eql(`${pm.collectionVariables.get(\"master8_code\")}`);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-Channel-Id",
														"value": "sunbird"
													},
													{
														"key": "Authorization",
														"value": "{{auth_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"category\": {\n            \"name\": \"master\",\n            \"code\": \"{{master8_code}}\",\n            \"targetIdFieldName\": \"targetmasterIds\",\n            \"searchLabelFieldName\": \"se_master\",\n            \"searchIdFieldName\": \"se_master\",\n            \"orgIdFieldName\": \"masterIds\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/framework/v3/category/master/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"category",
														"master",
														"create"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create a framework",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','status', 'err','errmsg');\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"null\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status has string \", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"successful\");\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.result).to.have.all.keys('node_id', 'versionKey');\r",
															"  pm.expect(jsonResponse.result.node_id).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.result.versionKey).to.be.a(\"string\");\r",
															"});\r",
															"\r",
															"pm.collectionVariables.set(\"fw7_node\",jsonResponse.result.node_id);\r",
															"console.log(pm.collectionVariables.get(\"fw7_node\"));\r",
															"\r",
															"pm.test(`node id should be equal to ${pm.collectionVariables.get(\"fw7_node\")}`, () => {\r",
															"    pm.expect(jsonResponse.result.node_id).to.eql(pm.collectionVariables.get(\"fw7_code\"));\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {}
											},
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{auth_token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"description": "(Required) It is the Unique Id to identify the root organisation to which the user belongs",
														"key": "X-Channel-Id",
														"value": "{{X-Channel-Id}}"
													},
													{
														"key": "",
														"value": "",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"framework\": {\n            \"name\": \"{{fw7_name}}\",\n            \"code\": \"{{fw7_code}}\"\n            \n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/framework/v3/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"create"
													]
												},
												"description": "This API is associated with creating a new framework on the Sunbird Platform.\n   - The endpoint for **Create a Framework** is `/framework/v1/create`\n   - It points to knowledge-mw-service - `/v1/framework/create`\n   - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
											},
											"response": [
												{
													"name": "OK ! Successful operation.\"create framework\" operation was successfully executed.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) It is the Unique Id to identify the root organisation to which the user belongs",
																"key": "X-Channel-Id",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"framework\": {\n      \"name\": \"Framework Name\",\n      \"code\": \"dummy_framework\",\n      \"channels\": [\n        {\n          \"identifier\": \"in.ekstep\"\n        }\n      ]\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"create"
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.framework.create\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T09:49:06.794Z\",\n  \"params\": {\n    \"resmsgid\": \"9b5d7ca0-3df1-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": \"9b4a90e0-3df1-11eb-9ff3-67c41480f6aa\",\n    \"status\": \"successful\",\n    \"err\": null,\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"node_id\": \"dummy_framework\",\n    \"versionKey\": \"1607939346678\"\n  }\n}"
												},
												{
													"name": "BAD REQUEST. The \"create framework\" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) It is the Unique Id to identify the root organisation to which the user belongs",
																"key": "X-Channel-Id",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"framework\": {\n      \"name\": \"Framework Name\",\n      \"code\": \"dummy_framework\",\n      \"channels\": [\n        {\n          \"identifier\": \"in.ekstep\"\n        }\n      ]\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"create"
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.framework.create\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T09:50:45.249Z\",\n  \"params\": {\n    \"resmsgid\": \"d60c8710-3df1-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"CONSTRAINT_VALIDATION_FAILED\",\n    \"errmsg\": \"Object already exists with identifier: dummy_framework\"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {}\n}"
												},
												{
													"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) It is the Unique Id to identify the root organisation to which the user belongs",
																"key": "X-Channel-Id",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"framework\": {\n      \"name\": \"Framework Name\",\n      \"code\": \"dummy_framework\",\n      \"channels\": [\n        {\n          \"identifier\": \"in.ekstep\"\n        }\n      ]\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"create"
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Create a master category  for neg test case",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.collectionVariables.set(\"master9_id\",jsonResponse.result.identifier);\r",
															"console.log(pm.collectionVariables.get(\"master9_id\"));\r",
															"pm.collectionVariables.set(\"master9_node\",jsonResponse.result.node_id);\r",
															"console.log(pm.collectionVariables.get(\"master9_node\"));\r",
															"\r",
															"pm.test(`identifier should be equal to ${pm.collectionVariables.get(\"master9_id\")}`, () => {\r",
															"    pm.expect(jsonResponse.result.identifier).to.eql(`${pm.collectionVariables.get(\"master9_code\")}`);\r",
															"});\r",
															"\r",
															"pm.test(`node_id should be equal to ${pm.collectionVariables.get(\"master9_node\")}`, () => {\r",
															"    pm.expect(jsonResponse.result.node_id).to.eql(`${pm.collectionVariables.get(\"master9_code\")}`);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-Channel-Id",
														"value": "sunbird"
													},
													{
														"key": "Authorization",
														"value": "{{auth_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"category\": {\n            \"name\": \"master\",\n            \"code\": \"{{master9_code}}\",\n            \"targetIdFieldName\": \"targetmasterIds\",\n            \"searchLabelFieldName\": \"se_master\",\n            \"searchIdFieldName\": \"se_master\",\n            \"orgIdFieldName\": \"masterIds\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/framework/v3/category/master/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"category",
														"master",
														"create"
													]
												}
											},
											"response": []
										}
									],
									"description": "1. Framework name and code should be updated before each run\n2. Framework categroy should be a subset of master category, i.e., framework category can be created only when it is available in master category\n    \n3. Create a master category with same indentifier before creating the framework category"
								},
								{
									"name": "Positive",
									"item": [
										{
											"name": "Create Category with valid fields",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"id has string - api.taxonomy.category.instance.create \", function () {\r",
															"    pm.expect(jsonResponse.id).to.be.equal(\"api.taxonomy.category.instance.create\");\r",
															"});\r",
															"pm.test(\"Version is 3.0 \", function () {\r",
															"    pm.expect(jsonResponse.ver).to.be.equal(\"3.0\");\r",
															"});\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','status', 'err','errmsg');\r",
															"pm.expect(jsonResponse.params.resmsgid).to.be.a(\"String\");\r",
															"pm.expect(jsonResponse.params.msgid).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"null\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status has string \", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"successful\");\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.result).to.have.all.keys('identifier', 'versionKey');\r",
															"  pm.expect(jsonResponse.result.identifier).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.result.versionKey).to.be.a(\"string\");\r",
															"});\r",
															"\r",
															"pm.collectionVariables.set(\"fwcat_cat2\",jsonResponse.result.identifier);\r",
															"console.log(pm.collectionVariables.get(\"fwcat_cat2\"));\r",
															"\r",
															"pm.test(`identifier should be equal to ${pm.collectionVariables.get(\"fwcat_cat2\")}`, () => {\r",
															"    pm.expect(jsonResponse.result.identifier).to.eql(`${pm.collectionVariables.get(\"fw7_code\")}_${pm.collectionVariables.get(\"master8_code\")}`);\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "X-Channel-Id",
														"value": "{{X-Channel-Id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"request\": {\n    \"category\": {\n      \"name\": \"Board\",\n      \"code\": \"{{master8_code}}\",\n      \"description\":\"Board category\"\n    }\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/framework/v3/category/create?framework={{fw7_node}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"category",
														"create"
													],
													"query": [
														{
															"key": "framework",
															"value": "{{fw7_node}}",
															"description": "(Required) The code of the framework under which category has to be created"
														}
													]
												},
												"description": "This API is associated with creating a category under a framework\n   - The endpoint for **Create Category** is `/framework/v1/category/create`\n   - It points to knowledge-mw-service - `/v1/framework/category/create`\n   - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
											},
											"response": [
												{
													"name": "OK ! Successful operation.\"create category\" operation was successfully executed.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"category\": {\n      \"name\": \"Subject\",\n      \"code\": \"subject\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/category/create?framework=Ut enim offici",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"category",
																"create"
															],
															"query": [
																{
																	"key": "framework",
																	"value": "Ut enim offici"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.category.create\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T19:32:01.754Z\",\n  \"params\": {\n    \"resmsgid\": \"0a10dba0-3e43-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": \"0a05df20-3e43-11eb-9ff3-67c41480f6aa\",\n    \"status\": \"successful\",\n    \"err\": null,\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"node_id\": \"dummy_framework_medium\",\n    \"versionKey\": \"1607974321700\"\n  }\n}"
												},
												{
													"name": "BAD REQUEST. The \"create category\" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"category\": {\n      \"name\": \"Subject\",\n      \"code\": \"subject\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/category/create?framework=Ut enim offici",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"category",
																"create"
															],
															"query": [
																{
																	"key": "framework",
																	"value": "Ut enim offici"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.category.create\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T19:30:50.114Z\",\n  \"params\": {\n    \"resmsgid\": \"df5d7620-3e42-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"CONSTRAINT_VALIDATION_FAILED\",\n    \"errmsg\": \"Object already exists with identifier: dummy_framework_subject\"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {}\n}"
												},
												{
													"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"category\": {\n      \"name\": \"Subject\",\n      \"code\": \"subject\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/category/create?framework=Ut enim offici",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"category",
																"create"
															],
															"query": [
																{
																	"key": "framework",
																	"value": "Ut enim offici"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Create a duplicate framework category",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"pm.test(\"id has string - api.taxonomy.category.instance.create \", function () {\r",
															"    pm.expect(jsonResponse.id).to.be.equal(\"api.taxonomy.category.instance.create\");\r",
															"});\r",
															"pm.test(\"Version is 3.0 \", function () {\r",
															"    pm.expect(jsonResponse.ver).to.be.equal(\"3.0\");\r",
															"});\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','status', 'err','errmsg');\r",
															"pm.expect(jsonResponse.params.resmsgid).to.be.a(\"String\");\r",
															"pm.expect(jsonResponse.params.msgid).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"String\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status has string \", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"failed\");\r",
															"});\r",
															"\r",
															"pm.test(\"err has string \", function () {\r",
															"    pm.expect(jsonResponse.params.err).to.be.equal(\"CONSTRAINT_VALIDATION_FAILED\");\r",
															"});\r",
															"\r",
															"pm.test(\"errmsg has string \", function () {\r",
															"    pm.expect(jsonResponse.params.errmsg).to.be.include(`Object already exists with identifier: ${pm.collectionVariables.get(\"fw7_code\")}_${pm.collectionVariables.get(\"master7_code\")}`);\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(function(){}, 3000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "X-Channel-Id",
														"value": "{{X-Channel-Id}}"
													},
													{
														"key": "Authorization",
														"value": ""
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"request\": {\n    \"category\": {\n      \"name\": \"Board\",\n      \"code\": \"{{master8_code}}\",\n      \"description\":\"Board category\"\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{host}}/framework/v3/category/create?framework={{fw7_node}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"category",
														"create"
													],
													"query": [
														{
															"key": "framework",
															"value": "{{fw7_node}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Create valid framework category to invalid framework",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"pm.test(\"id has string - api.taxonomy.category.instance.create \", function () {\r",
															"    pm.expect(jsonResponse.id).to.be.equal(\"api.taxonomy.category.instance.create\");\r",
															"});\r",
															"pm.test(\"Version is 3.0 \", function () {\r",
															"    pm.expect(jsonResponse.ver).to.be.equal(\"3.0\");\r",
															"});\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','status', 'err','errmsg');\r",
															"pm.expect(jsonResponse.params.resmsgid).to.be.a(\"String\");\r",
															"pm.expect(jsonResponse.params.msgid).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"String\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status has string \", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"failed\");\r",
															"});\r",
															"\r",
															"pm.test(\"err has string \", function () {\r",
															"    pm.expect(jsonResponse.params.err).to.be.equal(\"NOT_FOUND\");\r",
															"});\r",
															"\r",
															"pm.test(\"errmsg has string \", function () {\r",
															"    pm.expect(jsonResponse.params.errmsg).to.be.include(\"Error! Node(s) doesn't Exists. | [Invalid Node Id.]: dummy\");\r",
															"});\r",
															"\r",
															"pm.test(\"responseCode has string \", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.include(\"RESOURCE_NOT_FOUND\");\r",
															"});\r",
															"// pm.globals.set(\"identifier\",jsonResponse.result.node_id);\r",
															"// console.log(pm.globals.get(\"identifier\"));\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "X-Channel-Id",
														"value": "sunbird"
													},
													{
														"key": "Authorization",
														"value": ""
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"request\": {\n    \"category\": {\n      \"name\": \"Board\",\n      \"code\": \"{{master8_code}}\",\n      \"description\":\"Board category\"\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{host}}/framework/v3/category/create?framework=dummy",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"category",
														"create"
													],
													"query": [
														{
															"key": "framework",
															"value": "dummy"
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Update Framework category",
							"item": [
								{
									"name": "Pre requisite",
									"item": [
										{
											"name": "Create a master category",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.collectionVariables.set(\"master10_id\",jsonResponse.result.identifier);\r",
															"console.log(pm.collectionVariables.get(\"master10_id\"));\r",
															"pm.collectionVariables.set(\"master10_node\",jsonResponse.result.node_id);\r",
															"console.log(pm.collectionVariables.get(\"master10_node\"));\r",
															"\r",
															"pm.test(`identifier should be equal to ${pm.collectionVariables.get(\"master10_id\")}`, () => {\r",
															"    pm.expect(jsonResponse.result.identifier).to.eql(`${pm.collectionVariables.get(\"master10_code\")}`);\r",
															"});\r",
															"\r",
															"pm.test(`node_id should be equal to ${pm.collectionVariables.get(\"master10_node\")}`, () => {\r",
															"    pm.expect(jsonResponse.result.node_id).to.eql(`${pm.collectionVariables.get(\"master10_code\")}`);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-Channel-Id",
														"value": "sunbird"
													},
													{
														"key": "Authorization",
														"value": "{{auth_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"category\": {\n            \"name\": \"master\",\n            \"code\": \"{{master10_code}}\",\n            \"targetIdFieldName\": \"targetmasterIds\",\n            \"searchLabelFieldName\": \"se_master\",\n            \"searchIdFieldName\": \"se_master\",\n            \"orgIdFieldName\": \"masterIds\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/framework/v3/category/master/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"category",
														"master",
														"create"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create a framework",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','status', 'err','errmsg');\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"null\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status has string \", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"successful\");\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.result).to.have.all.keys('node_id', 'versionKey');\r",
															"  pm.expect(jsonResponse.result.node_id).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.result.versionKey).to.be.a(\"string\");\r",
															"});\r",
															"\r",
															"pm.collectionVariables.set(\"fw8_node\",jsonResponse.result.node_id);\r",
															"console.log(pm.collectionVariables.get(\"fw8_node\"));\r",
															"\r",
															"pm.test(`node id should be equal to ${pm.collectionVariables.get(\"fw8_node\")}`, () => {\r",
															"    pm.expect(jsonResponse.result.node_id).to.eql(pm.collectionVariables.get(\"fw8_code\"));\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {}
											},
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{auth_token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"description": "(Required) It is the Unique Id to identify the root organisation to which the user belongs",
														"key": "X-Channel-Id",
														"value": "{{X-Channel-Id}}"
													},
													{
														"key": "",
														"value": "",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"framework\": {\n            \"name\": \"{{fw8_name}}\",\n            \"code\": \"{{fw8_code}}\"\n            \n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/framework/v3/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"create"
													]
												},
												"description": "This API is associated with creating a new framework on the Sunbird Platform.\n   - The endpoint for **Create a Framework** is `/framework/v1/create`\n   - It points to knowledge-mw-service - `/v1/framework/create`\n   - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
											},
											"response": [
												{
													"name": "OK ! Successful operation.\"create framework\" operation was successfully executed.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) It is the Unique Id to identify the root organisation to which the user belongs",
																"key": "X-Channel-Id",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"framework\": {\n      \"name\": \"Framework Name\",\n      \"code\": \"dummy_framework\",\n      \"channels\": [\n        {\n          \"identifier\": \"in.ekstep\"\n        }\n      ]\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"create"
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.framework.create\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T09:49:06.794Z\",\n  \"params\": {\n    \"resmsgid\": \"9b5d7ca0-3df1-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": \"9b4a90e0-3df1-11eb-9ff3-67c41480f6aa\",\n    \"status\": \"successful\",\n    \"err\": null,\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"node_id\": \"dummy_framework\",\n    \"versionKey\": \"1607939346678\"\n  }\n}"
												},
												{
													"name": "BAD REQUEST. The \"create framework\" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) It is the Unique Id to identify the root organisation to which the user belongs",
																"key": "X-Channel-Id",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"framework\": {\n      \"name\": \"Framework Name\",\n      \"code\": \"dummy_framework\",\n      \"channels\": [\n        {\n          \"identifier\": \"in.ekstep\"\n        }\n      ]\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"create"
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.framework.create\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T09:50:45.249Z\",\n  \"params\": {\n    \"resmsgid\": \"d60c8710-3df1-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"CONSTRAINT_VALIDATION_FAILED\",\n    \"errmsg\": \"Object already exists with identifier: dummy_framework\"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {}\n}"
												},
												{
													"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) It is the Unique Id to identify the root organisation to which the user belongs",
																"key": "X-Channel-Id",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"framework\": {\n      \"name\": \"Framework Name\",\n      \"code\": \"dummy_framework\",\n      \"channels\": [\n        {\n          \"identifier\": \"in.ekstep\"\n        }\n      ]\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"create"
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Create Framewok Category",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"id has string - api.taxonomy.category.instance.create \", function () {\r",
															"    pm.expect(jsonResponse.id).to.be.equal(\"api.taxonomy.category.instance.create\");\r",
															"});\r",
															"pm.test(\"Version is 3.0 \", function () {\r",
															"    pm.expect(jsonResponse.ver).to.be.equal(\"3.0\");\r",
															"});\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','status', 'err','errmsg');\r",
															"pm.expect(jsonResponse.params.resmsgid).to.be.a(\"String\");\r",
															"pm.expect(jsonResponse.params.msgid).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"null\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status has string \", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"successful\");\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.result).to.have.all.keys('identifier', 'versionKey');\r",
															"  pm.expect(jsonResponse.result.identifier).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.result.versionKey).to.be.a(\"string\");\r",
															"});\r",
															"\r",
															"pm.collectionVariables.set(\"fwcat_cat3\",jsonResponse.result.identifier);\r",
															"console.log(pm.collectionVariables.get(\"fwcat_cat3\"));\r",
															"\r",
															"pm.test(`identifier should be equal to ${pm.collectionVariables.get(\"fwcat_cat3\")}`, () => {\r",
															"    pm.expect(jsonResponse.result.identifier).to.eql(`${pm.collectionVariables.get(\"fw8_code\")}_${pm.collectionVariables.get(\"master10_code\")}`);\r",
															"});\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "X-Channel-Id",
														"value": "{{X-Channel-Id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"request\": {\n    \"category\": {\n      \"name\": \"Board\",\n      \"code\": \"{{master10_code}}\",\n      \"description\":\"Board category\"\n    }\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/framework/v3/category/create?framework={{fw8_node}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"category",
														"create"
													],
													"query": [
														{
															"key": "framework",
															"value": "{{fw8_node}}",
															"description": "(Required) The code of the framework under which category has to be created"
														}
													]
												},
												"description": "This API is associated with creating a category under a framework\n   - The endpoint for **Create Category** is `/framework/v1/category/create`\n   - It points to knowledge-mw-service - `/v1/framework/category/create`\n   - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
											},
											"response": [
												{
													"name": "OK ! Successful operation.\"create category\" operation was successfully executed.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"category\": {\n      \"name\": \"Subject\",\n      \"code\": \"subject\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/category/create?framework=Ut enim offici",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"category",
																"create"
															],
															"query": [
																{
																	"key": "framework",
																	"value": "Ut enim offici"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.category.create\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T19:32:01.754Z\",\n  \"params\": {\n    \"resmsgid\": \"0a10dba0-3e43-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": \"0a05df20-3e43-11eb-9ff3-67c41480f6aa\",\n    \"status\": \"successful\",\n    \"err\": null,\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"node_id\": \"dummy_framework_medium\",\n    \"versionKey\": \"1607974321700\"\n  }\n}"
												},
												{
													"name": "BAD REQUEST. The \"create category\" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"category\": {\n      \"name\": \"Subject\",\n      \"code\": \"subject\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/category/create?framework=Ut enim offici",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"category",
																"create"
															],
															"query": [
																{
																	"key": "framework",
																	"value": "Ut enim offici"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.category.create\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T19:30:50.114Z\",\n  \"params\": {\n    \"resmsgid\": \"df5d7620-3e42-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"CONSTRAINT_VALIDATION_FAILED\",\n    \"errmsg\": \"Object already exists with identifier: dummy_framework_subject\"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {}\n}"
												},
												{
													"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"category\": {\n      \"name\": \"Subject\",\n      \"code\": \"subject\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/category/create?framework=Ut enim offici",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"category",
																"create"
															],
															"query": [
																{
																	"key": "framework",
																	"value": "Ut enim offici"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									],
									"description": "1. Framework name and code should be updated before each run\n2. Framework categroy should be a subset of master category, i.e., framework category can be created only when it is available in master category\n    \n3. Create a master category with same indentifier before creating the framework category"
								},
								{
									"name": "Positive",
									"item": [
										{
											"name": "Update a valid framework category for a valid framework",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"id has string - api.taxonomy.category.instance.update \", function () {\r",
															"    pm.expect(jsonResponse.id).to.be.equal(\"api.taxonomy.category.instance.update\");\r",
															"});\r",
															"pm.test(\"Version is 3.0 \", function () {\r",
															"    pm.expect(jsonResponse.ver).to.be.equal(\"3.0\");\r",
															"});\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','status', 'err','errmsg');\r",
															"pm.expect(jsonResponse.params.resmsgid).to.be.a(\"String\");\r",
															"pm.expect(jsonResponse.params.msgid).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"null\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status has string \", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"successful\");\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.result).to.have.all.keys('identifier', 'versionKey');\r",
															"  pm.expect(jsonResponse.result.identifier).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.result.versionKey).to.be.a(\"string\");\r",
															"});\r",
															"\r",
															"pm.collectionVariables.set(\"fwcat_cat3\",jsonResponse.result.identifier);\r",
															"console.log(pm.collectionVariables.get(\"fwcat_cat3\"));\r",
															"\r",
															"pm.test(`identifier should be equal to ${pm.collectionVariables.get(\"fwcat_cat3\")}`, () => {\r",
															"    pm.expect(jsonResponse.result.identifier).to.eql(`${pm.collectionVariables.get(\"fw8_code\")}_${pm.collectionVariables.get(\"master10_code\")}`);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "value",
															"value": "{{apiKey}}",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"request\": {\n    \"category\": {\n      \"description\": \"Updated description\"\n    }\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/framework/v3/category/update/:{{master10_code}}?framework={{fw8_code}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"category",
														"update",
														":{{master10_code}}"
													],
													"query": [
														{
															"key": "framework",
															"value": "{{fw8_code}}",
															"description": "(Required) Represents the framework to which the category belongs"
														}
													],
													"variable": [
														{
															"key": "{{master10_code}}",
															"value": ""
														}
													]
												},
												"description": "This API is associated with updating a category in an  existing framework\n   - The endpoint for **Update Category** is `/framework/v1/category/update/{code}`\n   - It points to knowledge-mw-service - `/v1/framework/category/update/{code}`\n   - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
											},
											"response": [
												{
													"name": "OK ! Successful operation.\"update category\" operation was successfully executed.",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"category\": {\n      \"description\": \"Updated description\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/category/update/:code?framework=Ut enim offici",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"category",
																"update",
																":code"
															],
															"query": [
																{
																	"key": "framework",
																	"value": "Ut enim offici"
																}
															],
															"variable": [
																{
																	"key": "code",
																	"value": "Ut enim offici",
																	"description": "(Required) The name/code of the category to be updated"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.category.update\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T19:37:49.082Z\",\n  \"params\": {\n    \"resmsgid\": \"d916e7a0-3e43-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": \"d90f4680-3e43-11eb-9ff3-67c41480f6aa\",\n    \"status\": \"successful\",\n    \"err\": null,\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"node_id\": \"dummy_framework_subject\",\n    \"versionKey\": \"1607974669043\"\n  }\n}"
												},
												{
													"name": "BAD REQUEST. The \"update category\" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"category\": {\n      \"description\": \"Updated description\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/category/update/:code?framework=Ut enim offici",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"category",
																"update",
																":code"
															],
															"query": [
																{
																	"key": "framework",
																	"value": "Ut enim offici"
																}
															],
															"variable": [
																{
																	"key": "code",
																	"value": "Ut enim offici",
																	"description": "(Required) The name/code of the category to be updated"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.category.update\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T19:38:29.662Z\",\n  \"params\": {\n    \"resmsgid\": \"f146ebe0-3e43-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"ERR_INVALID_FRAMEWORK_ID\",\n    \"errmsg\": \"Invalid FrameworkId: dummy_framework1 for Categoryinstance \"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {}\n}"
												},
												{
													"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"category\": {\n      \"description\": \"Updated description\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/category/update/:code?framework=Ut enim offici",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"category",
																"update",
																":code"
															],
															"query": [
																{
																	"key": "framework",
																	"value": "Ut enim offici"
																}
															],
															"variable": [
																{
																	"key": "code",
																	"value": "Ut enim offici",
																	"description": "(Required) The name/code of the category to be updated"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Update an invalid framework to a valid framework",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});\r",
															"pm.test(\"id has string - api.taxonomy.category.instance.update \", function () {\r",
															"    pm.expect(jsonResponse.id).to.be.equal(\"api.taxonomy.category.instance.update\");\r",
															"});\r",
															"pm.test(\"Version is 3.0 \", function () {\r",
															"    pm.expect(jsonResponse.ver).to.be.equal(\"3.0\");\r",
															"});\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','err','status','errmsg');\r",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.msgid).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"String\");\r",
															"  });\r",
															"\r",
															"pm.test(\"Err has string\", function () {\r",
															"    pm.expect(jsonResponse.params.err).to.be.equal(\"NOT_FOUND\");\r",
															"});\r",
															"pm.test(\"Status has string\", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"failed\");\r",
															"});\r",
															"pm.test(`errmsg has string: Error! Node(s) doesn't Exists. | [Invalid Node Id.]: ${pm.globals.get(\"node_id\")}_abc` , function () {\r",
															"    pm.expect(jsonResponse.params.errmsg).to.be.include(`Error! Node(s) doesn't Exists. | [Invalid Node Id.]: ${pm.globals.get(\"node_id\")}_abc`);\r",
															"});\r",
															"pm.test(\"responseCode has string\", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"RESOURCE_NOT_FOUND\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "{{apiKey}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"request\": {\n    \"category\": {\n      \"description\": \"Updated description\"\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{host}}/framework/v3/category/update/:abc?framework={{node_id}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"category",
														"update",
														":abc"
													],
													"query": [
														{
															"key": "framework",
															"value": "{{node_id}}"
														}
													],
													"variable": [
														{
															"key": "abc",
															"value": ""
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Update a valid framework to an invalid framework",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});\r",
															"pm.test(\"id has string - api.taxonomy.category.instance.update \", function () {\r",
															"    pm.expect(jsonResponse.id).to.be.equal(\"api.taxonomy.category.instance.update\");\r",
															"});\r",
															"pm.test(\"Version is 3.0 \", function () {\r",
															"    pm.expect(jsonResponse.ver).to.be.equal(\"3.0\");\r",
															"});\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','err','status','errmsg');\r",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.msgid).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"String\");\r",
															"  });\r",
															"\r",
															"pm.test(\"Err has string\", function () {\r",
															"    pm.expect(jsonResponse.params.err).to.be.equal(\"NOT_FOUND\");\r",
															"});\r",
															"pm.test(\"Status has string\", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"failed\");\r",
															"});\r",
															"pm.test(`errmsg has string: Error! Node(s) doesn't Exists. | [Invalid Node Id.]: dummy_${pm.globals.get(\"category\")}`, function () {\r",
															"    pm.expect(jsonResponse.params.errmsg).to.be.include(`Error! Node(s) doesn't Exists. | [Invalid Node Id.]: dummy_${pm.globals.get(\"category\")}`);\r",
															"});\r",
															"pm.test(\"responseCode has string\", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"RESOURCE_NOT_FOUND\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "{{apiKey}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"request\": {\n    \"category\": {\n      \"description\": \"Updated description\"\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{host}}/framework/v3/category/update/:{{category}}?framework=dummy",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"category",
														"update",
														":{{category}}"
													],
													"query": [
														{
															"key": "framework",
															"value": "dummy"
														}
													],
													"variable": [
														{
															"key": "{{category}}",
															"value": ""
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Update a invalid framework to an invalid framework",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});\r",
															"pm.test(\"id has string - api.taxonomy.category.instance.update \", function () {\r",
															"    pm.expect(jsonResponse.id).to.be.equal(\"api.taxonomy.category.instance.update\");\r",
															"});\r",
															"pm.test(\"Version is 3.0 \", function () {\r",
															"    pm.expect(jsonResponse.ver).to.be.equal(\"3.0\");\r",
															"});\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','err','status','errmsg');\r",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.msgid).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"String\");\r",
															"  });\r",
															"\r",
															"pm.test(\"Err has string\", function () {\r",
															"    pm.expect(jsonResponse.params.err).to.be.equal(\"NOT_FOUND\");\r",
															"});\r",
															"pm.test(\"Status has string\", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"failed\");\r",
															"});\r",
															"pm.test(`errmsg has string: Error! Node(s) doesn't Exists. | [Invalid Node Id.]: dummy_abc`, function () {\r",
															"    pm.expect(jsonResponse.params.errmsg).to.be.include(`Error! Node(s) doesn't Exists. | [Invalid Node Id.]: dummy_abc`);\r",
															"});\r",
															"pm.test(\"responseCode has string\", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"RESOURCE_NOT_FOUND\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "{{apiKey}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"request\": {\n    \"category\": {\n      \"description\": \"Updated description\"\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{host}}/framework/v3/category/update/:abc?framework=dummy",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"category",
														"update",
														":abc"
													],
													"query": [
														{
															"key": "framework",
															"value": "dummy"
														}
													],
													"variable": [
														{
															"key": "abc",
															"value": ""
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Delete Framework Category",
							"item": [
								{
									"name": "Pre requisite",
									"item": [
										{
											"name": "Create a master category",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.collectionVariables.set(\"master11_id\",jsonResponse.result.identifier);\r",
															"console.log(pm.collectionVariables.get(\"master11_id\"));\r",
															"pm.collectionVariables.set(\"master11_node\",jsonResponse.result.node_id);\r",
															"console.log(pm.collectionVariables.get(\"master11_node\"));\r",
															"\r",
															"pm.test(`identifier should be equal to ${pm.collectionVariables.get(\"master11_id\")}`, () => {\r",
															"    pm.expect(jsonResponse.result.identifier).to.eql(`${pm.collectionVariables.get(\"master11_code\")}`);\r",
															"});\r",
															"\r",
															"pm.test(`node_id should be equal to ${pm.collectionVariables.get(\"master11_node\")}`, () => {\r",
															"    pm.expect(jsonResponse.result.node_id).to.eql(`${pm.collectionVariables.get(\"master11_code\")}`);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-Channel-Id",
														"value": "sunbird"
													},
													{
														"key": "Authorization",
														"value": "{{auth_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"category\": {\n            \"name\": \"master\",\n            \"code\": \"{{master11_code}}\",\n            \"targetIdFieldName\": \"targetmasterIds\",\n            \"searchLabelFieldName\": \"se_master\",\n            \"searchIdFieldName\": \"se_master\",\n            \"orgIdFieldName\": \"masterIds\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/framework/v3/category/master/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"category",
														"master",
														"create"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create a framework",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','status', 'err','errmsg');\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"null\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status has string \", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"successful\");\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.result).to.have.all.keys('node_id', 'versionKey');\r",
															"  pm.expect(jsonResponse.result.node_id).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.result.versionKey).to.be.a(\"string\");\r",
															"});\r",
															"\r",
															"pm.collectionVariables.set(\"fw9_node\",jsonResponse.result.node_id);\r",
															"console.log(pm.collectionVariables.get(\"fw9_node\"));\r",
															"\r",
															"pm.test(`node id should be equal to ${pm.collectionVariables.get(\"fw9_node\")}`, () => {\r",
															"    pm.expect(jsonResponse.result.node_id).to.eql(pm.collectionVariables.get(\"fw9_code\"));\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {}
											},
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{auth_token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"description": "(Required) It is the Unique Id to identify the root organisation to which the user belongs",
														"key": "X-Channel-Id",
														"value": "{{X-Channel-Id}}"
													},
													{
														"key": "",
														"value": "",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"framework\": {\n            \"name\": \"{{fw9_name}}\",\n            \"code\": \"{{fw9_code}}\"\n            \n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/framework/v3/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"create"
													]
												},
												"description": "This API is associated with creating a new framework on the Sunbird Platform.\n   - The endpoint for **Create a Framework** is `/framework/v1/create`\n   - It points to knowledge-mw-service - `/v1/framework/create`\n   - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
											},
											"response": [
												{
													"name": "OK ! Successful operation.\"create framework\" operation was successfully executed.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) It is the Unique Id to identify the root organisation to which the user belongs",
																"key": "X-Channel-Id",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"framework\": {\n      \"name\": \"Framework Name\",\n      \"code\": \"dummy_framework\",\n      \"channels\": [\n        {\n          \"identifier\": \"in.ekstep\"\n        }\n      ]\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"create"
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.framework.create\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T09:49:06.794Z\",\n  \"params\": {\n    \"resmsgid\": \"9b5d7ca0-3df1-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": \"9b4a90e0-3df1-11eb-9ff3-67c41480f6aa\",\n    \"status\": \"successful\",\n    \"err\": null,\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"node_id\": \"dummy_framework\",\n    \"versionKey\": \"1607939346678\"\n  }\n}"
												},
												{
													"name": "BAD REQUEST. The \"create framework\" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) It is the Unique Id to identify the root organisation to which the user belongs",
																"key": "X-Channel-Id",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"framework\": {\n      \"name\": \"Framework Name\",\n      \"code\": \"dummy_framework\",\n      \"channels\": [\n        {\n          \"identifier\": \"in.ekstep\"\n        }\n      ]\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"create"
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.framework.create\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T09:50:45.249Z\",\n  \"params\": {\n    \"resmsgid\": \"d60c8710-3df1-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"CONSTRAINT_VALIDATION_FAILED\",\n    \"errmsg\": \"Object already exists with identifier: dummy_framework\"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {}\n}"
												},
												{
													"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) It is the Unique Id to identify the root organisation to which the user belongs",
																"key": "X-Channel-Id",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"framework\": {\n      \"name\": \"Framework Name\",\n      \"code\": \"dummy_framework\",\n      \"channels\": [\n        {\n          \"identifier\": \"in.ekstep\"\n        }\n      ]\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"create"
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Create Framework Category",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"id has string - api.taxonomy.category.instance.create \", function () {\r",
															"    pm.expect(jsonResponse.id).to.be.equal(\"api.taxonomy.category.instance.create\");\r",
															"});\r",
															"pm.test(\"Version is 3.0 \", function () {\r",
															"    pm.expect(jsonResponse.ver).to.be.equal(\"3.0\");\r",
															"});\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','status', 'err','errmsg');\r",
															"pm.expect(jsonResponse.params.resmsgid).to.be.a(\"String\");\r",
															"pm.expect(jsonResponse.params.msgid).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"null\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status has string \", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"successful\");\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.result).to.have.all.keys('identifier', 'versionKey');\r",
															"  pm.expect(jsonResponse.result.identifier).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.result.versionKey).to.be.a(\"string\");\r",
															"});\r",
															"\r",
															"pm.collectionVariables.set(\"fwcat_cat4\",jsonResponse.result.identifier);\r",
															"console.log(pm.collectionVariables.get(\"fwcat_cat4\"));\r",
															"\r",
															"pm.test(`identifier should be equal to ${pm.collectionVariables.get(\"fwcat_cat4\")}`, () => {\r",
															"    pm.expect(jsonResponse.result.identifier).to.eql(`${pm.collectionVariables.get(\"fw9_code\")}_${pm.collectionVariables.get(\"master11_code\")}`);\r",
															"\r",
															"});\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "X-Channel-Id",
														"value": "{{X-Channel-Id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"request\": {\n    \"category\": {\n      \"name\": \"Board\",\n      \"code\": \"{{master11_code}}\",\n      \"description\":\"Board category\"\n    }\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/framework/v3/category/create?framework={{fw9_node}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"category",
														"create"
													],
													"query": [
														{
															"key": "framework",
															"value": "{{fw9_node}}",
															"description": "(Required) The code of the framework under which category has to be created"
														}
													]
												},
												"description": "This API is associated with creating a category under a framework\n   - The endpoint for **Create Category** is `/framework/v1/category/create`\n   - It points to knowledge-mw-service - `/v1/framework/category/create`\n   - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
											},
											"response": [
												{
													"name": "OK ! Successful operation.\"create category\" operation was successfully executed.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"category\": {\n      \"name\": \"Subject\",\n      \"code\": \"subject\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/category/create?framework=Ut enim offici",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"category",
																"create"
															],
															"query": [
																{
																	"key": "framework",
																	"value": "Ut enim offici"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.category.create\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T19:32:01.754Z\",\n  \"params\": {\n    \"resmsgid\": \"0a10dba0-3e43-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": \"0a05df20-3e43-11eb-9ff3-67c41480f6aa\",\n    \"status\": \"successful\",\n    \"err\": null,\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"node_id\": \"dummy_framework_medium\",\n    \"versionKey\": \"1607974321700\"\n  }\n}"
												},
												{
													"name": "BAD REQUEST. The \"create category\" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"category\": {\n      \"name\": \"Subject\",\n      \"code\": \"subject\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/category/create?framework=Ut enim offici",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"category",
																"create"
															],
															"query": [
																{
																	"key": "framework",
																	"value": "Ut enim offici"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.category.create\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T19:30:50.114Z\",\n  \"params\": {\n    \"resmsgid\": \"df5d7620-3e42-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"CONSTRAINT_VALIDATION_FAILED\",\n    \"errmsg\": \"Object already exists with identifier: dummy_framework_subject\"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {}\n}"
												},
												{
													"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"category\": {\n      \"name\": \"Subject\",\n      \"code\": \"subject\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/category/create?framework=Ut enim offici",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"category",
																"create"
															],
															"query": [
																{
																	"key": "framework",
																	"value": "Ut enim offici"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									],
									"description": "1. Framework name and code should be updated before each run\n2. Framework categroy should be a subset of master category, i.e., framework category can be created only when it is available in master category\n    \n3. Create a master category with same indentifier before creating the framework category"
								},
								{
									"name": "Positive",
									"item": [
										{
											"name": "Delete a valid framework category",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"id has string - api.taxonomy.category.instance.retire \", function () {\r",
															"    pm.expect(jsonResponse.id).to.be.equal(\"api.taxonomy.category.instance.retire\");\r",
															"});\r",
															"pm.test(\"Version is 3.0 \", function () {\r",
															"    pm.expect(jsonResponse.ver).to.be.equal(\"3.0\");\r",
															"});\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','status', 'err','errmsg');\r",
															"pm.expect(jsonResponse.params.resmsgid).to.be.a(\"String\");\r",
															"pm.expect(jsonResponse.params.msgid).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"null\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status has string \", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"successful\");\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.result).to.have.all.keys('identifier', 'versionKey');\r",
															"  pm.expect(jsonResponse.result.identifier).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.result.versionKey).to.be.a(\"string\");\r",
															"});\r",
															"\r",
															"pm.collectionVariables.set(\"identifier\",jsonResponse.result.identifier);\r",
															"console.log(pm.collectionVariables.get(\"identifier\"));\r",
															"\r",
															"pm.test(`identifier should be equal to ${pm.collectionVariables.get(\"identifier\")}`, () => {\r",
															"    pm.expect(jsonResponse.result.identifier).to.eql(`${pm.collectionVariables.get(\"fw9_code\")}_${pm.collectionVariables.get(\"master11_code\")}`);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-Channel-Id",
														"value": "sunbird"
													}
												],
												"url": {
													"raw": "{{host}}/framework/v3/category/retire/{{master11_code}}?framework={{fw9_code}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"category",
														"retire",
														"{{master11_code}}"
													],
													"query": [
														{
															"key": "framework",
															"value": "{{fw9_code}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Delete an invalid framework category to a valid framework",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});\r",
															"pm.test(\"id has string - api.taxonomy.category.instance.retire \", function () {\r",
															"    pm.expect(jsonResponse.id).to.be.equal(\"api.taxonomy.category.instance.retire\");\r",
															"});\r",
															"pm.test(\"Version is 3.0 \", function () {\r",
															"    pm.expect(jsonResponse.ver).to.be.equal(\"3.0\");\r",
															"});\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','err','status','errmsg');\r",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.msgid).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"String\");\r",
															"  });\r",
															"\r",
															"pm.test(\"Err has string\", function () {\r",
															"    pm.expect(jsonResponse.params.err).to.be.equal(\"NOT_FOUND\");\r",
															"});\r",
															"pm.test(\"Status has string\", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"failed\");\r",
															"});\r",
															"\r",
															"pm.test(`errmsg has string: Error! Node(s) doesn't Exists. | [Invalid Node Id.]: ${pm.globals.get(\"node_id\")}_abc` , function () {\r",
															"    pm.expect(jsonResponse.params.errmsg).to.be.include(`Error! Node(s) doesn't Exists. | [Invalid Node Id.]: ${pm.globals.get(\"node_id\")}_abc`);\r",
															"});\r",
															"\r",
															"pm.test(\"responseCode has string\", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"RESOURCE_NOT_FOUND\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-Channel-Id",
														"value": "sunbird"
													}
												],
												"url": {
													"raw": "{{host}}/framework/v3/category/retire/abc?framework={{node_id}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"category",
														"retire",
														"abc"
													],
													"query": [
														{
															"key": "framework",
															"value": "{{node_id}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete a valid framework category from invalid framework",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});\r",
															"pm.test(\"id has string - api.taxonomy.category.instance.retire \", function () {\r",
															"    pm.expect(jsonResponse.id).to.be.equal(\"api.taxonomy.category.instance.retire\");\r",
															"});\r",
															"pm.test(\"Version is 3.0 \", function () {\r",
															"    pm.expect(jsonResponse.ver).to.be.equal(\"3.0\");\r",
															"});\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','err','status','errmsg');\r",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.msgid).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"String\");\r",
															"  });\r",
															"\r",
															"pm.test(\"Err has string\", function () {\r",
															"    pm.expect(jsonResponse.params.err).to.be.equal(\"NOT_FOUND\");\r",
															"});\r",
															"pm.test(\"Status has string\", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"failed\");\r",
															"});\r",
															"\r",
															"pm.test(`errmsg has string: Error! Node(s) doesn't Exists. | [Invalid Node Id.]: dummy_${pm.globals.get(\"category\")}`, function () {\r",
															"    pm.expect(jsonResponse.params.errmsg).to.be.include(`Error! Node(s) doesn't Exists. | [Invalid Node Id.]: dummy_${pm.globals.get(\"category\")}`);\r",
															"});\r",
															"\r",
															"pm.test(\"responseCode has string\", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"RESOURCE_NOT_FOUND\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-Channel-Id",
														"value": "sunbird"
													}
												],
												"url": {
													"raw": "{{host}}/framework/v3/category/retire/{{category}}?framework=dummy",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"category",
														"retire",
														"{{category}}"
													],
													"query": [
														{
															"key": "framework",
															"value": "dummy"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete an invalid framework category from invalid framework",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});\r",
															"pm.test(\"id has string - api.taxonomy.category.instance.retire \", function () {\r",
															"    pm.expect(jsonResponse.id).to.be.equal(\"api.taxonomy.category.instance.retire\");\r",
															"});\r",
															"pm.test(\"Version is 3.0 \", function () {\r",
															"    pm.expect(jsonResponse.ver).to.be.equal(\"3.0\");\r",
															"});\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','err','status','errmsg');\r",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.msgid).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"String\");\r",
															"  });\r",
															"\r",
															"pm.test(\"Err has string\", function () {\r",
															"    pm.expect(jsonResponse.params.err).to.be.equal(\"NOT_FOUND\");\r",
															"});\r",
															"pm.test(\"Status has string\", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"failed\");\r",
															"});\r",
															"pm.test(`errmsg has string: Error! Node(s) doesn't Exists. | [Invalid Node Id.]: dummy_abc`, function () {\r",
															"    pm.expect(jsonResponse.params.errmsg).to.be.include(`Error! Node(s) doesn't Exists. | [Invalid Node Id.]: dummy_abc`);\r",
															"});\r",
															"pm.test(\"responseCode has string\", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"RESOURCE_NOT_FOUND\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-Channel-Id",
														"value": "sunbird"
													}
												],
												"url": {
													"raw": "{{host}}/framework/v3/category/retire/abc?framework=dummy",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"category",
														"retire",
														"abc"
													],
													"query": [
														{
															"key": "framework",
															"value": "dummy"
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Get a Framework Category",
							"item": [
								{
									"name": "Pre requisite",
									"item": [
										{
											"name": "Create a master category",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.collectionVariables.set(\"master12_id\",jsonResponse.result.identifier);\r",
															"console.log(pm.collectionVariables.get(\"master12_id\"));\r",
															"pm.collectionVariables.set(\"master12_node\",jsonResponse.result.node_id);\r",
															"console.log(pm.collectionVariables.get(\"master12_node\"));\r",
															"\r",
															"pm.test(`identifier should be equal to ${pm.collectionVariables.get(\"master12_id\")}`, () => {\r",
															"    pm.expect(jsonResponse.result.identifier).to.eql(`${pm.collectionVariables.get(\"master12_code\")}`);\r",
															"});\r",
															"\r",
															"pm.test(`node_id should be equal to ${pm.collectionVariables.get(\"master12_node\")}`, () => {\r",
															"    pm.expect(jsonResponse.result.node_id).to.eql(`${pm.collectionVariables.get(\"master12_code\")}`);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-Channel-Id",
														"value": "sunbird"
													},
													{
														"key": "Authorization",
														"value": "{{auth_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"category\": {\n            \"name\": \"master\",\n            \"code\": \"{{master12_code}}\",\n            \"targetIdFieldName\": \"targetmasterIds\",\n            \"searchLabelFieldName\": \"se_master\",\n            \"searchIdFieldName\": \"se_master\",\n            \"orgIdFieldName\": \"masterIds\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/framework/v3/category/master/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"category",
														"master",
														"create"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create a framework",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','status', 'err','errmsg');\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"null\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status has string \", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"successful\");\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.result).to.have.all.keys('node_id', 'versionKey');\r",
															"  pm.expect(jsonResponse.result.node_id).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.result.versionKey).to.be.a(\"string\");\r",
															"});\r",
															"\r",
															"pm.collectionVariables.set(\"fw10_node\",jsonResponse.result.node_id);\r",
															"console.log(pm.collectionVariables.get(\"fw10_node\"));\r",
															"\r",
															"pm.test(`node id should be equal to ${pm.collectionVariables.get(\"fw10_node\")}`, () => {\r",
															"    pm.expect(jsonResponse.result.node_id).to.eql(pm.collectionVariables.get(\"fw10_code\"));\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Channel-Id",
														"value": "sunbird"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "{{auth_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"framework\": {\n            \"name\": \"{{fw10_name}}\",\n            \"code\": \"{{fw10_code}}\"\n            \n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/framework/v3/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"create"
													]
												},
												"description": "This API is associated with creating a new framework on the Sunbird Platform.\n   - The endpoint for **Create a Framework** is `/framework/v1/create`\n   - It points to knowledge-mw-service - `/v1/framework/create`\n   - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
											},
											"response": [
												{
													"name": "OK ! Successful operation.\"create framework\" operation was successfully executed.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) It is the Unique Id to identify the root organisation to which the user belongs",
																"key": "X-Channel-Id",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"framework\": {\n      \"name\": \"Framework Name\",\n      \"code\": \"dummy_framework\",\n      \"channels\": [\n        {\n          \"identifier\": \"in.ekstep\"\n        }\n      ]\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"create"
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.framework.create\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T09:49:06.794Z\",\n  \"params\": {\n    \"resmsgid\": \"9b5d7ca0-3df1-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": \"9b4a90e0-3df1-11eb-9ff3-67c41480f6aa\",\n    \"status\": \"successful\",\n    \"err\": null,\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"node_id\": \"dummy_framework\",\n    \"versionKey\": \"1607939346678\"\n  }\n}"
												},
												{
													"name": "BAD REQUEST. The \"create framework\" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) It is the Unique Id to identify the root organisation to which the user belongs",
																"key": "X-Channel-Id",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"framework\": {\n      \"name\": \"Framework Name\",\n      \"code\": \"dummy_framework\",\n      \"channels\": [\n        {\n          \"identifier\": \"in.ekstep\"\n        }\n      ]\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"create"
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.framework.create\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T09:50:45.249Z\",\n  \"params\": {\n    \"resmsgid\": \"d60c8710-3df1-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"CONSTRAINT_VALIDATION_FAILED\",\n    \"errmsg\": \"Object already exists with identifier: dummy_framework\"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {}\n}"
												},
												{
													"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) It is the Unique Id to identify the root organisation to which the user belongs",
																"key": "X-Channel-Id",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"framework\": {\n      \"name\": \"Framework Name\",\n      \"code\": \"dummy_framework\",\n      \"channels\": [\n        {\n          \"identifier\": \"in.ekstep\"\n        }\n      ]\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"create"
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Create framework Category",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Removed duplicate declaration of jsonResponse\r",
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"id has string - api.taxonomy.category.instance.create \", function () {\r",
															"    pm.expect(jsonResponse.id).to.be.equal(\"api.taxonomy.category.instance.create\");\r",
															"});\r",
															"pm.test(\"Version is 3.0 \", function () {\r",
															"    pm.expect(jsonResponse.ver).to.be.equal(\"3.0\");\r",
															"});\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','status', 'err','errmsg');\r",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.msgid).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"null\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status has string \", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"successful\");\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.result).to.have.all.keys('identifier', 'versionKey');\r",
															"  pm.expect(jsonResponse.result.identifier).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.result.versionKey).to.be.a(\"string\");\r",
															"});\r",
															"\r",
															"pm.collectionVariables.set(\"fwcat_cat5\",jsonResponse.result.identifier);\r",
															"console.log(pm.collectionVariables.get(\"fwcat_cat5\"));\r",
															"\r",
															"pm.test(`identifier should be equal to ${pm.collectionVariables.get(\"fwcat_cat5\")}`, () => {\r",
															"    pm.expect(jsonResponse.result.identifier).to.eql(`${pm.collectionVariables.get(\"fw10_code\")}_${pm.collectionVariables.get(\"master12_code\")}`);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "X-Channel-Id",
														"value": "sunbird"
													},
													{
														"key": "Authorization",
														"value": ""
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"request\": {\n    \"category\": {\n      \"name\": \"Board\",\n      \"code\": \"{{master12_code}}\",\n      \"description\":\"Board category\"\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{host}}/framework/v3/category/create?framework={{fw10_code}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"category",
														"create"
													],
													"query": [
														{
															"key": "framework",
															"value": "{{fw10_code}}",
															"description": "(Required) The code of the framework under which category has to be created"
														}
													]
												},
												"description": "This API is associated with creating a category under a framework\n   - The endpoint for **Create Category** is `/framework/v1/category/create`\n   - It points to knowledge-mw-service - `/v1/framework/category/create`\n   - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
											},
											"response": [
												{
													"name": "OK ! Successful operation.\"create category\" operation was successfully executed.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"category\": {\n      \"name\": \"Subject\",\n      \"code\": \"subject\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/category/create?framework=Ut enim offici",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"category",
																"create"
															],
															"query": [
																{
																	"key": "framework",
																	"value": "Ut enim offici"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.category.create\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T19:32:01.754Z\",\n  \"params\": {\n    \"resmsgid\": \"0a10dba0-3e43-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": \"0a05df20-3e43-11eb-9ff3-67c41480f6aa\",\n    \"status\": \"successful\",\n    \"err\": null,\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"node_id\": \"dummy_framework_medium\",\n    \"versionKey\": \"1607974321700\"\n  }\n}"
												},
												{
													"name": "BAD REQUEST. The \"create category\" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"category\": {\n      \"name\": \"Subject\",\n      \"code\": \"subject\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/category/create?framework=Ut enim offici",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"category",
																"create"
															],
															"query": [
																{
																	"key": "framework",
																	"value": "Ut enim offici"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.category.create\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T19:30:50.114Z\",\n  \"params\": {\n    \"resmsgid\": \"df5d7620-3e42-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"CONSTRAINT_VALIDATION_FAILED\",\n    \"errmsg\": \"Object already exists with identifier: dummy_framework_subject\"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {}\n}"
												},
												{
													"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"category\": {\n      \"name\": \"Subject\",\n      \"code\": \"subject\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/category/create?framework=Ut enim offici",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"category",
																"create"
															],
															"query": [
																{
																	"key": "framework",
																	"value": "Ut enim offici"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "Positive",
									"item": [
										{
											"name": "Read framework category for a valid framework",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"id has string - api.taxonomy.category.instance.read \", function () {\r",
															"    pm.expect(jsonResponse.id).to.be.equal(\"api.taxonomy.category.instance.read\");\r",
															"});\r",
															"pm.test(\"Version is 3.0 \", function () {\r",
															"    pm.expect(jsonResponse.ver).to.be.equal(\"3.0\");\r",
															"});\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','status', 'err','errmsg');\r",
															"pm.expect(jsonResponse.params.resmsgid).to.be.a(\"String\");\r",
															"pm.expect(jsonResponse.params.msgid).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"null\");\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.result.categoryInstance).to.have.all.keys('identifier','lastStatusChangedOn','code','frameworks','channel','languageCode','createdOn','objectType','versionKey','framework','name','lastUpdatedOn','status','description');\r",
															"});\r",
															"\r",
															"pm.test(\"Status has string: successful \", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"successful\");\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "value",
															"value": "{{apiKey}}",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "X-Channel-Id",
														"value": "{{X-Channel-Id}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{host}}/framework/v3/category/read/:{{master12_code}}?framework={{fw10_code}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"category",
														"read",
														":{{master12_code}}"
													],
													"query": [
														{
															"key": "framework",
															"value": "{{fw10_code}}",
															"description": "(Required) Name of the framework under which category exists. Its an abstract data structure which serves as a template for categories and terms"
														}
													],
													"variable": [
														{
															"key": "{{master12_code}}",
															"value": ""
														}
													]
												},
												"description": "This API is associated with fetching a category on Sunbird Platform\n   - The endpoint for **Fetch Category** is `/framework/v1/category/read/{code}`\n   - It points to knowledge-mw-service - `/v1/framework/category/read/{code}`\n   - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
											},
											"response": [
												{
													"name": "OK ! Successful operation.\"fetch category\" operation was successfully executed.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/framework/v1/category/read/:code?framework=Ut enim offici",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"category",
																"read",
																":code"
															],
															"query": [
																{
																	"key": "framework",
																	"value": "Ut enim offici"
																}
															],
															"variable": [
																{
																	"key": "code",
																	"value": "Ut enim offici",
																	"description": "(Required) The name/code of the category to be fetched"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.category.read\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T19:34:41.261Z\",\n  \"params\": {\n    \"resmsgid\": \"6923b1d0-3e43-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": \"691e3390-3e43-11eb-9ff3-67c41480f6aa\",\n    \"status\": \"successful\",\n    \"err\": null,\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"category\": {\n      \"identifier\": \"dummy_framework_subject\",\n      \"lastStatusChangedOn\": \"2020-12-14T19:30:32.392+0000\",\n      \"code\": \"subject\",\n      \"frameworks\": [\n        {\n          \"identifier\": \"dummy_framework\",\n          \"name\": \"Framework Name\",\n          \"objectType\": \"Framework\",\n          \"relation\": \"hasSequenceMember\",\n          \"description\": \"Dumy framework updated\",\n          \"status\": \"Live\"\n        }\n      ],\n      \"consumerId\": \"7411b6bd-89f3-40ec-98d1-229dc64ce77d\",\n      \"channel\": \"in.ekstep\",\n      \"description\": \"Subject\",\n      \"domains\": [],\n      \"createdOn\": \"2020-12-14T19:30:32.392+0000\",\n      \"versionKey\": \"1607974232392\",\n      \"terms\": [],\n      \"appId\": \"@ignore@\",\n      \"name\": \"Subject\",\n      \"lastUpdatedOn\": \"2020-12-14T19:30:32.392+0000\",\n      \"status\": \"Live\"\n    }\n  }\n}"
												},
												{
													"name": "BAD REQUEST. The \"fetch category\" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/framework/v1/category/read/:code?framework=Ut enim offici",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"category",
																"read",
																":code"
															],
															"query": [
																{
																	"key": "framework",
																	"value": "Ut enim offici"
																}
															],
															"variable": [
																{
																	"key": "code",
																	"value": "Ut enim offici",
																	"description": "(Required) The name/code of the category to be fetched"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.category.read\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T19:35:21.540Z\",\n  \"params\": {\n    \"resmsgid\": \"8125c840-3e43-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"ERR_INVALID_FRAMEWORK_ID\",\n    \"errmsg\": \"Invalid FrameworkId: dummy_framework1 for Categoryinstance \"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {}\n}"
												},
												{
													"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/framework/v1/category/read/:code?framework=Ut enim offici",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"category",
																"read",
																":code"
															],
															"query": [
																{
																	"key": "framework",
																	"value": "Ut enim offici"
																}
															],
															"variable": [
																{
																	"key": "code",
																	"value": "Ut enim offici",
																	"description": "(Required) The name/code of the category to be fetched"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Read framework category for a valid framework",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "X-Channel-Id",
																"value": "{{X-Channel-Id}}",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{host}}/framework/v3/category/read/:{{master12_code}}?framework={{fw10_code}}",
															"host": [
																"{{host}}"
															],
															"path": [
																"framework",
																"v3",
																"category",
																"read",
																":{{master12_code}}"
															],
															"query": [
																{
																	"key": "framework",
																	"value": "{{fw10_code}}",
																	"description": "(Required) Name of the framework under which category exists. Its an abstract data structure which serves as a template for categories and terms"
																}
															],
															"variable": [
																{
																	"key": "{{master12_code}}",
																	"value": ""
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Server",
															"value": "openresty/1.21.4.3"
														},
														{
															"key": "Date",
															"value": "Tue, 02 Jan 2024 08:48:11 GMT"
														},
														{
															"key": "Content-Type",
															"value": "application/json"
														},
														{
															"key": "Content-Length",
															"value": "819"
														},
														{
															"key": "Request-Time",
															"value": "7"
														},
														{
															"key": "X-Cache",
															"value": "MISS from tg413d37"
														},
														{
															"key": "X-Cache-Lookup",
															"value": "MISS from tg413d37:3120"
														},
														{
															"key": "Via",
															"value": "1.1 tg413d37 (squid/5.7)"
														},
														{
															"key": "Connection",
															"value": "keep-alive"
														}
													],
													"cookie": [],
													"body": "{\n    \"id\": \"api.taxonomy.category.instance.read\",\n    \"ver\": \"3.0\",\n    \"ts\": \"2024-01-02T08:48:11ZZ\",\n    \"params\": {\n        \"resmsgid\": \"ec5281f5-354b-4478-ab6d-9173933c5dcc\",\n        \"msgid\": null,\n        \"err\": null,\n        \"status\": \"successful\",\n        \"errmsg\": null\n    },\n    \"responseCode\": \"OK\",\n    \"result\": {\n        \"categoryInstance\": {\n            \"identifier\": \"fw10_code2_master12_cat_2\",\n            \"lastStatusChangedOn\": \"2024-01-02T08:28:08.608+0000\",\n            \"code\": \"master12_cat_2\",\n            \"frameworks\": [\n                {\n                    \"name\": \"fw10_name\",\n                    \"relation\": \"hasSequenceMember\",\n                    \"identifier\": \"fw10_code2\",\n                    \"description\": null,\n                    \"objectType\": \"Framework\",\n                    \"status\": \"Live\",\n                    \"type\": \"K-12\"\n                }\n            ],\n            \"channel\": \"sunbird\",\n            \"description\": \"Board category\",\n            \"languageCode\": [],\n            \"createdOn\": \"2024-01-02T08:28:08.608+0000\",\n            \"objectType\": \"CategoryInstance\",\n            \"versionKey\": \"1704184088608\",\n            \"framework\": \"fw10_code2\",\n            \"name\": \"Board\",\n            \"lastUpdatedOn\": \"2024-01-02T08:28:08.608+0000\",\n            \"status\": \"Live\"\n        }\n    }\n}"
												}
											]
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Read valid framework category for an invalid framework",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});\r",
															"pm.test(\"id has string - api.taxonomy.category.instance.read \", function () {\r",
															"    pm.expect(jsonResponse.id).to.be.equal(\"api.taxonomy.category.instance.read\");\r",
															"});\r",
															"pm.test(\"Version is 3.0 \", function () {\r",
															"    pm.expect(jsonResponse.ver).to.be.equal(\"3.0\");\r",
															"});\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','err','status','errmsg');\r",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.msgid).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"String\");\r",
															"  });\r",
															"\r",
															"pm.test(\"Err has string\", function () {\r",
															"    pm.expect(jsonResponse.params.err).to.be.equal(\"NOT_FOUND\");\r",
															"});\r",
															"pm.test(\"Status has string\", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"failed\");\r",
															"});\r",
															"pm.test(`errmsg has string: Error! Node(s) doesn't Exists. | [Invalid Node Id.]: dummy_${pm.globals.get(\"category\")}`, function () {\r",
															"    pm.expect(jsonResponse.params.errmsg).to.be.include(`Error! Node(s) doesn't Exists. | [Invalid Node Id.]: dummy_${pm.collectionVariables.get(\"master12_code\")}`);\r",
															"});\r",
															"pm.test(\"responseCode has string\", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"RESOURCE_NOT_FOUND\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "X-Channel-Id",
														"value": "{{X-Channel-Id}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "{{apiKey}}"
													}
												],
												"url": {
													"raw": "{{host}}/framework/v3/category/read/:{{master12_code}}?framework=dummy",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"category",
														"read",
														":{{master12_code}}"
													],
													"query": [
														{
															"key": "framework",
															"value": "dummy"
														}
													],
													"variable": [
														{
															"key": "{{master12_code}}",
															"value": ""
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Read invalid framework category for valid framework",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});\r",
															"pm.test(\"id has string - api.taxonomy.category.instance.read \", function () {\r",
															"    pm.expect(jsonResponse.id).to.be.equal(\"api.taxonomy.category.instance.read\");\r",
															"});\r",
															"pm.test(\"Version is 3.0 \", function () {\r",
															"    pm.expect(jsonResponse.ver).to.be.equal(\"3.0\");\r",
															"});\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','err','status','errmsg');\r",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.msgid).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"String\");\r",
															"  });\r",
															"\r",
															"pm.test(\"Err has string\", function () {\r",
															"    pm.expect(jsonResponse.params.err).to.be.equal(\"NOT_FOUND\");\r",
															"});\r",
															"pm.test(\"Status has string\", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"failed\");\r",
															"});\r",
															"pm.test(`errmsg has string: Error! Node(s) doesn't Exists. | [Invalid Node Id.]: ${pm.globals.get(\"node_id\")}_abc` , function () {\r",
															"    pm.expect(jsonResponse.params.errmsg).to.be.include(`Error! Node(s) doesn't Exists. | [Invalid Node Id.]: ${pm.collectionVariables.get(\"master12_code\")}_abc`);\r",
															"});\r",
															"pm.test(\"responseCode has string\", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"RESOURCE_NOT_FOUND\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "X-Channel-Id",
														"value": "sunbird"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "{{apiKey}}"
													}
												],
												"url": {
													"raw": "{{host}}/framework/v3/category/read/:abc?framework={{master12_code}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"category",
														"read",
														":abc"
													],
													"query": [
														{
															"key": "framework",
															"value": "{{master12_code}}"
														}
													],
													"variable": [
														{
															"key": "abc",
															"value": ""
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Read invalid framework category for an invalid framework",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});\r",
															"pm.test(\"id has string - api.taxonomy.category.instance.read \", function () {\r",
															"    pm.expect(jsonResponse.id).to.be.equal(\"api.taxonomy.category.instance.read\");\r",
															"});\r",
															"pm.test(\"Version is 3.0 \", function () {\r",
															"    pm.expect(jsonResponse.ver).to.be.equal(\"3.0\");\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','err','status','errmsg');\r",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.msgid).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"String\");\r",
															"  });\r",
															"\r",
															"pm.test(\"Err has string\", function () {\r",
															"    pm.expect(jsonResponse.params.err).to.be.equal(\"NOT_FOUND\");\r",
															"});\r",
															"pm.test(\"Status has string\", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"failed\");\r",
															"});\r",
															"pm.test(`errmsg has string: Error! Node(s) doesn't Exists. | [Invalid Node Id.]: dummy_abc`, function () {\r",
															"    pm.expect(jsonResponse.params.errmsg).to.be.include(`Error! Node(s) doesn't Exists. | [Invalid Node Id.]: dummy_abc`);\r",
															"});\r",
															"pm.test(\"responseCode has string\", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"RESOURCE_NOT_FOUND\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "X-Channel-Id",
														"value": "sunbird"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "{{apiKey}}"
													}
												],
												"url": {
													"raw": "{{host}}/framework/v3/category/read/:abc?framework=dummy",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"category",
														"read",
														":abc"
													],
													"query": [
														{
															"key": "framework",
															"value": "dummy"
														}
													],
													"variable": [
														{
															"key": "abc",
															"value": ""
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Delete data",
							"item": [
								{
									"name": "Delete master category",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json()\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.collectionVariables.set(\"master8_node\",jsonResponse.result.node_id);\r",
													"console.log(pm.collectionVariables.get(\"master8_node\"));\r",
													"\r",
													"pm.collectionVariables.set(\"master8_id\",jsonResponse.result.node_id);\r",
													"console.log(pm.collectionVariables.get(\"master8_id\"));\r",
													"\r",
													"pm.test(`identifier should be equal to ${pm.collectionVariables.get(\"master8_id\")}`, () => {\r",
													"    pm.expect(jsonResponse.result.identifier).to.eql(`${pm.collectionVariables.get(\"master8_code\")}`);\r",
													"});\r",
													"\r",
													"pm.test(`node_id should be equal to ${pm.collectionVariables.get(\"master8_node\")}`, () => {\r",
													"    pm.expect(jsonResponse.result.node_id).to.eql(`${pm.collectionVariables.get(\"master8_code\")}`);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{auth_token}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Channel-Id",
												"value": "{{X-Channel-Id}}"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{host}}/framework/v3/category/master/retire/{{master8_code}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"framework",
												"v3",
												"category",
												"master",
												"retire",
												"{{master8_code}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete framework",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json()\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"fw7_node\",jsonResponse.result.node_id);\r",
													"console.log(pm.collectionVariables.get(\"fw7_node\"));\r",
													"\r",
													"pm.test(`node id should be equal to ${pm.collectionVariables.get(\"fw7_node\")}`, () => {\r",
													"    pm.expect(jsonResponse.result.node_id).to.eql(pm.collectionVariables.get(\"fw7_code\"));\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "in",
													"value": "header",
													"type": "string"
												},
												{
													"key": "value",
													"value": "{{auth_token}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "X-Channel-Id",
												"value": "{{X-Channel-Id}}",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{host}}/framework/v3/retire/{{fw7_code}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"framework",
												"v3",
												"retire",
												"{{fw7_code}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete master category",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json()\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.collectionVariables.set(\"master9_node\",jsonResponse.result.node_id);\r",
													"console.log(pm.collectionVariables.get(\"master9_node\"));\r",
													"\r",
													"pm.collectionVariables.set(\"master9_id\",jsonResponse.result.node_id);\r",
													"console.log(pm.collectionVariables.get(\"master9_id\"));\r",
													"\r",
													"pm.test(`identifier should be equal to ${pm.collectionVariables.get(\"master9_id\")}`, () => {\r",
													"    pm.expect(jsonResponse.result.identifier).to.eql(`${pm.collectionVariables.get(\"master9_code\")}`);\r",
													"});\r",
													"\r",
													"pm.test(`node_id should be equal to ${pm.collectionVariables.get(\"master9_node\")}`, () => {\r",
													"    pm.expect(jsonResponse.result.node_id).to.eql(`${pm.collectionVariables.get(\"master9_code\")}`);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{auth_token}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Channel-Id",
												"value": "{{X-Channel-Id}}"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{host}}/framework/v3/category/master/retire/{{master9_code}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"framework",
												"v3",
												"category",
												"master",
												"retire",
												"{{master9_code}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete framework category",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json()\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(`identifier should be equal to ${pm.collectionVariables.get(\"fwcat_cat2\")}`, () => {\r",
													"    pm.expect(jsonResponse.result.identifier).to.eql(`${pm.collectionVariables.get(\"fw7_code\")}_${pm.collectionVariables.get(\"master8_code\")}`);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Channel-Id",
												"value": "sunbird"
											}
										],
										"url": {
											"raw": "{{host}}/framework/v3/category/retire/{{master8_code}}?framework={{fw7_code}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"framework",
												"v3",
												"category",
												"retire",
												"{{master8_code}}"
											],
											"query": [
												{
													"key": "framework",
													"value": "{{fw7_code}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete master category Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json()\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.collectionVariables.set(\"master10_node\",jsonResponse.result.node_id);\r",
													"console.log(pm.collectionVariables.get(\"master10_node\"));\r",
													"\r",
													"pm.collectionVariables.set(\"master10_id\",jsonResponse.result.node_id);\r",
													"console.log(pm.collectionVariables.get(\"master10_id\"));\r",
													"\r",
													"pm.test(`identifier should be equal to ${pm.collectionVariables.get(\"master10_id\")}`, () => {\r",
													"    pm.expect(jsonResponse.result.identifier).to.eql(`${pm.collectionVariables.get(\"master10_code\")}`);\r",
													"});\r",
													"\r",
													"pm.test(`node_id should be equal to ${pm.collectionVariables.get(\"master10_node\")}`, () => {\r",
													"    pm.expect(jsonResponse.result.node_id).to.eql(`${pm.collectionVariables.get(\"master10_code\")}`);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{auth_token}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Channel-Id",
												"value": "{{X-Channel-Id}}"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{host}}/framework/v3/category/master/retire/{{master10_code}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"framework",
												"v3",
												"category",
												"master",
												"retire",
												"{{master10_code}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete framework",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json()\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"fw8_node\",jsonResponse.result.node_id);\r",
													"console.log(pm.collectionVariables.get(\"fw8_node\"));\r",
													"\r",
													"pm.test(`node id should be equal to ${pm.collectionVariables.get(\"fw8_node\")}`, () => {\r",
													"    pm.expect(jsonResponse.result.node_id).to.eql(pm.collectionVariables.get(\"fw8_code\"));\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "in",
													"value": "header",
													"type": "string"
												},
												{
													"key": "value",
													"value": "{{auth_token}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "X-Channel-Id",
												"value": "{{X-Channel-Id}}",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{host}}/framework/v3/retire/{{fw8_code}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"framework",
												"v3",
												"retire",
												"{{fw8_code}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete framework category",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json()\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"fwcat_cat3\",jsonResponse.result.identifier);\r",
													"console.log(pm.collectionVariables.get(\"fwcat_cat3\"));\r",
													"\r",
													"pm.test(`identifier should be equal to ${pm.collectionVariables.get(\"fwcat_cat3\")}`, () => {\r",
													"    pm.expect(jsonResponse.result.identifier).to.eql(`${pm.collectionVariables.get(\"fw8_code\")}_${pm.collectionVariables.get(\"master10_code\")}`);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Channel-Id",
												"value": "sunbird"
											}
										],
										"url": {
											"raw": "{{host}}/framework/v3/category/retire/{{master10_code}}?framework={{fw8_code}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"framework",
												"v3",
												"category",
												"retire",
												"{{master10_code}}"
											],
											"query": [
												{
													"key": "framework",
													"value": "{{fw8_code}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete master category",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json()\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.collectionVariables.set(\"master11_node\",jsonResponse.result.node_id);\r",
													"console.log(pm.collectionVariables.get(\"master11_node\"));\r",
													"\r",
													"pm.collectionVariables.set(\"master11_id\",jsonResponse.result.node_id);\r",
													"console.log(pm.collectionVariables.get(\"master11_id\"));\r",
													"\r",
													"pm.test(`identifier should be equal to ${pm.collectionVariables.get(\"master11_id\")}`, () => {\r",
													"    pm.expect(jsonResponse.result.identifier).to.eql(`${pm.collectionVariables.get(\"master11_code\")}`);\r",
													"});\r",
													"\r",
													"pm.test(`node_id should be equal to ${pm.collectionVariables.get(\"master11_node\")}`, () => {\r",
													"    pm.expect(jsonResponse.result.node_id).to.eql(`${pm.collectionVariables.get(\"master11_code\")}`);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{auth_token}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Channel-Id",
												"value": "{{X-Channel-Id}}"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{host}}/framework/v3/category/master/retire/{{master11_code}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"framework",
												"v3",
												"category",
												"master",
												"retire",
												"{{master11_code}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete framework",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json()\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"fw9_node\",jsonResponse.result.node_id);\r",
													"console.log(pm.collectionVariables.get(\"fw9_node\"));\r",
													"\r",
													"pm.test(`node id should be equal to ${pm.collectionVariables.get(\"fw9_node\")}`, () => {\r",
													"    pm.expect(jsonResponse.result.node_id).to.eql(pm.collectionVariables.get(\"fw9_code\"));\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "in",
													"value": "header",
													"type": "string"
												},
												{
													"key": "value",
													"value": "{{auth_token}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "X-Channel-Id",
												"value": "{{X-Channel-Id}}",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{host}}/framework/v3/retire/{{fw9_code}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"framework",
												"v3",
												"retire",
												"{{fw9_code}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete framework category",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json()\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(`identifier should be equal to ${pm.collectionVariables.get(\"fwcat_cat4\")}`, () => {\r",
													"    pm.expect(jsonResponse.result.identifier).to.eql(`${pm.collectionVariables.get(\"fw9_code\")}_${pm.collectionVariables.get(\"master11_code\")}`);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Channel-Id",
												"value": "sunbird"
											}
										],
										"url": {
											"raw": "{{host}}/framework/v3/category/retire/{{master11_code}}?framework={{fw9_code}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"framework",
												"v3",
												"category",
												"retire",
												"{{master11_code}}"
											],
											"query": [
												{
													"key": "framework",
													"value": "{{fw9_code}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete master category",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json()\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.collectionVariables.set(\"master12_node\",jsonResponse.result.node_id);\r",
													"console.log(pm.collectionVariables.get(\"master12_node\"));\r",
													"\r",
													"pm.collectionVariables.set(\"master12_id\",jsonResponse.result.node_id);\r",
													"console.log(pm.collectionVariables.get(\"master12_id\"));\r",
													"\r",
													"pm.test(`identifier should be equal to ${pm.collectionVariables.get(\"master12_id\")}`, () => {\r",
													"    pm.expect(jsonResponse.result.identifier).to.eql(`${pm.collectionVariables.get(\"master12_code\")}`);\r",
													"});\r",
													"\r",
													"pm.test(`node_id should be equal to ${pm.collectionVariables.get(\"master12_node\")}`, () => {\r",
													"    pm.expect(jsonResponse.result.node_id).to.eql(`${pm.collectionVariables.get(\"master12_code\")}`);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{auth_token}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Channel-Id",
												"value": "{{X-Channel-Id}}"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{host}}/framework/v3/category/master/retire/{{master12_code}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"framework",
												"v3",
												"category",
												"master",
												"retire",
												"{{master12_code}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete framework",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json()\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"fw10_node\",jsonResponse.result.node_id);\r",
													"console.log(pm.collectionVariables.get(\"fw10_node\"));\r",
													"\r",
													"pm.test(`node id should be equal to ${pm.collectionVariables.get(\"fw10_node\")}`, () => {\r",
													"    pm.expect(jsonResponse.result.node_id).to.eql(pm.collectionVariables.get(\"fw10_code\"));\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "in",
													"value": "header",
													"type": "string"
												},
												{
													"key": "value",
													"value": "{{auth_token}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "X-Channel-Id",
												"value": "{{X-Channel-Id}}",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{host}}/framework/v3/retire/{{fw10_code}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"framework",
												"v3",
												"retire",
												"{{fw10_code}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete framework category",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json()\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"fw_catgry\",jsonResponse.result.identifier);\r",
													"console.log(pm.collectionVariables.get(\"fw_catgry\"));\r",
													"\r",
													"pm.test(`identifier should be equal to ${pm.collectionVariables.get(\"fw_catgry\")}`, () => {\r",
													"    pm.expect(jsonResponse.result.identifier).to.eql(`${pm.collectionVariables.get(\"fw10_code\")}_${pm.collectionVariables.get(\"master12_code\")}`);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Channel-Id",
												"value": "sunbird"
											}
										],
										"url": {
											"raw": "{{host}}/framework/v3/category/retire/{{master12_code}}?framework={{fw10_code}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"framework",
												"v3",
												"category",
												"retire",
												"{{master12_code}}"
											],
											"query": [
												{
													"key": "framework",
													"value": "{{fw10_code}}"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"description": "Pre requisite:\n\n1. Master category should be available before creating framework category\n2. Master category and framework should be updated before running the collection (in the pre requisite folder as well)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"//Scenario-1",
									"pm.collectionVariables.set(\"master8_code\", \"master8_cat_6\");",
									"pm.collectionVariables.set(\"fw7_name\", \"fw7_name\");",
									"pm.collectionVariables.set(\"fw7_code\", \"fw7_code6\");",
									"pm.collectionVariables.set(\"master9_code\", \"master9_cat_6\");",
									"//Scenarion-2",
									"pm.collectionVariables.set(\"master10_code\", \"master10_cat_5\");",
									"pm.collectionVariables.set(\"fw8_name\", \"fw8_name\");",
									"pm.collectionVariables.set(\"fw8_code\", \"fw8_code5\");",
									"//Scenario-3",
									"pm.collectionVariables.set(\"master11_code\", \"master11_cat_5\");",
									"pm.collectionVariables.set(\"fw9_name\", \"fw9_name\");",
									"pm.collectionVariables.set(\"fw9_code\", \"fw9_code6\");",
									"//Scenario-4",
									"pm.collectionVariables.set(\"master12_code\", \"master12_cat_6\");",
									"pm.collectionVariables.set(\"fw10_name\", \"fw10_name\");",
									"pm.collectionVariables.set(\"fw10_code\", \"fw10_code6\");",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "term",
					"item": [
						{
							"name": "Create Term",
							"item": [
								{
									"name": "Pre requisite",
									"item": [
										{
											"name": "Create a master category",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.collectionVariables.set(\"master13_id\",jsonResponse.result.identifier);\r",
															"console.log(pm.collectionVariables.get(\"master13_id\"));\r",
															"pm.collectionVariables.set(\"master13_node\",jsonResponse.result.node_id);\r",
															"console.log(pm.collectionVariables.get(\"master13_node\"));\r",
															"\r",
															"pm.test(`identifier should be equal to ${pm.collectionVariables.get(\"master13_id\")}`, () => {\r",
															"    pm.expect(jsonResponse.result.identifier).to.eql(`${pm.collectionVariables.get(\"master13_code\")}`);\r",
															"});\r",
															"\r",
															"pm.test(`node_id should be equal to ${pm.collectionVariables.get(\"master13_node\")}`, () => {\r",
															"    pm.expect(jsonResponse.result.node_id).to.eql(`${pm.collectionVariables.get(\"master13_code\")}`);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-Channel-Id",
														"value": "sunbird"
													},
													{
														"key": "Authorization",
														"value": "{{auth_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"category\": {\n            \"name\": \"master\",\n            \"code\": \"{{master13_code}}\",\n            \"targetIdFieldName\": \"targetmasterIds\",\n            \"searchLabelFieldName\": \"se_master\",\n            \"searchIdFieldName\": \"se_master\",\n            \"orgIdFieldName\": \"masterIds\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/framework/v3/category/master/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"category",
														"master",
														"create"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create a framework",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','status', 'err','errmsg');\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"null\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status has string \", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"successful\");\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.result).to.have.all.keys('node_id', 'versionKey');\r",
															"  pm.expect(jsonResponse.result.node_id).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.result.versionKey).to.be.a(\"string\");\r",
															"});\r",
															"\r",
															"pm.collectionVariables.set(\"fw11_node\",jsonResponse.result.node_id);\r",
															"console.log(pm.collectionVariables.get(\"fw11_node\"));\r",
															"\r",
															"pm.test(`node id should be equal to ${pm.collectionVariables.get(\"fw11_node\")}`, () => {\r",
															"    pm.expect(jsonResponse.result.node_id).to.eql(pm.collectionVariables.get(\"fw11_code\"));\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {}
											},
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{auth_token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"description": "(Required) It is the Unique Id to identify the root organisation to which the user belongs",
														"key": "X-Channel-Id",
														"value": "{{X-Channel-Id}}"
													},
													{
														"key": "",
														"value": "",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"framework\": {\n            \"name\": \"{{fw11_name}}\",\n            \"code\": \"{{fw11_code}}\"\n            \n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/framework/v3/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"create"
													]
												},
												"description": "This API is associated with creating a new framework on the Sunbird Platform.\n   - The endpoint for **Create a Framework** is `/framework/v1/create`\n   - It points to knowledge-mw-service - `/v1/framework/create`\n   - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
											},
											"response": [
												{
													"name": "OK ! Successful operation.\"create framework\" operation was successfully executed.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) It is the Unique Id to identify the root organisation to which the user belongs",
																"key": "X-Channel-Id",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"framework\": {\n      \"name\": \"Framework Name\",\n      \"code\": \"dummy_framework\",\n      \"channels\": [\n        {\n          \"identifier\": \"in.ekstep\"\n        }\n      ]\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"create"
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.framework.create\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T09:49:06.794Z\",\n  \"params\": {\n    \"resmsgid\": \"9b5d7ca0-3df1-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": \"9b4a90e0-3df1-11eb-9ff3-67c41480f6aa\",\n    \"status\": \"successful\",\n    \"err\": null,\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"node_id\": \"dummy_framework\",\n    \"versionKey\": \"1607939346678\"\n  }\n}"
												},
												{
													"name": "BAD REQUEST. The \"create framework\" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) It is the Unique Id to identify the root organisation to which the user belongs",
																"key": "X-Channel-Id",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"framework\": {\n      \"name\": \"Framework Name\",\n      \"code\": \"dummy_framework\",\n      \"channels\": [\n        {\n          \"identifier\": \"in.ekstep\"\n        }\n      ]\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"create"
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.framework.create\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T09:50:45.249Z\",\n  \"params\": {\n    \"resmsgid\": \"d60c8710-3df1-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"CONSTRAINT_VALIDATION_FAILED\",\n    \"errmsg\": \"Object already exists with identifier: dummy_framework\"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {}\n}"
												},
												{
													"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) It is the Unique Id to identify the root organisation to which the user belongs",
																"key": "X-Channel-Id",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"framework\": {\n      \"name\": \"Framework Name\",\n      \"code\": \"dummy_framework\",\n      \"channels\": [\n        {\n          \"identifier\": \"in.ekstep\"\n        }\n      ]\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"create"
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Create Framework Category",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','status', 'err','errmsg');\r",
															"pm.expect(jsonResponse.params.resmsgid).to.be.a(\"String\");\r",
															"pm.expect(jsonResponse.params.msgid).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"null\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status has string \", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"successful\");\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.result).to.have.all.keys('identifier', 'versionKey');\r",
															"  pm.expect(jsonResponse.result.identifier).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.result.versionKey).to.be.a(\"string\");\r",
															"});\r",
															"\r",
															"pm.collectionVariables.set(\"fwcat_cat6\",jsonResponse.result.identifier);\r",
															"console.log(pm.collectionVariables.get(\"fwcat_cat6\"));\r",
															"\r",
															"pm.test(`identifier should be equal to ${pm.collectionVariables.get(\"fwcat_cat6\")}`, () => {\r",
															"    pm.expect(jsonResponse.result.identifier).to.eql(`${pm.collectionVariables.get(\"fw11_code\")}_${pm.collectionVariables.get(\"master13_code\")}`);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "X-Channel-Id",
														"value": "{{X-Channel-Id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"request\": {\n    \"category\": {\n      \"name\": \"Board\",\n      \"code\": \"{{master13_code}}\",\n      \"description\":\"Board category\"\n    }\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/framework/v3/category/create?framework={{fw11_code}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"category",
														"create"
													],
													"query": [
														{
															"key": "framework",
															"value": "{{fw11_code}}",
															"description": "(Required) The code of the framework under which category has to be created"
														}
													]
												},
												"description": "This API is associated with creating a category under a framework\n   - The endpoint for **Create Category** is `/framework/v1/category/create`\n   - It points to knowledge-mw-service - `/v1/framework/category/create`\n   - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
											},
											"response": [
												{
													"name": "OK ! Successful operation.\"create category\" operation was successfully executed.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"category\": {\n      \"name\": \"Subject\",\n      \"code\": \"subject\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/category/create?framework=Ut enim offici",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"category",
																"create"
															],
															"query": [
																{
																	"key": "framework",
																	"value": "Ut enim offici"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.category.create\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T19:32:01.754Z\",\n  \"params\": {\n    \"resmsgid\": \"0a10dba0-3e43-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": \"0a05df20-3e43-11eb-9ff3-67c41480f6aa\",\n    \"status\": \"successful\",\n    \"err\": null,\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"node_id\": \"dummy_framework_medium\",\n    \"versionKey\": \"1607974321700\"\n  }\n}"
												},
												{
													"name": "BAD REQUEST. The \"create category\" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"category\": {\n      \"name\": \"Subject\",\n      \"code\": \"subject\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/category/create?framework=Ut enim offici",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"category",
																"create"
															],
															"query": [
																{
																	"key": "framework",
																	"value": "Ut enim offici"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.category.create\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T19:30:50.114Z\",\n  \"params\": {\n    \"resmsgid\": \"df5d7620-3e42-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"CONSTRAINT_VALIDATION_FAILED\",\n    \"errmsg\": \"Object already exists with identifier: dummy_framework_subject\"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {}\n}"
												},
												{
													"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"category\": {\n      \"name\": \"Subject\",\n      \"code\": \"subject\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/category/create?framework=Ut enim offici",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"category",
																"create"
															],
															"query": [
																{
																	"key": "framework",
																	"value": "Ut enim offici"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									],
									"description": "1. Framework name and code should be updated before each run\n2. Framework categroy should be a subset of master category, i.e., framework category can be created only when it is available in master category\n    \n3. Create a master category with same indentifier before creating the framework category"
								},
								{
									"name": "Positive",
									"item": [
										{
											"name": "Create a valid term for valid framework and framework category",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"id has string - api.taxonomy.term.create\", function () {\r",
															"    pm.expect(jsonResponse.id).to.be.equal(\"api.taxonomy.term.create\");\r",
															"});\r",
															"pm.test(\"Version is 3.0 \", function () {\r",
															"    pm.expect(jsonResponse.ver).to.be.equal(\"3.0\");\r",
															"});\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','status', 'err','errmsg');\r",
															"pm.expect(jsonResponse.params.resmsgid).to.be.a(\"String\");\r",
															"pm.expect(jsonResponse.params.msgid).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"null\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status has string \", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"successful\");\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.result).to.have.all.keys('identifier', 'node_id');\r",
															"  pm.expect(jsonResponse.result.identifier).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.result.node_id).to.be.a(\"string\");\r",
															"});\r",
															"\r",
															"pm.collectionVariables.set(\"term_id\",jsonResponse.result.identifier);\r",
															"console.log(pm.collectionVariables.get(\"term_id\"));\r",
															"pm.collectionVariables.set(\"term_node\",jsonResponse.result.node_id);\r",
															"console.log(pm.collectionVariables.get(\"term_node\"));\r",
															"\r",
															"pm.test(`identifier should be equal to ${pm.collectionVariables.get(\"term_id\")}`, () => {\r",
															"    pm.expect(jsonResponse.result.identifier).to.eql(`${pm.collectionVariables.get(\"fw11_code\")}_${pm.collectionVariables.get(\"master13_code\")}_${pm.collectionVariables.get(\"t1_term\")}`);\r",
															"});\r",
															"\r",
															"pm.test(`node should be equal to ${pm.collectionVariables.get(\"term_node\")}`, () => {\r",
															"    pm.expect(jsonResponse.result.node_id).to.eql(`${pm.collectionVariables.get(\"fw11_code\")}_${pm.collectionVariables.get(\"master13_code\")}_${pm.collectionVariables.get(\"t1_term\")}`);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "value",
															"value": "{{apiKey}}",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"request\": {\n    \"term\": {\n      \"code\": \"{{t1_term}}\",\n      \"name\": \"English\"\n    }\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/framework/v3/term/create?framework={{fw11_code}}&category={{master13_code}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"term",
														"create"
													],
													"query": [
														{
															"key": "framework",
															"value": "{{fw11_code}}",
															"description": "(Required) Represents the framework in which the term is to be created"
														},
														{
															"key": "category",
															"value": "{{master13_code}}",
															"description": "(Required) Represents the category in which the term is to be created"
														}
													]
												},
												"description": "This API is associated with creating a term under a framework category\n  - The endpoint for **Create Term** is `/framework/v1/term/create`\n  - It points to knowledge-mw-service - `/v1/framework/term/create`\n  - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.\""
											},
											"response": [
												{
													"name": "OK ! Successful operation.\"create term\" operation was successfully executed.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"term\": {\n      \"code\": \"english\",\n      \"name\": \"English\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/term/create?framework=Ut enim offici&category=Ut enim offici",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"term",
																"create"
															],
															"query": [
																{
																	"key": "framework",
																	"value": "Ut enim offici"
																},
																{
																	"key": "category",
																	"value": "Ut enim offici"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.term.create\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T19:44:02.348Z\",\n  \"params\": {\n    \"resmsgid\": \"b792c6c0-3e44-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": \"b783f9b0-3e44-11eb-9ff3-67c41480f6aa\",\n    \"status\": \"successful\",\n    \"err\": null,\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"node_id\": [\n      \"dummy_framework_subject_english\"\n    ]\n  }\n}"
												},
												{
													"name": "BAD REQUEST. The \"create term\" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"term\": {\n      \"code\": \"english\",\n      \"name\": \"English\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/term/create?framework=Ut enim offici&category=Ut enim offici",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"term",
																"create"
															],
															"query": [
																{
																	"key": "framework",
																	"value": "Ut enim offici"
																},
																{
																	"key": "category",
																	"value": "Ut enim offici"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.term.create\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T19:44:49.263Z\",\n  \"params\": {\n    \"resmsgid\": \"d3896ff0-3e44-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"ERR_INVALID_CATEGORY_ID\",\n    \"errmsg\": \"Please provide valid category.\"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {}\n}"
												},
												{
													"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"term\": {\n      \"code\": \"english\",\n      \"name\": \"English\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/term/create?framework=Ut enim offici&category=Ut enim offici",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"term",
																"create"
															],
															"query": [
																{
																	"key": "framework",
																	"value": "Ut enim offici"
																},
																{
																	"key": "category",
																	"value": "Ut enim offici"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Create a valid term for invalid framework and valid framework category",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"pm.test(\"id has string - api.taxonomy.term.create\", function () {\r",
															"    pm.expect(jsonResponse.id).to.be.equal(\"api.taxonomy.term.create\");\r",
															"});\r",
															"pm.test(\"Version is 3.0 \", function () {\r",
															"    pm.expect(jsonResponse.ver).to.be.equal(\"3.0\");\r",
															"});\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','status', 'err','errmsg');\r",
															"pm.expect(jsonResponse.params.resmsgid).to.be.a(\"String\");\r",
															"pm.expect(jsonResponse.params.msgid).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"String\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status has string \", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"failed\");\r",
															"});\r",
															"\r",
															"pm.test(\"err has string \", function () {\r",
															"    pm.expect(jsonResponse.params.err).to.be.equal(\"NOT_FOUND\");\r",
															"});\r",
															"\r",
															"pm.test(`errmsg has string: Error! Node(s) doesn't Exists. | [Invalid Node Id.]: invalid_${pm.collectionVariables.get(\"master13_code\")}` , function () {\r",
															"    pm.expect(jsonResponse.params.errmsg).to.be.include(`Error! Node(s) doesn't Exists. | [Invalid Node Id.]: invalid_${pm.collectionVariables.get(\"master13_code\")}`);\r",
															"});\r",
															"\r",
															"pm.test(\"responseCode has string \", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.include(\"RESOURCE_NOT_FOUND\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{auth_token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "{{apiKey}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"request\": {\n    \"term\": {\n      \"code\": \"Science\",\n      \"name\": \"English\"\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{host}}/framework/v3/term/create?framework=invalid&category={{master13_code}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"term",
														"create"
													],
													"query": [
														{
															"key": "framework",
															"value": "invalid"
														},
														{
															"key": "category",
															"value": "{{master13_code}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Create a valid term for valid framework and invalid framework category",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"pm.test(\"id has string - api.taxonomy.term.create\", function () {\r",
															"    pm.expect(jsonResponse.id).to.be.equal(\"api.taxonomy.term.create\");\r",
															"});\r",
															"pm.test(\"Version is 3.0 \", function () {\r",
															"    pm.expect(jsonResponse.ver).to.be.equal(\"3.0\");\r",
															"});\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','status', 'err','errmsg');\r",
															"pm.expect(jsonResponse.params.resmsgid).to.be.a(\"String\");\r",
															"pm.expect(jsonResponse.params.msgid).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"String\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status has string \", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"failed\");\r",
															"});\r",
															"\r",
															"pm.test(\"err has string \", function () {\r",
															"    pm.expect(jsonResponse.params.err).to.be.equal(\"NOT_FOUND\");\r",
															"});\r",
															"\r",
															"pm.test(`errmsg has string: Error! Node(s) doesn't Exists. | [Invalid Node Id.]: ${pm.collectionVariables.get(\"fw11_code\")}_dummy` , function () {\r",
															"    pm.expect(jsonResponse.params.errmsg).to.be.include(`Error! Node(s) doesn't Exists. | [Invalid Node Id.]: ${pm.collectionVariables.get(\"fw11_code\")}_dummy`);\r",
															"});\r",
															"\r",
															"pm.test(\"responseCode has string \", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.include(\"RESOURCE_NOT_FOUND\");\r",
															"});\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "{{auth_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"request\": {\n    \"term\": {\n      \"code\": \"Science\",\n      \"name\": \"English\"\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{host}}/framework/v3/term/create?framework={{fw11_code}}&category=dummy",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"term",
														"create"
													],
													"query": [
														{
															"key": "framework",
															"value": "{{fw11_code}}"
														},
														{
															"key": "category",
															"value": "dummy"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Create a valid term for invalid framework and invalid framework category",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"pm.test(\"id has string - api.taxonomy.term.create\", function () {\r",
															"    pm.expect(jsonResponse.id).to.be.equal(\"api.taxonomy.term.create\");\r",
															"});\r",
															"pm.test(\"Version is 3.0 \", function () {\r",
															"    pm.expect(jsonResponse.ver).to.be.equal(\"3.0\");\r",
															"});\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','status', 'err','errmsg');\r",
															"pm.expect(jsonResponse.params.resmsgid).to.be.a(\"String\");\r",
															"pm.expect(jsonResponse.params.msgid).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"String\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status has string \", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"failed\");\r",
															"});\r",
															"\r",
															"pm.test(\"err has string \", function () {\r",
															"    pm.expect(jsonResponse.params.err).to.be.equal(\"NOT_FOUND\");\r",
															"});\r",
															"\r",
															"pm.test(\"errmsg has string \", function () {\r",
															"    pm.expect(jsonResponse.params.errmsg).to.be.include(\"Error! Node(s) doesn't Exists. | [Invalid Node Id.]: \");\r",
															"});\r",
															"\r",
															"pm.test(\"responseCode has string \", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.include(\"RESOURCE_NOT_FOUND\");\r",
															"});\r",
															"\r",
															"pm.test(`errmsg has string: Error! Node(s) doesn't Exists. | [Invalid Node Id.]: dummy_dummy` , function () {\r",
															"    pm.expect(jsonResponse.params.errmsg).to.be.include(`Error! Node(s) doesn't Exists. | [Invalid Node Id.]: dummy_dummy`);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "{{auth_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"request\": {\n    \"term\": {\n      \"code\": \"Science\",\n      \"name\": \"English\"\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{host}}/framework/v3/term/create?framework=dummy&category=dummy",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"term",
														"create"
													],
													"query": [
														{
															"key": "framework",
															"value": "dummy"
														},
														{
															"key": "category",
															"value": "dummy"
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Read Term",
							"item": [
								{
									"name": "Pre requisite",
									"item": [
										{
											"name": "Create a master category",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.collectionVariables.set(\"master14_id\",jsonResponse.result.identifier);\r",
															"console.log(pm.collectionVariables.get(\"master14_id\"));\r",
															"pm.collectionVariables.set(\"master14_node\",jsonResponse.result.node_id);\r",
															"console.log(pm.collectionVariables.get(\"master14_node\"));\r",
															"\r",
															"pm.test(`identifier should be equal to ${pm.collectionVariables.get(\"master14_id\")}`, () => {\r",
															"    pm.expect(jsonResponse.result.identifier).to.eql(`${pm.collectionVariables.get(\"master14_code\")}`);\r",
															"});\r",
															"\r",
															"pm.test(`node_id should be equal to ${pm.collectionVariables.get(\"master14_node\")}`, () => {\r",
															"    pm.expect(jsonResponse.result.node_id).to.eql(`${pm.collectionVariables.get(\"master14_code\")}`);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-Channel-Id",
														"value": "sunbird"
													},
													{
														"key": "Authorization",
														"value": "{{auth_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"category\": {\n            \"name\": \"master\",\n            \"code\": \"{{master14_code}}\",\n            \"targetIdFieldName\": \"targetmasterIds\",\n            \"searchLabelFieldName\": \"se_master\",\n            \"searchIdFieldName\": \"se_master\",\n            \"orgIdFieldName\": \"masterIds\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/framework/v3/category/master/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"category",
														"master",
														"create"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create a framework",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','status', 'err','errmsg');\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"null\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status has string \", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"successful\");\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.result).to.have.all.keys('node_id', 'versionKey');\r",
															"  pm.expect(jsonResponse.result.node_id).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.result.versionKey).to.be.a(\"string\");\r",
															"});\r",
															"\r",
															"pm.collectionVariables.set(\"fw12_node\",jsonResponse.result.node_id);\r",
															"console.log(pm.collectionVariables.get(\"fw12_node\"));\r",
															"\r",
															"pm.test(`node id should be equal to ${pm.collectionVariables.get(\"fw12_node\")}`, () => {\r",
															"    pm.expect(jsonResponse.result.node_id).to.eql(pm.collectionVariables.get(\"fw12_code\"));\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {}
											},
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{auth_token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"description": "(Required) It is the Unique Id to identify the root organisation to which the user belongs",
														"key": "X-Channel-Id",
														"value": "{{X-Channel-Id}}"
													},
													{
														"key": "",
														"value": "",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"framework\": {\n            \"name\": \"{{fw12_name}}\",\n            \"code\": \"{{fw12_code}}\"\n            \n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/framework/v3/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"create"
													]
												},
												"description": "This API is associated with creating a new framework on the Sunbird Platform.\n   - The endpoint for **Create a Framework** is `/framework/v1/create`\n   - It points to knowledge-mw-service - `/v1/framework/create`\n   - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
											},
											"response": [
												{
													"name": "OK ! Successful operation.\"create framework\" operation was successfully executed.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) It is the Unique Id to identify the root organisation to which the user belongs",
																"key": "X-Channel-Id",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"framework\": {\n      \"name\": \"Framework Name\",\n      \"code\": \"dummy_framework\",\n      \"channels\": [\n        {\n          \"identifier\": \"in.ekstep\"\n        }\n      ]\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"create"
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.framework.create\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T09:49:06.794Z\",\n  \"params\": {\n    \"resmsgid\": \"9b5d7ca0-3df1-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": \"9b4a90e0-3df1-11eb-9ff3-67c41480f6aa\",\n    \"status\": \"successful\",\n    \"err\": null,\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"node_id\": \"dummy_framework\",\n    \"versionKey\": \"1607939346678\"\n  }\n}"
												},
												{
													"name": "BAD REQUEST. The \"create framework\" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) It is the Unique Id to identify the root organisation to which the user belongs",
																"key": "X-Channel-Id",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"framework\": {\n      \"name\": \"Framework Name\",\n      \"code\": \"dummy_framework\",\n      \"channels\": [\n        {\n          \"identifier\": \"in.ekstep\"\n        }\n      ]\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"create"
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.framework.create\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T09:50:45.249Z\",\n  \"params\": {\n    \"resmsgid\": \"d60c8710-3df1-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"CONSTRAINT_VALIDATION_FAILED\",\n    \"errmsg\": \"Object already exists with identifier: dummy_framework\"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {}\n}"
												},
												{
													"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) It is the Unique Id to identify the root organisation to which the user belongs",
																"key": "X-Channel-Id",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"framework\": {\n      \"name\": \"Framework Name\",\n      \"code\": \"dummy_framework\",\n      \"channels\": [\n        {\n          \"identifier\": \"in.ekstep\"\n        }\n      ]\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"create"
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Create Framework Category",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.globals.get(\"category\");\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','status', 'err','errmsg');\r",
															"pm.expect(jsonResponse.params.resmsgid).to.be.a(\"String\");\r",
															"pm.expect(jsonResponse.params.msgid).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"null\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status has string \", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"successful\");\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.result).to.have.all.keys('identifier', 'versionKey');\r",
															"  pm.expect(jsonResponse.result.identifier).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.result.versionKey).to.be.a(\"string\");\r",
															"});\r",
															"\r",
															"pm.collectionVariables.set(\"fwcat_cat7\",jsonResponse.result.identifier);\r",
															"console.log(pm.collectionVariables.get(\"fwcat_cat7\"));\r",
															"\r",
															"pm.test(`identifier should be equal to ${pm.collectionVariables.get(\"fwcat_cat7\")}`, () => {\r",
															"    pm.expect(jsonResponse.result.identifier).to.eql(`${pm.collectionVariables.get(\"fw12_code\")}_${pm.collectionVariables.get(\"master14_code\")}`);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "X-Channel-Id",
														"value": "{{X-Channel-Id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"request\": {\n    \"category\": {\n      \"name\": \"Board\",\n      \"code\": \"{{master14_code}}\",\n      \"description\":\"Board category\"\n    }\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/framework/v3/category/create?framework={{fw12_code}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"category",
														"create"
													],
													"query": [
														{
															"key": "framework",
															"value": "{{fw12_code}}",
															"description": "(Required) The code of the framework under which category has to be created"
														}
													]
												},
												"description": "This API is associated with creating a category under a framework\n   - The endpoint for **Create Category** is `/framework/v1/category/create`\n   - It points to knowledge-mw-service - `/v1/framework/category/create`\n   - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
											},
											"response": [
												{
													"name": "OK ! Successful operation.\"create category\" operation was successfully executed.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"category\": {\n      \"name\": \"Subject\",\n      \"code\": \"subject\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/category/create?framework=Ut enim offici",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"category",
																"create"
															],
															"query": [
																{
																	"key": "framework",
																	"value": "Ut enim offici"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.category.create\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T19:32:01.754Z\",\n  \"params\": {\n    \"resmsgid\": \"0a10dba0-3e43-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": \"0a05df20-3e43-11eb-9ff3-67c41480f6aa\",\n    \"status\": \"successful\",\n    \"err\": null,\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"node_id\": \"dummy_framework_medium\",\n    \"versionKey\": \"1607974321700\"\n  }\n}"
												},
												{
													"name": "BAD REQUEST. The \"create category\" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"category\": {\n      \"name\": \"Subject\",\n      \"code\": \"subject\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/category/create?framework=Ut enim offici",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"category",
																"create"
															],
															"query": [
																{
																	"key": "framework",
																	"value": "Ut enim offici"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.category.create\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T19:30:50.114Z\",\n  \"params\": {\n    \"resmsgid\": \"df5d7620-3e42-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"CONSTRAINT_VALIDATION_FAILED\",\n    \"errmsg\": \"Object already exists with identifier: dummy_framework_subject\"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {}\n}"
												},
												{
													"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"category\": {\n      \"name\": \"Subject\",\n      \"code\": \"subject\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/category/create?framework=Ut enim offici",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"category",
																"create"
															],
															"query": [
																{
																	"key": "framework",
																	"value": "Ut enim offici"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Create a framework term",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"pm.collectionVariables.set(\"term_id\",jsonResponse.result.identifier);\r",
															"console.log(pm.collectionVariables.get(\"term_id\"));\r",
															"pm.collectionVariables.set(\"term_node\",jsonResponse.result.node_id);\r",
															"console.log(pm.collectionVariables.get(\"term_node\"));\r",
															"\r",
															"pm.test(`identifier should be equal to ${pm.collectionVariables.get(\"term_id\")}`, () => {\r",
															"    pm.expect(jsonResponse.result.identifier).to.eql(`${pm.collectionVariables.get(\"fw12_code\")}_${pm.collectionVariables.get(\"master14_code\")}_${pm.collectionVariables.get(\"t2_term\")}`);\r",
															"});\r",
															"\r",
															"pm.test(`node should be equal to ${pm.collectionVariables.get(\"term_node\")}`, () => {\r",
															"    pm.expect(jsonResponse.result.node_id).to.eql(`${pm.collectionVariables.get(\"fw12_code\")}_${pm.collectionVariables.get(\"master14_code\")}_${pm.collectionVariables.get(\"t2_term\")}`);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "value",
															"value": "{{apiKey}}",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"request\": {\n    \"term\": {\n      \"code\": \"{{t2_term}}\",\n      \"name\": \"English\"\n    }\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/framework/v3/term/create?framework={{fw12_code}}&category={{master14_code}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"framework",
														"v3",
														"term",
														"create"
													],
													"query": [
														{
															"key": "framework",
															"value": "{{fw12_code}}",
															"description": "(Required) Represents the framework in which the term is to be created"
														},
														{
															"key": "category",
															"value": "{{master14_code}}",
															"description": "(Required) Represents the category in which the term is to be created"
														}
													]
												},
												"description": "This API is associated with creating a term under a framework category\n  - The endpoint for **Create Term** is `/framework/v1/term/create`\n  - It points to knowledge-mw-service - `/v1/framework/term/create`\n  - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.\""
											},
											"response": [
												{
													"name": "OK ! Successful operation.\"create term\" operation was successfully executed.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"term\": {\n      \"code\": \"english\",\n      \"name\": \"English\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/term/create?framework=Ut enim offici&category=Ut enim offici",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"term",
																"create"
															],
															"query": [
																{
																	"key": "framework",
																	"value": "Ut enim offici"
																},
																{
																	"key": "category",
																	"value": "Ut enim offici"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.term.create\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T19:44:02.348Z\",\n  \"params\": {\n    \"resmsgid\": \"b792c6c0-3e44-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": \"b783f9b0-3e44-11eb-9ff3-67c41480f6aa\",\n    \"status\": \"successful\",\n    \"err\": null,\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"node_id\": [\n      \"dummy_framework_subject_english\"\n    ]\n  }\n}"
												},
												{
													"name": "BAD REQUEST. The \"create term\" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"term\": {\n      \"code\": \"english\",\n      \"name\": \"English\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/term/create?framework=Ut enim offici&category=Ut enim offici",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"term",
																"create"
															],
															"query": [
																{
																	"key": "framework",
																	"value": "Ut enim offici"
																},
																{
																	"key": "category",
																	"value": "Ut enim offici"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.term.create\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T19:44:49.263Z\",\n  \"params\": {\n    \"resmsgid\": \"d3896ff0-3e44-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"ERR_INVALID_CATEGORY_ID\",\n    \"errmsg\": \"Please provide valid category.\"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {}\n}"
												},
												{
													"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"term\": {\n      \"code\": \"english\",\n      \"name\": \"English\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/term/create?framework=Ut enim offici&category=Ut enim offici",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"term",
																"create"
															],
															"query": [
																{
																	"key": "framework",
																	"value": "Ut enim offici"
																},
																{
																	"key": "category",
																	"value": "Ut enim offici"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									],
									"description": "1. Framework name and code should be updated before each run\n2. Framework categroy should be a subset of master category, i.e., framework category can be created only when it is available in master category\n    \n3. Create a master category with same indentifier before creating the framework category"
								},
								{
									"name": "Positive",
									"item": [
										{
											"name": "Read term for valid framework and valid framework category",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.get(\"term\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code has OK\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"id has string - api.taxonomy.term.read\", function () {\r",
															"    pm.expect(jsonResponse.id).to.be.equal(\"api.taxonomy.term.read\");\r",
															"});\r",
															"pm.test(\"Version is 3.0 \", function () {\r",
															"    pm.expect(jsonResponse.ver).to.be.equal(\"3.0\");\r",
															"});\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  const jsonResponse = pm.response.json();\r",
															"\r",
															"  pm.expect(jsonResponse.result.term).to.have.all.keys('identifier', 'lastStatusChangedOn', 'code', 'languageCode', 'createdOn', 'objectType', 'versionKey', 'framework', 'name', 'lastUpdatedOn', 'categories', 'category', 'status');\r",
															"\r",
															"  pm.expect(jsonResponse.result.term.categories).to.be.an(\"array\");\r",
															"  pm.expect(jsonResponse.result.term.categories[0]).to.have.all.keys(\r",
															"    'name', 'relation', 'identifier', 'description', 'objectType', 'status'\r",
															"  );\r",
															"});\r",
															"\r",
															"pm.test(\"Status is Live\", function () {\r",
															"    pm.expect(jsonResponse.result.term.status).to.be.equal(\"Live\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "value",
															"value": "{{apiKey}}",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/framework/v3/term/read/:{{t2_term}}?framework={{fw12_code}}&category={{master14_code}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"framework",
														"v3",
														"term",
														"read",
														":{{t2_term}}"
													],
													"query": [
														{
															"key": "framework",
															"value": "{{fw12_code}}",
															"description": "(Required) Represents the framework id in which the term can be fetched"
														},
														{
															"key": "category",
															"value": "{{master14_code}}",
															"description": "(Required) Represents the category in which the term can be fetched"
														}
													],
													"variable": [
														{
															"key": "{{t2_term}}",
															"value": ""
														}
													]
												},
												"description": "This API is associated with fetching the available terms under a specific category and a framework on Sunbird Platform.\n   - The endpoint for **Fetch Term** is `/framework/v1/term/read/{code}`\n   - It points to knowledge-mw-service - `/v1/framework/term/read/{code}`\n   - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
											},
											"response": [
												{
													"name": "OK ! Successful operation.\"Fetch term\" operation was successfully executed.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "The Content Type entity is the media type of the resource.\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/framework/v1/term/read/:code?framework=Ut enim offici&category=Ut enim offici",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"term",
																"read",
																":code"
															],
															"query": [
																{
																	"key": "framework",
																	"value": "Ut enim offici"
																},
																{
																	"key": "category",
																	"value": "Ut enim offici"
																}
															],
															"variable": [
																{
																	"key": "code",
																	"value": "Ut enim offici",
																	"description": "(Required) The name/code of the term to be fetched"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.term.read\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-17T07:24:51.258Z\",\n  \"params\": {\n    \"resmsgid\": \"f380c1a0-4038-11eb-9b0c-abcfbdf41bc3\",\n    \"msgid\": \"f358c740-4038-11eb-9b0c-abcfbdf41bc3\",\n    \"status\": \"successful\",\n    \"err\": null,\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"term\": {\n      \"associations\": [],\n      \"identifier\": \"dummy_framework_subject_english\",\n      \"lastStatusChangedOn\": \"2020-12-14T19:44:02.260+0000\",\n      \"code\": \"english\",\n      \"consumerId\": \"7411b6bd-89f3-40ec-98d1-229dc64ce77d\",\n      \"channel\": \"in.ekstep\",\n      \"description\": \"English\",\n      \"createdOn\": \"2020-12-14T19:44:02.260+0000\",\n      \"versionKey\": \"1607975299669\",\n      \"children\": [],\n      \"appId\": \"dev.sunbird.portal\",\n      \"name\": \"English\",\n      \"lastUpdatedOn\": \"2020-12-14T19:48:19.669+0000\",\n      \"categories\": [\n        {\n          \"identifier\": \"dummy_framework_subject\",\n          \"name\": \"Subject\",\n          \"objectType\": \"CategoryInstance\",\n          \"relation\": \"hasSequenceMember\",\n          \"description\": \"Updated description\",\n          \"status\": \"Live\"\n        }\n      ],\n      \"category\": \"subject\",\n      \"status\": \"Live\"\n    }\n  }\n}"
												},
												{
													"name": "BAD REQUEST. The \"Fetch term\" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "The Content Type entity is the media type of the resource.\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/framework/v1/term/read/:code?framework=Ut enim offici&category=Ut enim offici",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"term",
																"read",
																":code"
															],
															"query": [
																{
																	"key": "framework",
																	"value": "Ut enim offici"
																},
																{
																	"key": "category",
																	"value": "Ut enim offici"
																}
															],
															"variable": [
																{
																	"key": "code",
																	"value": "Ut enim offici",
																	"description": "(Required) The name/code of the term to be fetched"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.term.read\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-17T07:54:24.246Z\",\n  \"params\": {\n    \"resmsgid\": \"14494160-403d-11eb-9b0c-abcfbdf41bc3\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"ERR_INVALID_CATEGORY_ID\",\n    \"errmsg\": \"Please provide valid category.\"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {}\n}"
												},
												{
													"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "The Content Type entity is the media type of the resource.\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/framework/v1/term/read/:code?framework=Ut enim offici&category=Ut enim offici",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"term",
																"read",
																":code"
															],
															"query": [
																{
																	"key": "framework",
																	"value": "Ut enim offici"
																},
																{
																	"key": "category",
																	"value": "Ut enim offici"
																}
															],
															"variable": [
																{
																	"key": "code",
																	"value": "Ut enim offici",
																	"description": "(Required) The name/code of the term to be fetched"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Read term for invalid framework and valid framework category",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"\r",
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});\r",
															"pm.test(\"id has string - api.taxonomy.term.read\", function () {\r",
															"    pm.expect(jsonResponse.id).to.be.equal(\"api.taxonomy.term.read\");\r",
															"});\r",
															"pm.test(\"Version is 3.0 \", function () {\r",
															"    pm.expect(jsonResponse.ver).to.be.equal(\"3.0\");\r",
															"});\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','err','status','errmsg');\r",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.msgid).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"String\");\r",
															"  });\r",
															"\r",
															"pm.test(\"Err has string\", function () {\r",
															"    pm.expect(jsonResponse.params.err).to.be.equal(\"NOT_FOUND\");\r",
															"});\r",
															"pm.test(\"Status has string\", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"failed\");\r",
															"});\r",
															"pm.test(`errmsg has string: Error! Node(s) doesn't Exists. | [Invalid Node Id.]: dummy_${pm.collectionVariables.get(\"master14_code\")}_${pm.collectionVariables.get(\"t2_term\")}`, function () {\r",
															"    pm.expect(jsonResponse.params.errmsg).to.eql(`Error! Node(s) doesn't Exists. | [Invalid Node Id.]: dummy_${pm.collectionVariables.get(\"master14_code\")}_${pm.collectionVariables.get(\"t2_term\")}`);\r",
															"});\r",
															"pm.test(\"responseCode has string\", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"RESOURCE_NOT_FOUND\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "{{apiKey}}"
													}
												],
												"url": {
													"raw": "{{host}}/framework/v3/term/read/:{{t2_term}}?framework=dummy&category={{master14_code}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"term",
														"read",
														":{{t2_term}}"
													],
													"query": [
														{
															"key": "framework",
															"value": "dummy"
														},
														{
															"key": "category",
															"value": "{{master14_code}}"
														}
													],
													"variable": [
														{
															"key": "{{t2_term}}",
															"value": ""
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Read term for valid framework and invalid framework category",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});\r",
															"pm.test(\"id has string - api.taxonomy.term.read\", function () {\r",
															"    pm.expect(jsonResponse.id).to.be.equal(\"api.taxonomy.term.read\");\r",
															"});\r",
															"pm.test(\"Version is 3.0 \", function () {\r",
															"    pm.expect(jsonResponse.ver).to.be.equal(\"3.0\");\r",
															"});\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','err','status','errmsg');\r",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.msgid).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"String\");\r",
															"  });\r",
															"\r",
															"pm.test(\"Err has string\", function () {\r",
															"    pm.expect(jsonResponse.params.err).to.be.equal(\"NOT_FOUND\");\r",
															"});\r",
															"pm.test(\"Status has string\", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"failed\");\r",
															"});\r",
															"pm.test(`errmsg has string: Error! Node(s) doesn't Exists. | [Invalid Node Id.]: ${pm.collectionVariables.get(\"fw12_code\")}_dummy_${pm.collectionVariables.get(\"t2_term\")}`, function () {\r",
															"    pm.expect(jsonResponse.params.errmsg).to.eql(`Error! Node(s) doesn't Exists. | [Invalid Node Id.]: ${pm.collectionVariables.get(\"fw12_code\")}_dummy_${pm.collectionVariables.get(\"t2_term\")}`);\r",
															"});\r",
															"pm.test(\"responseCode has string\", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"RESOURCE_NOT_FOUND\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "{{apiKey}}"
													}
												],
												"url": {
													"raw": "{{host}}/framework/v3/term/read/:{{t2_term}}?framework={{fw12_code}}&category=dummy",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"term",
														"read",
														":{{t2_term}}"
													],
													"query": [
														{
															"key": "framework",
															"value": "{{fw12_code}}"
														},
														{
															"key": "category",
															"value": "dummy"
														}
													],
													"variable": [
														{
															"key": "{{t2_term}}",
															"value": ""
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Read term for invalid framework and invalid framework category",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});\r",
															"pm.test(\"id has string - api.taxonomy.term.read\", function () {\r",
															"    pm.expect(jsonResponse.id).to.be.equal(\"api.taxonomy.term.read\");\r",
															"});\r",
															"pm.test(\"Version is 3.0 \", function () {\r",
															"    pm.expect(jsonResponse.ver).to.be.equal(\"3.0\");\r",
															"});\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','err','status','errmsg');\r",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.msgid).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"String\");\r",
															"  });\r",
															"\r",
															"pm.test(\"Err has string\", function () {\r",
															"    pm.expect(jsonResponse.params.err).to.be.equal(\"NOT_FOUND\");\r",
															"});\r",
															"pm.test(\"Status has string\", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"failed\");\r",
															"});\r",
															"pm.test(`errmsg has string: Error! Node(s) doesn't Exists. | [Invalid Node Id.]: dummy_dummy_${pm.collectionVariables.get(\"t2_term\")}`, function () {\r",
															"    pm.expect(jsonResponse.params.errmsg).to.eql(`Error! Node(s) doesn't Exists. | [Invalid Node Id.]: dummy_dummy_${pm.collectionVariables.get(\"t2_term\")}`);\r",
															"});\r",
															"pm.test(\"responseCode has string\", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"RESOURCE_NOT_FOUND\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "{{apiKey}}"
													}
												],
												"url": {
													"raw": "{{host}}/framework/v3/term/read/:{{t2_term}}?framework=dummy&category=dummy",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"term",
														"read",
														":{{t2_term}}"
													],
													"query": [
														{
															"key": "framework",
															"value": "dummy"
														},
														{
															"key": "category",
															"value": "dummy"
														}
													],
													"variable": [
														{
															"key": "{{t2_term}}",
															"value": ""
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Read invalid term for valid framework and valid framework category",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});\r",
															"pm.test(\"id has string - api.taxonomy.term.read\", function () {\r",
															"    pm.expect(jsonResponse.id).to.be.equal(\"api.taxonomy.term.read\");\r",
															"});\r",
															"pm.test(\"Version is 3.0 \", function () {\r",
															"    pm.expect(jsonResponse.ver).to.be.equal(\"3.0\");\r",
															"});\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','err','status','errmsg');\r",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.msgid).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"String\");\r",
															"  });\r",
															"\r",
															"pm.test(\"Err has string\", function () {\r",
															"    pm.expect(jsonResponse.params.err).to.be.equal(\"NOT_FOUND\");\r",
															"});\r",
															"pm.test(\"Status has string\", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"failed\");\r",
															"});\r",
															"pm.test(`errmsg has string: Error! Node(s) doesn't Exists. | [Invalid Node Id.]: ${pm.collectionVariables.get(\"fw12_code\")}_${pm.collectionVariables.get(\"master14_code\")}_dummy`, function () {\r",
															"    pm.expect(jsonResponse.params.errmsg).to.eql(`Error! Node(s) doesn't Exists. | [Invalid Node Id.]: ${pm.collectionVariables.get(\"fw12_code\")}_${pm.collectionVariables.get(\"master14_code\")}_dummy`);\r",
															"});\r",
															"pm.test(\"responseCode has string\", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"RESOURCE_NOT_FOUND\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "{{apiKey}}"
													}
												],
												"url": {
													"raw": "{{host}}/framework/v3/term/read/:dummy?framework={{fw12_code}}&category={{master14_code}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"term",
														"read",
														":dummy"
													],
													"query": [
														{
															"key": "framework",
															"value": "{{fw12_code}}"
														},
														{
															"key": "category",
															"value": "{{master14_code}}"
														}
													],
													"variable": [
														{
															"key": "dummy",
															"value": ""
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Update Term",
							"item": [
								{
									"name": "Pre requisite",
									"item": [
										{
											"name": "Create a master category",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.collectionVariables.set(\"master15_id\",jsonResponse.result.identifier);\r",
															"console.log(pm.collectionVariables.get(\"master15_id\"));\r",
															"pm.collectionVariables.set(\"master15_node\",jsonResponse.result.node_id);\r",
															"console.log(pm.collectionVariables.get(\"master15_node\"));\r",
															"\r",
															"pm.test(`identifier should be equal to ${pm.collectionVariables.get(\"master15_id\")}`, () => {\r",
															"    pm.expect(jsonResponse.result.identifier).to.eql(`${pm.collectionVariables.get(\"master15_code\")}`);\r",
															"});\r",
															"\r",
															"pm.test(`node_id should be equal to ${pm.collectionVariables.get(\"master15_node\")}`, () => {\r",
															"    pm.expect(jsonResponse.result.node_id).to.eql(`${pm.collectionVariables.get(\"master15_code\")}`);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-Channel-Id",
														"value": "sunbird"
													},
													{
														"key": "Authorization",
														"value": "{{auth_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"category\": {\n            \"name\": \"master\",\n            \"code\": \"{{master15_code}}\",\n            \"targetIdFieldName\": \"targetmasterIds\",\n            \"searchLabelFieldName\": \"se_master\",\n            \"searchIdFieldName\": \"se_master\",\n            \"orgIdFieldName\": \"masterIds\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/framework/v3/category/master/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"category",
														"master",
														"create"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create a framework",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','status', 'err','errmsg');\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"null\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status has string \", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"successful\");\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.result).to.have.all.keys('node_id', 'versionKey');\r",
															"  pm.expect(jsonResponse.result.node_id).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.result.versionKey).to.be.a(\"string\");\r",
															"});\r",
															"\r",
															"pm.collectionVariables.set(\"fw13_node\",jsonResponse.result.node_id);\r",
															"console.log(pm.collectionVariables.get(\"fw13_node\"));\r",
															"\r",
															"pm.test(`node id should be equal to ${pm.collectionVariables.get(\"fw13_node\")}`, () => {\r",
															"    pm.expect(jsonResponse.result.node_id).to.eql(pm.collectionVariables.get(\"fw13_code\"));\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {}
											},
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{auth_token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"description": "(Required) It is the Unique Id to identify the root organisation to which the user belongs",
														"key": "X-Channel-Id",
														"value": "{{X-Channel-Id}}"
													},
													{
														"key": "",
														"value": "",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"framework\": {\n            \"name\": \"{{fw13_name}}\",\n            \"code\": \"{{fw13_code}}\"\n            \n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/framework/v3/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"create"
													]
												},
												"description": "This API is associated with creating a new framework on the Sunbird Platform.\n   - The endpoint for **Create a Framework** is `/framework/v1/create`\n   - It points to knowledge-mw-service - `/v1/framework/create`\n   - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
											},
											"response": [
												{
													"name": "OK ! Successful operation.\"create framework\" operation was successfully executed.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) It is the Unique Id to identify the root organisation to which the user belongs",
																"key": "X-Channel-Id",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"framework\": {\n      \"name\": \"Framework Name\",\n      \"code\": \"dummy_framework\",\n      \"channels\": [\n        {\n          \"identifier\": \"in.ekstep\"\n        }\n      ]\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"create"
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.framework.create\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T09:49:06.794Z\",\n  \"params\": {\n    \"resmsgid\": \"9b5d7ca0-3df1-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": \"9b4a90e0-3df1-11eb-9ff3-67c41480f6aa\",\n    \"status\": \"successful\",\n    \"err\": null,\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"node_id\": \"dummy_framework\",\n    \"versionKey\": \"1607939346678\"\n  }\n}"
												},
												{
													"name": "BAD REQUEST. The \"create framework\" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) It is the Unique Id to identify the root organisation to which the user belongs",
																"key": "X-Channel-Id",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"framework\": {\n      \"name\": \"Framework Name\",\n      \"code\": \"dummy_framework\",\n      \"channels\": [\n        {\n          \"identifier\": \"in.ekstep\"\n        }\n      ]\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"create"
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.framework.create\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T09:50:45.249Z\",\n  \"params\": {\n    \"resmsgid\": \"d60c8710-3df1-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"CONSTRAINT_VALIDATION_FAILED\",\n    \"errmsg\": \"Object already exists with identifier: dummy_framework\"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {}\n}"
												},
												{
													"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) It is the Unique Id to identify the root organisation to which the user belongs",
																"key": "X-Channel-Id",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"framework\": {\n      \"name\": \"Framework Name\",\n      \"code\": \"dummy_framework\",\n      \"channels\": [\n        {\n          \"identifier\": \"in.ekstep\"\n        }\n      ]\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"create"
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Create Framework Category",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','status', 'err','errmsg');\r",
															"pm.expect(jsonResponse.params.resmsgid).to.be.a(\"String\");\r",
															"pm.expect(jsonResponse.params.msgid).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"null\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status has string \", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"successful\");\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.result).to.have.all.keys('identifier', 'versionKey');\r",
															"  pm.expect(jsonResponse.result.identifier).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.result.versionKey).to.be.a(\"string\");\r",
															"});\r",
															"\r",
															"pm.collectionVariables.set(\"fwcat_cat8\",jsonResponse.result.identifier);\r",
															"console.log(pm.collectionVariables.get(\"fwcat_cat8\"));\r",
															"\r",
															"pm.test(`identifier should be equal to ${pm.collectionVariables.get(\"fwcat_cat8\")}`, () => {\r",
															"    pm.expect(jsonResponse.result.identifier).to.eql(`${pm.collectionVariables.get(\"fw13_code\")}_${pm.collectionVariables.get(\"master15_code\")}`);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "X-Channel-Id",
														"value": "{{X-Channel-Id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"request\": {\n    \"category\": {\n      \"name\": \"Board\",\n      \"code\": \"{{master15_code}}\",\n      \"description\":\"Board category\"\n    }\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/framework/v3/category/create?framework={{fw13_code}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"category",
														"create"
													],
													"query": [
														{
															"key": "framework",
															"value": "{{fw13_code}}",
															"description": "(Required) The code of the framework under which category has to be created"
														}
													]
												},
												"description": "This API is associated with creating a category under a framework\n   - The endpoint for **Create Category** is `/framework/v1/category/create`\n   - It points to knowledge-mw-service - `/v1/framework/category/create`\n   - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
											},
											"response": [
												{
													"name": "OK ! Successful operation.\"create category\" operation was successfully executed.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"category\": {\n      \"name\": \"Subject\",\n      \"code\": \"subject\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/category/create?framework=Ut enim offici",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"category",
																"create"
															],
															"query": [
																{
																	"key": "framework",
																	"value": "Ut enim offici"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.category.create\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T19:32:01.754Z\",\n  \"params\": {\n    \"resmsgid\": \"0a10dba0-3e43-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": \"0a05df20-3e43-11eb-9ff3-67c41480f6aa\",\n    \"status\": \"successful\",\n    \"err\": null,\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"node_id\": \"dummy_framework_medium\",\n    \"versionKey\": \"1607974321700\"\n  }\n}"
												},
												{
													"name": "BAD REQUEST. The \"create category\" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"category\": {\n      \"name\": \"Subject\",\n      \"code\": \"subject\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/category/create?framework=Ut enim offici",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"category",
																"create"
															],
															"query": [
																{
																	"key": "framework",
																	"value": "Ut enim offici"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.category.create\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T19:30:50.114Z\",\n  \"params\": {\n    \"resmsgid\": \"df5d7620-3e42-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"CONSTRAINT_VALIDATION_FAILED\",\n    \"errmsg\": \"Object already exists with identifier: dummy_framework_subject\"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {}\n}"
												},
												{
													"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"category\": {\n      \"name\": \"Subject\",\n      \"code\": \"subject\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/category/create?framework=Ut enim offici",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"category",
																"create"
															],
															"query": [
																{
																	"key": "framework",
																	"value": "Ut enim offici"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Create a framework term",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"pm.collectionVariables.set(\"term_id\",jsonResponse.result.identifier);\r",
															"console.log(pm.collectionVariables.get(\"term_id\"));\r",
															"pm.collectionVariables.set(\"term_node\",jsonResponse.result.node_id);\r",
															"console.log(pm.collectionVariables.get(\"term_node\"));\r",
															"\r",
															"pm.test(`identifier should be equal to ${pm.collectionVariables.get(\"term_id\")}`, () => {\r",
															"    pm.expect(jsonResponse.result.identifier).to.eql(`${pm.collectionVariables.get(\"fw13_code\")}_${pm.collectionVariables.get(\"master15_code\")}_${pm.collectionVariables.get(\"t3_term\")}`);\r",
															"});\r",
															"\r",
															"pm.test(`node should be equal to ${pm.collectionVariables.get(\"term_node\")}`, () => {\r",
															"    pm.expect(jsonResponse.result.node_id).to.eql(`${pm.collectionVariables.get(\"fw13_code\")}_${pm.collectionVariables.get(\"master15_code\")}_${pm.collectionVariables.get(\"t3_term\")}`);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "value",
															"value": "{{apiKey}}",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"request\": {\n    \"term\": {\n      \"code\": \"{{t3_term}}\",\n      \"name\": \"English\"\n    }\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/framework/v3/term/create?framework={{fw13_code}}&category={{master15_code}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"framework",
														"v3",
														"term",
														"create"
													],
													"query": [
														{
															"key": "framework",
															"value": "{{fw13_code}}",
															"description": "(Required) Represents the framework in which the term is to be created"
														},
														{
															"key": "category",
															"value": "{{master15_code}}",
															"description": "(Required) Represents the category in which the term is to be created"
														}
													]
												},
												"description": "This API is associated with creating a term under a framework category\n  - The endpoint for **Create Term** is `/framework/v1/term/create`\n  - It points to knowledge-mw-service - `/v1/framework/term/create`\n  - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.\""
											},
											"response": [
												{
													"name": "OK ! Successful operation.\"create term\" operation was successfully executed.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"term\": {\n      \"code\": \"english\",\n      \"name\": \"English\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/term/create?framework=Ut enim offici&category=Ut enim offici",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"term",
																"create"
															],
															"query": [
																{
																	"key": "framework",
																	"value": "Ut enim offici"
																},
																{
																	"key": "category",
																	"value": "Ut enim offici"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.term.create\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T19:44:02.348Z\",\n  \"params\": {\n    \"resmsgid\": \"b792c6c0-3e44-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": \"b783f9b0-3e44-11eb-9ff3-67c41480f6aa\",\n    \"status\": \"successful\",\n    \"err\": null,\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"node_id\": [\n      \"dummy_framework_subject_english\"\n    ]\n  }\n}"
												},
												{
													"name": "BAD REQUEST. The \"create term\" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"term\": {\n      \"code\": \"english\",\n      \"name\": \"English\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/term/create?framework=Ut enim offici&category=Ut enim offici",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"term",
																"create"
															],
															"query": [
																{
																	"key": "framework",
																	"value": "Ut enim offici"
																},
																{
																	"key": "category",
																	"value": "Ut enim offici"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.term.create\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T19:44:49.263Z\",\n  \"params\": {\n    \"resmsgid\": \"d3896ff0-3e44-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"ERR_INVALID_CATEGORY_ID\",\n    \"errmsg\": \"Please provide valid category.\"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {}\n}"
												},
												{
													"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"term\": {\n      \"code\": \"english\",\n      \"name\": \"English\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/term/create?framework=Ut enim offici&category=Ut enim offici",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"term",
																"create"
															],
															"query": [
																{
																	"key": "framework",
																	"value": "Ut enim offici"
																},
																{
																	"key": "category",
																	"value": "Ut enim offici"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									],
									"description": "1. Framework name and code should be updated before each run\n2. Framework categroy should be a subset of master category, i.e., framework category can be created only when it is available in master category\n    \n3. Create a master category with same indentifier before creating the framework category"
								},
								{
									"name": "Positive",
									"item": [
										{
											"name": "Update a valid term for a valid framework and framework category",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"id has string - api.taxonomy.term.update\", function () {\r",
															"    pm.expect(jsonResponse.id).to.be.equal(\"api.taxonomy.term.update\");\r",
															"});\r",
															"pm.test(\"Version is 3.0 \", function () {\r",
															"    pm.expect(jsonResponse.ver).to.be.equal(\"3.0\");\r",
															"});\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','status', 'err','errmsg');\r",
															"pm.expect(jsonResponse.params.resmsgid).to.be.a(\"String\");\r",
															"pm.expect(jsonResponse.params.msgid).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"null\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status has string \", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"successful\");\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.result).to.have.all.keys('identifier', 'versionKey');\r",
															"  pm.expect(jsonResponse.result.identifier).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.result.versionKey).to.be.a(\"string\");\r",
															"});\r",
															"\r",
															"pm.collectionVariables.set(\"term1_id\",jsonResponse.result.identifier);\r",
															"console.log(pm.collectionVariables.get(\"term1_id\"));\r",
															"pm.test(`identifier should be equal to ${pm.collectionVariables.get(\"term1_id\")}`, () => {\r",
															"    pm.expect(jsonResponse.result.identifier).to.eql(`${pm.collectionVariables.get(\"fw13_code\")}_${pm.collectionVariables.get(\"master15_code\")}_${pm.collectionVariables.get(\"t3_term\")}`);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "{{apiKey}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"request\": {\n    \"term\": {\n      \"name\": \"{{term}}\",\n      \"description\": \"{{term}} description updated\"\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{host}}/framework/v3/term/update/{{t3_term}}?framework={{fw13_code}}&category={{master15_code}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"term",
														"update",
														"{{t3_term}}"
													],
													"query": [
														{
															"key": "framework",
															"value": "{{fw13_code}}"
														},
														{
															"key": "category",
															"value": "{{master15_code}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Update an invalid term for a valid framework and framework category",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"pm.test(\"id has string - api.taxonomy.term.update\", function () {\r",
															"    pm.expect(jsonResponse.id).to.be.equal(\"api.taxonomy.term.update\");\r",
															"});\r",
															"pm.test(\"Version is 3.0 \", function () {\r",
															"    pm.expect(jsonResponse.ver).to.be.equal(\"3.0\");\r",
															"});\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','status', 'err','errmsg');\r",
															"pm.expect(jsonResponse.params.resmsgid).to.be.a(\"String\");\r",
															"pm.expect(jsonResponse.params.msgid).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"String\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status has string \", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"failed\");\r",
															"});\r",
															"\r",
															"pm.test(\"err has string \", function () {\r",
															"    pm.expect(jsonResponse.params.err).to.be.equal(\"NOT_FOUND\");\r",
															"});\r",
															"\r",
															"pm.test(`errmsg has string: Error! Node(s) doesn't Exists. | [Invalid Node Id.]: ${pm.collectionVariables.get(\"fw13_code\")}_${pm.collectionVariables.get(\"master15_code\")}_dummy`, function () {\r",
															"    pm.expect(jsonResponse.params.errmsg).to.eql(`Error! Node(s) doesn't Exists. | [Invalid Node Id.]: ${pm.collectionVariables.get(\"fw13_code\")}_${pm.collectionVariables.get(\"master15_code\")}_dummy`);\r",
															"});\r",
															"\r",
															"pm.test(\"responseCode has string \", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.include(\"RESOURCE_NOT_FOUND\");\r",
															"});\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "{{apiKey}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"request\": {\n    \"term\": {\n      \"name\": \"sst\",\n      \"description\": \"sst description updated\"\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{host}}/framework/v3/term/update/dummy?framework={{fw13_code}}&category={{master15_code}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"term",
														"update",
														"dummy"
													],
													"query": [
														{
															"key": "framework",
															"value": "{{fw13_code}}"
														},
														{
															"key": "category",
															"value": "{{master15_code}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Update an valid term for a invalid framework and framework category",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"pm.test(\"id has string - api.taxonomy.term.update\", function () {\r",
															"    pm.expect(jsonResponse.id).to.be.equal(\"api.taxonomy.term.update\");\r",
															"});\r",
															"pm.test(\"Version is 3.0 \", function () {\r",
															"    pm.expect(jsonResponse.ver).to.be.equal(\"3.0\");\r",
															"});\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','status', 'err','errmsg');\r",
															"pm.expect(jsonResponse.params.resmsgid).to.be.a(\"String\");\r",
															"pm.expect(jsonResponse.params.msgid).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"String\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status has string \", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"failed\");\r",
															"});\r",
															"\r",
															"pm.test(\"err has string \", function () {\r",
															"    pm.expect(jsonResponse.params.err).to.be.equal(\"NOT_FOUND\");\r",
															"});\r",
															"\r",
															"pm.test(`errmsg has string: Error! Node(s) doesn't Exists. | [Invalid Node Id.]: dummy_${pm.collectionVariables.get(\"master15_code\")}_${pm.collectionVariables.get(\"t3_term\")}`, function () {\r",
															"    pm.expect(jsonResponse.params.errmsg).to.eql(`Error! Node(s) doesn't Exists. | [Invalid Node Id.]: dummy_${pm.collectionVariables.get(\"master15_code\")}_${pm.collectionVariables.get(\"t3_term\")}`);\r",
															"});\r",
															"\r",
															"pm.test(\"responseCode has string \", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.include(\"RESOURCE_NOT_FOUND\");\r",
															"});\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "{{apiKey}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"request\": {\n    \"term\": {\n      \"name\": \"sst\",\n      \"description\": \"sst description updated\"\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{host}}/framework/v3/term/update/{{t3_term}}?framework=dummy&category={{master15_code}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"term",
														"update",
														"{{t3_term}}"
													],
													"query": [
														{
															"key": "framework",
															"value": "dummy"
														},
														{
															"key": "category",
															"value": "{{master15_code}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Update an valid term for a valid framework and invalid framework category",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"pm.test(\"id has string - api.taxonomy.term.update\", function () {\r",
															"    pm.expect(jsonResponse.id).to.be.equal(\"api.taxonomy.term.update\");\r",
															"});\r",
															"pm.test(\"Version is 3.0 \", function () {\r",
															"    pm.expect(jsonResponse.ver).to.be.equal(\"3.0\");\r",
															"});\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','status', 'err','errmsg');\r",
															"pm.expect(jsonResponse.params.resmsgid).to.be.a(\"String\");\r",
															"pm.expect(jsonResponse.params.msgid).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"String\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status has string \", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"failed\");\r",
															"});\r",
															"\r",
															"pm.test(\"err has string \", function () {\r",
															"    pm.expect(jsonResponse.params.err).to.be.equal(\"NOT_FOUND\");\r",
															"});\r",
															"\r",
															"pm.test(`errmsg has string: Error! Node(s) doesn't Exists. | [Invalid Node Id.]: ${pm.collectionVariables.get(\"fw13_code\")}_dummy_${pm.collectionVariables.get(\"t3_term\")}`, function () {\r",
															"    pm.expect(jsonResponse.params.errmsg).to.eql(`Error! Node(s) doesn't Exists. | [Invalid Node Id.]: ${pm.collectionVariables.get(\"fw13_code\")}_dummy_${pm.collectionVariables.get(\"t3_term\")}`);\r",
															"});\r",
															"\r",
															"pm.test(\"responseCode has string \", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.include(\"RESOURCE_NOT_FOUND\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "{{apiKey}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"request\": {\n    \"term\": {\n      \"name\": \"sst\",\n      \"description\": \"sst description updated\"\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{host}}/framework/v3/term/update/{{t3_term}}?framework={{fw13_code}}&category=dummy",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"term",
														"update",
														"{{t3_term}}"
													],
													"query": [
														{
															"key": "framework",
															"value": "{{fw13_code}}"
														},
														{
															"key": "category",
															"value": "dummy"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Update a valid term for invalid framework and invalid framework category",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"pm.test(\"id has string - api.taxonomy.term.update\", function () {\r",
															"    pm.expect(jsonResponse.id).to.be.equal(\"api.taxonomy.term.update\");\r",
															"});\r",
															"pm.test(\"Version is 3.0 \", function () {\r",
															"    pm.expect(jsonResponse.ver).to.be.equal(\"3.0\");\r",
															"});\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','status', 'err','errmsg');\r",
															"pm.expect(jsonResponse.params.resmsgid).to.be.a(\"String\");\r",
															"pm.expect(jsonResponse.params.msgid).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"String\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status has string \", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"failed\");\r",
															"});\r",
															"\r",
															"pm.test(\"err has string \", function () {\r",
															"    pm.expect(jsonResponse.params.err).to.be.equal(\"NOT_FOUND\");\r",
															"});\r",
															"\r",
															"pm.test(`errmsg has string: Error! Node(s) doesn't Exists. | [Invalid Node Id.]: dummy_dummy_${pm.collectionVariables.get(\"t3_term\")}`, function () {\r",
															"    pm.expect(jsonResponse.params.errmsg).to.eql(`Error! Node(s) doesn't Exists. | [Invalid Node Id.]: dummy_dummy_${pm.collectionVariables.get(\"t3_term\")}`);\r",
															"});\r",
															"\r",
															"pm.test(\"responseCode has string \", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.include(\"RESOURCE_NOT_FOUND\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "{{apiKey}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"request\": {\n    \"term\": {\n      \"name\": \"sst\",\n      \"description\": \"sst description updated\"\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{host}}/framework/v3/term/update/{{t3_term}}?framework=dummy&category=dummy",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"term",
														"update",
														"{{t3_term}}"
													],
													"query": [
														{
															"key": "framework",
															"value": "dummy"
														},
														{
															"key": "category",
															"value": "dummy"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Update a invalid term for invalid framework and invalid framework category",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"pm.test(\"id has string - api.taxonomy.term.update\", function () {\r",
															"    pm.expect(jsonResponse.id).to.be.equal(\"api.taxonomy.term.update\");\r",
															"});\r",
															"pm.test(\"Version is 3.0 \", function () {\r",
															"    pm.expect(jsonResponse.ver).to.be.equal(\"3.0\");\r",
															"});\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','status', 'err','errmsg');\r",
															"pm.expect(jsonResponse.params.resmsgid).to.be.a(\"String\");\r",
															"pm.expect(jsonResponse.params.msgid).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"String\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status has string \", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"failed\");\r",
															"});\r",
															"\r",
															"pm.test(\"err has string \", function () {\r",
															"    pm.expect(jsonResponse.params.err).to.be.equal(\"NOT_FOUND\");\r",
															"});\r",
															"\r",
															"pm.test(`errmsg has string: Error! Node(s) doesn't Exists. | [Invalid Node Id.]: dummy_dummy_dummy`, function () {\r",
															"    pm.expect(jsonResponse.params.errmsg).to.eql(`Error! Node(s) doesn't Exists. | [Invalid Node Id.]: dummy_dummy_dummy`);\r",
															"});\r",
															"\r",
															"pm.test(\"responseCode has string \", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.include(\"RESOURCE_NOT_FOUND\");\r",
															"});\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "{{apiKey}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"request\": {\n    \"term\": {\n      \"name\": \"sst\",\n      \"description\": \"sst description updated\"\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{host}}/framework/v3/term/update/dummy?framework=dummy&category=dummy",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"term",
														"update",
														"dummy"
													],
													"query": [
														{
															"key": "framework",
															"value": "dummy"
														},
														{
															"key": "category",
															"value": "dummy"
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Retire Term",
							"item": [
								{
									"name": "Pre requisite",
									"item": [
										{
											"name": "Create a master category",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.collectionVariables.set(\"master16_id\",jsonResponse.result.identifier);\r",
															"console.log(pm.collectionVariables.get(\"master16_id\"));\r",
															"pm.collectionVariables.set(\"master16_node\",jsonResponse.result.node_id);\r",
															"console.log(pm.collectionVariables.get(\"master16_node\"));\r",
															"\r",
															"pm.test(`identifier should be equal to ${pm.collectionVariables.get(\"master16_id\")}`, () => {\r",
															"    pm.expect(jsonResponse.result.identifier).to.eql(`${pm.collectionVariables.get(\"master16_code\")}`);\r",
															"});\r",
															"\r",
															"pm.test(`node_id should be equal to ${pm.collectionVariables.get(\"master16_node\")}`, () => {\r",
															"    pm.expect(jsonResponse.result.node_id).to.eql(`${pm.collectionVariables.get(\"master16_code\")}`);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-Channel-Id",
														"value": "sunbird"
													},
													{
														"key": "Authorization",
														"value": "{{auth_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"category\": {\n            \"name\": \"master\",\n            \"code\": \"{{master16_code}}\",\n            \"targetIdFieldName\": \"targetmasterIds\",\n            \"searchLabelFieldName\": \"se_master\",\n            \"searchIdFieldName\": \"se_master\",\n            \"orgIdFieldName\": \"masterIds\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/framework/v3/category/master/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"category",
														"master",
														"create"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create a framework",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','status', 'err','errmsg');\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"null\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status has string \", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"successful\");\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.result).to.have.all.keys('node_id', 'versionKey');\r",
															"  pm.expect(jsonResponse.result.node_id).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.result.versionKey).to.be.a(\"string\");\r",
															"});\r",
															"\r",
															"pm.collectionVariables.set(\"fw14_node\",jsonResponse.result.node_id);\r",
															"console.log(pm.collectionVariables.get(\"fw14_node\"));\r",
															"\r",
															"pm.test(`node id should be equal to ${pm.collectionVariables.get(\"fw14_node\")}`, () => {\r",
															"    pm.expect(jsonResponse.result.node_id).to.eql(pm.collectionVariables.get(\"fw14_code\"));\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {}
											},
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{auth_token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"description": "(Required) It is the Unique Id to identify the root organisation to which the user belongs",
														"key": "X-Channel-Id",
														"value": "{{X-Channel-Id}}"
													},
													{
														"key": "",
														"value": "",
														"disabled": true
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"framework\": {\n            \"name\": \"{{fw14_name}}\",\n            \"code\": \"{{fw14_code}}\"\n            \n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/framework/v3/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"create"
													]
												},
												"description": "This API is associated with creating a new framework on the Sunbird Platform.\n   - The endpoint for **Create a Framework** is `/framework/v1/create`\n   - It points to knowledge-mw-service - `/v1/framework/create`\n   - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
											},
											"response": [
												{
													"name": "OK ! Successful operation.\"create framework\" operation was successfully executed.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) It is the Unique Id to identify the root organisation to which the user belongs",
																"key": "X-Channel-Id",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"framework\": {\n      \"name\": \"Framework Name\",\n      \"code\": \"dummy_framework\",\n      \"channels\": [\n        {\n          \"identifier\": \"in.ekstep\"\n        }\n      ]\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"create"
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.framework.create\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T09:49:06.794Z\",\n  \"params\": {\n    \"resmsgid\": \"9b5d7ca0-3df1-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": \"9b4a90e0-3df1-11eb-9ff3-67c41480f6aa\",\n    \"status\": \"successful\",\n    \"err\": null,\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"node_id\": \"dummy_framework\",\n    \"versionKey\": \"1607939346678\"\n  }\n}"
												},
												{
													"name": "BAD REQUEST. The \"create framework\" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) It is the Unique Id to identify the root organisation to which the user belongs",
																"key": "X-Channel-Id",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"framework\": {\n      \"name\": \"Framework Name\",\n      \"code\": \"dummy_framework\",\n      \"channels\": [\n        {\n          \"identifier\": \"in.ekstep\"\n        }\n      ]\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"create"
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.framework.create\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T09:50:45.249Z\",\n  \"params\": {\n    \"resmsgid\": \"d60c8710-3df1-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"CONSTRAINT_VALIDATION_FAILED\",\n    \"errmsg\": \"Object already exists with identifier: dummy_framework\"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {}\n}"
												},
												{
													"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) It is the Unique Id to identify the root organisation to which the user belongs",
																"key": "X-Channel-Id",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"framework\": {\n      \"name\": \"Framework Name\",\n      \"code\": \"dummy_framework\",\n      \"channels\": [\n        {\n          \"identifier\": \"in.ekstep\"\n        }\n      ]\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"create"
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Create Framework Category",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','status', 'err','errmsg');\r",
															"pm.expect(jsonResponse.params.resmsgid).to.be.a(\"String\");\r",
															"pm.expect(jsonResponse.params.msgid).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"null\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status has string \", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"successful\");\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.result).to.have.all.keys('identifier', 'versionKey');\r",
															"  pm.expect(jsonResponse.result.identifier).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.result.versionKey).to.be.a(\"string\");\r",
															"});\r",
															"\r",
															"pm.collectionVariables.set(\"fwcat_cat9\",jsonResponse.result.identifier);\r",
															"console.log(pm.collectionVariables.get(\"fwcat_cat9\"));\r",
															"\r",
															"pm.test(`identifier should be equal to ${pm.collectionVariables.get(\"fwcat_cat9\")}`, () => {\r",
															"    pm.expect(jsonResponse.result.identifier).to.eql(`${pm.collectionVariables.get(\"fw14_code\")}_${pm.collectionVariables.get(\"master16_code\")}`);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "X-Channel-Id",
														"value": "{{X-Channel-Id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"request\": {\n    \"category\": {\n      \"name\": \"Board\",\n      \"code\": \"{{master16_code}}\",\n      \"description\":\"Board category\"\n    }\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/framework/v3/category/create?framework={{fw14_code}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"category",
														"create"
													],
													"query": [
														{
															"key": "framework",
															"value": "{{fw14_code}}",
															"description": "(Required) The code of the framework under which category has to be created"
														}
													]
												},
												"description": "This API is associated with creating a category under a framework\n   - The endpoint for **Create Category** is `/framework/v1/category/create`\n   - It points to knowledge-mw-service - `/v1/framework/category/create`\n   - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
											},
											"response": [
												{
													"name": "OK ! Successful operation.\"create category\" operation was successfully executed.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"category\": {\n      \"name\": \"Subject\",\n      \"code\": \"subject\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/category/create?framework=Ut enim offici",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"category",
																"create"
															],
															"query": [
																{
																	"key": "framework",
																	"value": "Ut enim offici"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.category.create\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T19:32:01.754Z\",\n  \"params\": {\n    \"resmsgid\": \"0a10dba0-3e43-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": \"0a05df20-3e43-11eb-9ff3-67c41480f6aa\",\n    \"status\": \"successful\",\n    \"err\": null,\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"node_id\": \"dummy_framework_medium\",\n    \"versionKey\": \"1607974321700\"\n  }\n}"
												},
												{
													"name": "BAD REQUEST. The \"create category\" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"category\": {\n      \"name\": \"Subject\",\n      \"code\": \"subject\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/category/create?framework=Ut enim offici",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"category",
																"create"
															],
															"query": [
																{
																	"key": "framework",
																	"value": "Ut enim offici"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.category.create\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T19:30:50.114Z\",\n  \"params\": {\n    \"resmsgid\": \"df5d7620-3e42-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"CONSTRAINT_VALIDATION_FAILED\",\n    \"errmsg\": \"Object already exists with identifier: dummy_framework_subject\"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {}\n}"
												},
												{
													"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"category\": {\n      \"name\": \"Subject\",\n      \"code\": \"subject\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/category/create?framework=Ut enim offici",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"category",
																"create"
															],
															"query": [
																{
																	"key": "framework",
																	"value": "Ut enim offici"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Create a framework term",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"pm.collectionVariables.set(\"term2_node\",jsonResponse.result.node_id);\r",
															"console.log(pm.collectionVariables.get(\"term2_node\"));\r",
															"\r",
															"pm.test(`identifier should be equal to ${pm.collectionVariables.get(\"term2_id\")}`, () => {\r",
															"    pm.expect(jsonResponse.result.identifier).to.eql(`${pm.collectionVariables.get(\"fw14_code\")}_${pm.collectionVariables.get(\"master16_code\")}_${pm.collectionVariables.get(\"t4_term\")}`);\r",
															"});\r",
															"\r",
															"pm.test(`node should be equal to ${pm.collectionVariables.get(\"term2_node\")}`, () => {\r",
															"    pm.expect(jsonResponse.result.node_id).to.eql(`${pm.collectionVariables.get(\"fw14_code\")}_${pm.collectionVariables.get(\"master16_code\")}_${pm.collectionVariables.get(\"t4_term\")}`);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "value",
															"value": "{{apiKey}}",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"request\": {\n    \"term\": {\n      \"code\": \"{{t4_term}}\",\n      \"name\": \"English\"\n    }\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/framework/v3/term/create?framework={{fw14_code}}&category={{master16_code}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"framework",
														"v3",
														"term",
														"create"
													],
													"query": [
														{
															"key": "framework",
															"value": "{{fw14_code}}",
															"description": "(Required) Represents the framework in which the term is to be created"
														},
														{
															"key": "category",
															"value": "{{master16_code}}",
															"description": "(Required) Represents the category in which the term is to be created"
														}
													]
												},
												"description": "This API is associated with creating a term under a framework category\n  - The endpoint for **Create Term** is `/framework/v1/term/create`\n  - It points to knowledge-mw-service - `/v1/framework/term/create`\n  - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.\""
											},
											"response": [
												{
													"name": "OK ! Successful operation.\"create term\" operation was successfully executed.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"term\": {\n      \"code\": \"english\",\n      \"name\": \"English\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/term/create?framework=Ut enim offici&category=Ut enim offici",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"term",
																"create"
															],
															"query": [
																{
																	"key": "framework",
																	"value": "Ut enim offici"
																},
																{
																	"key": "category",
																	"value": "Ut enim offici"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.term.create\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T19:44:02.348Z\",\n  \"params\": {\n    \"resmsgid\": \"b792c6c0-3e44-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": \"b783f9b0-3e44-11eb-9ff3-67c41480f6aa\",\n    \"status\": \"successful\",\n    \"err\": null,\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"node_id\": [\n      \"dummy_framework_subject_english\"\n    ]\n  }\n}"
												},
												{
													"name": "BAD REQUEST. The \"create term\" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"term\": {\n      \"code\": \"english\",\n      \"name\": \"English\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/term/create?framework=Ut enim offici&category=Ut enim offici",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"term",
																"create"
															],
															"query": [
																{
																	"key": "framework",
																	"value": "Ut enim offici"
																},
																{
																	"key": "category",
																	"value": "Ut enim offici"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.term.create\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-14T19:44:49.263Z\",\n  \"params\": {\n    \"resmsgid\": \"d3896ff0-3e44-11eb-9ff3-67c41480f6aa\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"ERR_INVALID_CATEGORY_ID\",\n    \"errmsg\": \"Please provide valid category.\"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {}\n}"
												},
												{
													"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.\n Possible media types can be:- \n   - application/json",
																"key": "Content-Type",
																"value": "Ut enim offici"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"term\": {\n      \"code\": \"english\",\n      \"name\": \"English\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/term/create?framework=Ut enim offici&category=Ut enim offici",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"term",
																"create"
															],
															"query": [
																{
																	"key": "framework",
																	"value": "Ut enim offici"
																},
																{
																	"key": "category",
																	"value": "Ut enim offici"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									],
									"description": "1. Framework name and code should be updated before each run\n2. Framework categroy should be a subset of master category, i.e., framework category can be created only when it is available in master category\n    \n3. Create a master category with same indentifier before creating the framework category"
								},
								{
									"name": "Positive",
									"item": [
										{
											"name": "Delete term for valid framework and valid framework category",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"id has string - api.taxonomy.term.retire\", function () {\r",
															"    pm.expect(jsonResponse.id).to.be.equal(\"api.taxonomy.term.retire\");\r",
															"});\r",
															"pm.test(\"Version is 3.0 \", function () {\r",
															"    pm.expect(jsonResponse.ver).to.be.equal(\"3.0\");\r",
															"});\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','status', 'err','errmsg');\r",
															"pm.expect(jsonResponse.params.resmsgid).to.be.a(\"String\");\r",
															"pm.expect(jsonResponse.params.msgid).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"null\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status has string \", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"successful\");\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.result).to.have.all.keys('identifier', 'versionKey');\r",
															"  pm.expect(jsonResponse.result.identifier).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.result.versionKey).to.be.a(\"string\");\r",
															"});\r",
															"\r",
															"pm.collectionVariables.set(\"del_term_id\",jsonResponse.result.identifier);\r",
															"console.log(pm.collectionVariables.get(\"del_term_id\"));\r",
															"\r",
															"pm.test(`identifier should be equal to ${pm.collectionVariables.get(\"del_term_id\")}`, () => {\r",
															"    pm.expect(jsonResponse.result.identifier).to.eql(`${pm.collectionVariables.get(\"fw14_code\")}_${pm.collectionVariables.get(\"master16_code\")}_${pm.collectionVariables.get(\"t4_term\")}`);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-Channel-Id",
														"value": "{{X-Channel-Id}}"
													}
												],
												"url": {
													"raw": "{{host}}/framework/v3/term/retire/{{t4_term}}?framework={{fw14_code}}&category={{master16_code}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"term",
														"retire",
														"{{t4_term}}"
													],
													"query": [
														{
															"key": "framework",
															"value": "{{fw14_code}}"
														},
														{
															"key": "category",
															"value": "{{master16_code}}"
														}
													]
												},
												"description": "This API is associated with searching the existing terms under a category in a framework on Sunbird Platform\n   - The endpoint for **Search Term** is `/framework/v1/term/search`\n   - It points to knowledge-mw-service - `/v1/framework/term/search`\n   - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
											},
											"response": [
												{
													"name": "OK ! Successful operation.\"Search term operation was successfully executed.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {}\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/term/search?framework=Ut enim offici&category=Ut enim offici",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"term",
																"search"
															],
															"query": [
																{
																	"key": "framework",
																	"value": "Ut enim offici"
																},
																{
																	"key": "category",
																	"value": "Ut enim offici"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.term.search\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-17T08:12:44.816Z\",\n  \"params\": {\n    \"resmsgid\": \"a446e900-403f-11eb-9b0c-abcfbdf41bc3\",\n    \"msgid\": \"a4447800-403f-11eb-9b0c-abcfbdf41bc3\",\n    \"status\": \"successful\",\n    \"err\": null,\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"terms\": [\n      {\n        \"associations\": [],\n        \"identifier\": \"dummy_framework_subject_english\",\n        \"lastStatusChangedOn\": \"2020-12-14T19:44:02.260+0000\",\n        \"code\": \"english\",\n        \"consumerId\": \"7411b6bd-89f3-40ec-98d1-229dc64ce77d\",\n        \"channel\": \"in.ekstep\",\n        \"description\": \"English\",\n        \"createdOn\": \"2020-12-14T19:44:02.260+0000\",\n        \"versionKey\": \"1607975299669\",\n        \"children\": [],\n        \"appId\": \"dev.sunbird.portal\",\n        \"name\": \"English\",\n        \"lastUpdatedOn\": \"2020-12-14T19:48:19.669+0000\",\n        \"categories\": [\n          {\n            \"identifier\": \"dummy_framework_subject\",\n            \"name\": \"Subject\",\n            \"objectType\": \"CategoryInstance\",\n            \"relation\": \"hasSequenceMember\",\n            \"description\": \"Updated description\",\n            \"status\": \"Live\"\n          }\n        ],\n        \"category\": \"subject\",\n        \"status\": \"Live\"\n      }\n    ],\n    \"count\": 1\n  }\n}"
												},
												{
													"name": "BAD REQUEST. The \"search term\" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {}\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/term/search?framework=Ut enim offici&category=Ut enim offici",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"term",
																"search"
															],
															"query": [
																{
																	"key": "framework",
																	"value": "Ut enim offici"
																},
																{
																	"key": "category",
																	"value": "Ut enim offici"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.term.search\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-17T08:13:50.811Z\",\n  \"params\": {\n    \"resmsgid\": \"cb9cf2b0-403f-11eb-9b0c-abcfbdf41bc3\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"ERR_INVALID_CATEGORY_ID\",\n    \"errmsg\": \"Please provide valid category.\"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {}\n}"
												},
												{
													"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "Ut enim offici"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {}\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/framework/v1/term/search?framework=Ut enim offici&category=Ut enim offici",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"framework",
																"v1",
																"term",
																"search"
															],
															"query": [
																{
																	"key": "framework",
																	"value": "Ut enim offici"
																},
																{
																	"key": "category",
																	"value": "Ut enim offici"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Delete invalid term for valid framework and valid framework category",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"pm.test(\"id has string - api.taxonomy.term.retire\", function () {\r",
															"    pm.expect(jsonResponse.id).to.be.equal(\"api.taxonomy.term.retire\");\r",
															"});\r",
															"pm.test(\"Version is 3.0 \", function () {\r",
															"    pm.expect(jsonResponse.ver).to.be.equal(\"3.0\");\r",
															"});\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','status', 'err','errmsg');\r",
															"pm.expect(jsonResponse.params.resmsgid).to.be.a(\"String\");\r",
															"pm.expect(jsonResponse.params.msgid).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"String\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status has string \", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"failed\");\r",
															"});\r",
															"\r",
															"pm.test(\"err has string \", function () {\r",
															"    pm.expect(jsonResponse.params.err).to.be.equal(\"NOT_FOUND\");\r",
															"});\r",
															"\r",
															"pm.test(`errmsg has string: Error! Node(s) doesn't Exists. | [Invalid Node Id.]: ${pm.collectionVariables.get(\"fw14_code\")}_${pm.collectionVariables.get(\"master16_code\")}_dummy`, function () {\r",
															"    pm.expect(jsonResponse.params.errmsg).to.eql(`Error! Node(s) doesn't Exists. | [Invalid Node Id.]: ${pm.collectionVariables.get(\"fw14_code\")}_${pm.collectionVariables.get(\"master16_code\")}_dummy`);\r",
															"});\r",
															"\r",
															"pm.test(\"responseCode has string \", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.include(\"RESOURCE_NOT_FOUND\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-Channel-Id",
														"value": "sunbird"
													}
												],
												"url": {
													"raw": "{{host}}/framework/v3/term/retire/dummy?framework={{fw14_code}}&category={{master16_code}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"term",
														"retire",
														"dummy"
													],
													"query": [
														{
															"key": "framework",
															"value": "{{fw14_code}}"
														},
														{
															"key": "category",
															"value": "{{master16_code}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete valid term for invalid framework and invalid framework category",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"pm.test(\"id has string - api.taxonomy.term.retire\", function () {\r",
															"    pm.expect(jsonResponse.id).to.be.equal(\"api.taxonomy.term.retire\");\r",
															"});\r",
															"pm.test(\"Version is 3.0 \", function () {\r",
															"    pm.expect(jsonResponse.ver).to.be.equal(\"3.0\");\r",
															"});\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','status', 'err','errmsg');\r",
															"pm.expect(jsonResponse.params.resmsgid).to.be.a(\"String\");\r",
															"pm.expect(jsonResponse.params.msgid).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"String\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"String\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status has string \", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"failed\");\r",
															"});\r",
															"\r",
															"pm.test(\"err has string \", function () {\r",
															"    pm.expect(jsonResponse.params.err).to.be.equal(\"NOT_FOUND\");\r",
															"});\r",
															"\r",
															"pm.test(`errmsg has string: Error! Node(s) doesn't Exists. | [Invalid Node Id.]: dummy_dummy_${pm.collectionVariables.get(\"t4_term\")}`, function () {\r",
															"    pm.expect(jsonResponse.params.errmsg).to.eql(`Error! Node(s) doesn't Exists. | [Invalid Node Id.]: dummy_dummy_${pm.collectionVariables.get(\"t4_term\")}`);\r",
															"});\r",
															"\r",
															"pm.test(\"responseCode has string \", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.include(\"RESOURCE_NOT_FOUND\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-Channel-Id",
														"value": "{{X-Channel-Id}}"
													}
												],
												"url": {
													"raw": "{{host}}/framework/v3/term/retire/{{t4_term}}?framework=dummy&category=dummy",
													"host": [
														"{{host}}"
													],
													"path": [
														"framework",
														"v3",
														"term",
														"retire",
														"{{t4_term}}"
													],
													"query": [
														{
															"key": "framework",
															"value": "dummy"
														},
														{
															"key": "category",
															"value": "dummy"
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Delete data",
							"item": [
								{
									"name": "Delete master category",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json()\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.collectionVariables.set(\"master13_node\",jsonResponse.result.node_id);\r",
													"console.log(pm.collectionVariables.get(\"master13_node\"));\r",
													"\r",
													"pm.collectionVariables.set(\"master13_id\",jsonResponse.result.node_id);\r",
													"console.log(pm.collectionVariables.get(\"master13_id\"));\r",
													"\r",
													"pm.test(`identifier should be equal to ${pm.collectionVariables.get(\"master13_id\")}`, () => {\r",
													"    pm.expect(jsonResponse.result.identifier).to.eql(`${pm.collectionVariables.get(\"master13_code\")}`);\r",
													"});\r",
													"\r",
													"pm.test(`node_id should be equal to ${pm.collectionVariables.get(\"master13_node\")}`, () => {\r",
													"    pm.expect(jsonResponse.result.node_id).to.eql(`${pm.collectionVariables.get(\"master13_code\")}`);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{auth_token}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Channel-Id",
												"value": "{{X-Channel-Id}}"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{host}}/framework/v3/category/master/retire/{{master13_code}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"framework",
												"v3",
												"category",
												"master",
												"retire",
												"{{master13_code}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete framework",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json()\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"fw11_node\",jsonResponse.result.node_id);\r",
													"console.log(pm.collectionVariables.get(\"fw11_node\"));\r",
													"\r",
													"pm.test(`node id should be equal to ${pm.collectionVariables.get(\"fw11_node\")}`, () => {\r",
													"    pm.expect(jsonResponse.result.node_id).to.eql(pm.collectionVariables.get(\"fw11_code\"));\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "in",
													"value": "header",
													"type": "string"
												},
												{
													"key": "value",
													"value": "{{auth_token}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "X-Channel-Id",
												"value": "{{X-Channel-Id}}",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{host}}/framework/v3/retire/{{fw11_code}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"framework",
												"v3",
												"retire",
												"{{fw11_code}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete framework category",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json()\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"del_fw_catgry1\",jsonResponse.result.identifier);\r",
													"console.log(pm.collectionVariables.get(\"del_fw_catgry1\"));\r",
													"\r",
													"pm.test(`identifier should be equal to ${pm.collectionVariables.get(\"del_fw_catgry1\")}`, () => {\r",
													"    pm.expect(jsonResponse.result.identifier).to.eql(`${pm.collectionVariables.get(\"fw11_code\")}_${pm.collectionVariables.get(\"master13_code\")}`);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Channel-Id",
												"value": "sunbird"
											}
										],
										"url": {
											"raw": "{{host}}/framework/v3/category/retire/{{master13_code}}?framework={{fw11_code}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"framework",
												"v3",
												"category",
												"retire",
												"{{master13_code}}"
											],
											"query": [
												{
													"key": "framework",
													"value": "{{fw11_code}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete term",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json()\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"id has string - api.taxonomy.term.retire\", function () {\r",
													"    pm.expect(jsonResponse.id).to.be.equal(\"api.taxonomy.term.retire\");\r",
													"});\r",
													"pm.test(\"Version is 3.0 \", function () {\r",
													"    pm.expect(jsonResponse.ver).to.be.equal(\"3.0\");\r",
													"});\r",
													"pm.test(\"Verify keys and data type of the response result\", () => {\r",
													"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','status', 'err','errmsg');\r",
													"pm.expect(jsonResponse.params.resmsgid).to.be.a(\"String\");\r",
													"pm.expect(jsonResponse.params.msgid).to.be.a(\"null\");\r",
													"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
													"  pm.expect(jsonResponse.params.err).to.be.a(\"null\");\r",
													"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"null\");\r",
													"});\r",
													"\r",
													"pm.test(\"Status has string \", function () {\r",
													"    pm.expect(jsonResponse.params.status).to.be.equal(\"successful\");\r",
													"});\r",
													"\r",
													"pm.test(\"Verify keys and data type of the response result\", () => {\r",
													"  pm.expect(jsonResponse.result).to.have.all.keys('identifier', 'versionKey');\r",
													"  pm.expect(jsonResponse.result.identifier).to.be.a(\"String\");\r",
													"  pm.expect(jsonResponse.result.versionKey).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"del_term_id1\",jsonResponse.result.identifier);\r",
													"console.log(pm.collectionVariables.get(\"del_term_id1\"));\r",
													"\r",
													"pm.test(`identifier should be equal to ${pm.collectionVariables.get(\"del_term_id1\")}`, () => {\r",
													"    pm.expect(jsonResponse.result.identifier).to.eql(`${pm.collectionVariables.get(\"fw11_code\")}_${pm.collectionVariables.get(\"master13_code\")}_${pm.collectionVariables.get(\"t1_term\")}`);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Channel-Id",
												"value": "{{X-Channel-Id}}"
											}
										],
										"url": {
											"raw": "{{host}}/framework/v3/term/retire/{{t1_term}}?framework={{fw11_code}}&category={{master13_code}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"framework",
												"v3",
												"term",
												"retire",
												"{{t1_term}}"
											],
											"query": [
												{
													"key": "framework",
													"value": "{{fw11_code}}"
												},
												{
													"key": "category",
													"value": "{{master13_code}}"
												}
											]
										},
										"description": "This API is associated with searching the existing terms under a category in a framework on Sunbird Platform\n   - The endpoint for **Search Term** is `/framework/v1/term/search`\n   - It points to knowledge-mw-service - `/v1/framework/term/search`\n   - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
									},
									"response": []
								},
								{
									"name": "Delete master category",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json()\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.collectionVariables.set(\"master14_node\",jsonResponse.result.node_id);\r",
													"console.log(pm.collectionVariables.get(\"master14_node\"));\r",
													"\r",
													"pm.collectionVariables.set(\"master14_id\",jsonResponse.result.node_id);\r",
													"console.log(pm.collectionVariables.get(\"master14_id\"));\r",
													"\r",
													"pm.test(`identifier should be equal to ${pm.collectionVariables.get(\"master14_id\")}`, () => {\r",
													"    pm.expect(jsonResponse.result.identifier).to.eql(`${pm.collectionVariables.get(\"master14_code\")}`);\r",
													"});\r",
													"\r",
													"pm.test(`node_id should be equal to ${pm.collectionVariables.get(\"master14_node\")}`, () => {\r",
													"    pm.expect(jsonResponse.result.node_id).to.eql(`${pm.collectionVariables.get(\"master14_code\")}`);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{auth_token}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Channel-Id",
												"value": "{{X-Channel-Id}}"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{host}}/framework/v3/category/master/retire/{{master14_code}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"framework",
												"v3",
												"category",
												"master",
												"retire",
												"{{master14_code}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete framework",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json()\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"fw12_node\",jsonResponse.result.node_id);\r",
													"console.log(pm.collectionVariables.get(\"fw12_node\"));\r",
													"\r",
													"pm.test(`node id should be equal to ${pm.collectionVariables.get(\"fw12_node\")}`, () => {\r",
													"    pm.expect(jsonResponse.result.node_id).to.eql(pm.collectionVariables.get(\"fw12_code\"));\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "in",
													"value": "header",
													"type": "string"
												},
												{
													"key": "value",
													"value": "{{auth_token}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "X-Channel-Id",
												"value": "{{X-Channel-Id}}",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{host}}/framework/v3/retire/{{fw12_code}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"framework",
												"v3",
												"retire",
												"{{fw12_code}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete framework category",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json()\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"fw_catgry\",jsonResponse.result.identifier);\r",
													"console.log(pm.collectionVariables.get(\"fw_catgry\"));\r",
													"\r",
													"pm.test(`identifier should be equal to ${pm.collectionVariables.get(\"fw_catgry\")}`, () => {\r",
													"    pm.expect(jsonResponse.result.identifier).to.eql(`${pm.collectionVariables.get(\"fw12_code\")}_${pm.collectionVariables.get(\"master14_code\")}`);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Channel-Id",
												"value": "sunbird"
											}
										],
										"url": {
											"raw": "{{host}}/framework/v3/category/retire/{{master14_code}}?framework={{fw12_code}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"framework",
												"v3",
												"category",
												"retire",
												"{{master14_code}}"
											],
											"query": [
												{
													"key": "framework",
													"value": "{{fw12_code}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete term",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json()\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"id has string - api.taxonomy.term.retire\", function () {\r",
													"    pm.expect(jsonResponse.id).to.be.equal(\"api.taxonomy.term.retire\");\r",
													"});\r",
													"pm.test(\"Version is 3.0 \", function () {\r",
													"    pm.expect(jsonResponse.ver).to.be.equal(\"3.0\");\r",
													"});\r",
													"pm.test(\"Verify keys and data type of the response result\", () => {\r",
													"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','status', 'err','errmsg');\r",
													"pm.expect(jsonResponse.params.resmsgid).to.be.a(\"String\");\r",
													"pm.expect(jsonResponse.params.msgid).to.be.a(\"null\");\r",
													"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
													"  pm.expect(jsonResponse.params.err).to.be.a(\"null\");\r",
													"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"null\");\r",
													"});\r",
													"\r",
													"pm.test(\"Status has string \", function () {\r",
													"    pm.expect(jsonResponse.params.status).to.be.equal(\"successful\");\r",
													"});\r",
													"\r",
													"pm.test(\"Verify keys and data type of the response result\", () => {\r",
													"  pm.expect(jsonResponse.result).to.have.all.keys('identifier', 'versionKey');\r",
													"  pm.expect(jsonResponse.result.identifier).to.be.a(\"String\");\r",
													"  pm.expect(jsonResponse.result.versionKey).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"del_term_id2\",jsonResponse.result.identifier);\r",
													"console.log(pm.collectionVariables.get(\"del_term_id2\"));\r",
													"\r",
													"pm.test(`identifier should be equal to ${pm.collectionVariables.get(\"del_term_id2\")}`, () => {\r",
													"    pm.expect(jsonResponse.result.identifier).to.eql(`${pm.collectionVariables.get(\"fw12_code\")}_${pm.collectionVariables.get(\"master14_code\")}_${pm.collectionVariables.get(\"t2_term\")}`);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Channel-Id",
												"value": "{{X-Channel-Id}}"
											}
										],
										"url": {
											"raw": "{{host}}/framework/v3/term/retire/{{t2_term}}?framework={{fw12_code}}&category={{master14_code}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"framework",
												"v3",
												"term",
												"retire",
												"{{t2_term}}"
											],
											"query": [
												{
													"key": "framework",
													"value": "{{fw12_code}}"
												},
												{
													"key": "category",
													"value": "{{master14_code}}"
												}
											]
										},
										"description": "This API is associated with searching the existing terms under a category in a framework on Sunbird Platform\n   - The endpoint for **Search Term** is `/framework/v1/term/search`\n   - It points to knowledge-mw-service - `/v1/framework/term/search`\n   - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
									},
									"response": []
								},
								{
									"name": "Delete master category",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json()\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.collectionVariables.set(\"master15_node\",jsonResponse.result.node_id);\r",
													"console.log(pm.collectionVariables.get(\"master15_node\"));\r",
													"\r",
													"pm.collectionVariables.set(\"master15_id\",jsonResponse.result.node_id);\r",
													"console.log(pm.collectionVariables.get(\"master15_id\"));\r",
													"\r",
													"pm.test(`identifier should be equal to ${pm.collectionVariables.get(\"master15_id\")}`, () => {\r",
													"    pm.expect(jsonResponse.result.identifier).to.eql(`${pm.collectionVariables.get(\"master15_code\")}`);\r",
													"});\r",
													"\r",
													"pm.test(`node_id should be equal to ${pm.collectionVariables.get(\"master15_node\")}`, () => {\r",
													"    pm.expect(jsonResponse.result.node_id).to.eql(`${pm.collectionVariables.get(\"master15_code\")}`);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{auth_token}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Channel-Id",
												"value": "{{X-Channel-Id}}"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{host}}/framework/v3/category/master/retire/{{master15_code}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"framework",
												"v3",
												"category",
												"master",
												"retire",
												"{{master15_code}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete framework",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json()\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"fw13_node\",jsonResponse.result.node_id);\r",
													"console.log(pm.collectionVariables.get(\"fw13_node\"));\r",
													"\r",
													"pm.test(`node id should be equal to ${pm.collectionVariables.get(\"fw13_node\")}`, () => {\r",
													"    pm.expect(jsonResponse.result.node_id).to.eql(pm.collectionVariables.get(\"fw13_code\"));\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "in",
													"value": "header",
													"type": "string"
												},
												{
													"key": "value",
													"value": "{{auth_token}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "X-Channel-Id",
												"value": "{{X-Channel-Id}}",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{host}}/framework/v3/retire/{{fw13_code}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"framework",
												"v3",
												"retire",
												"{{fw13_code}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete framework category",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json()\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"fw_catgry1\",jsonResponse.result.identifier);\r",
													"console.log(pm.collectionVariables.get(\"fw_catgry1\"));\r",
													"\r",
													"pm.test(`identifier should be equal to ${pm.collectionVariables.get(\"fw_catgry1\")}`, () => {\r",
													"    pm.expect(jsonResponse.result.identifier).to.eql(`${pm.collectionVariables.get(\"fw13_code\")}_${pm.collectionVariables.get(\"master15_code\")}`);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Channel-Id",
												"value": "sunbird"
											}
										],
										"url": {
											"raw": "{{host}}/framework/v3/category/retire/{{master15_code}}?framework={{fw13_code}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"framework",
												"v3",
												"category",
												"retire",
												"{{master15_code}}"
											],
											"query": [
												{
													"key": "framework",
													"value": "{{fw13_code}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete term",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json()\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"id has string - api.taxonomy.term.retire\", function () {\r",
													"    pm.expect(jsonResponse.id).to.be.equal(\"api.taxonomy.term.retire\");\r",
													"});\r",
													"pm.test(\"Version is 3.0 \", function () {\r",
													"    pm.expect(jsonResponse.ver).to.be.equal(\"3.0\");\r",
													"});\r",
													"pm.test(\"Verify keys and data type of the response result\", () => {\r",
													"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','status', 'err','errmsg');\r",
													"pm.expect(jsonResponse.params.resmsgid).to.be.a(\"String\");\r",
													"pm.expect(jsonResponse.params.msgid).to.be.a(\"null\");\r",
													"  pm.expect(jsonResponse.params.status).to.be.a(\"String\");\r",
													"  pm.expect(jsonResponse.params.err).to.be.a(\"null\");\r",
													"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"null\");\r",
													"});\r",
													"\r",
													"pm.test(\"Status has string \", function () {\r",
													"    pm.expect(jsonResponse.params.status).to.be.equal(\"successful\");\r",
													"});\r",
													"\r",
													"pm.test(\"Verify keys and data type of the response result\", () => {\r",
													"  pm.expect(jsonResponse.result).to.have.all.keys('identifier', 'versionKey');\r",
													"  pm.expect(jsonResponse.result.identifier).to.be.a(\"String\");\r",
													"  pm.expect(jsonResponse.result.versionKey).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"del_term_id3\",jsonResponse.result.identifier);\r",
													"console.log(pm.collectionVariables.get(\"del_term_id3\"));\r",
													"\r",
													"pm.test(`identifier should be equal to ${pm.collectionVariables.get(\"del_term_id3\")}`, () => {\r",
													"    pm.expect(jsonResponse.result.identifier).to.eql(`${pm.collectionVariables.get(\"fw13_code\")}_${pm.collectionVariables.get(\"master15_code\")}_${pm.collectionVariables.get(\"t3_term\")}`);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Channel-Id",
												"value": "{{X-Channel-Id}}"
											}
										],
										"url": {
											"raw": "{{host}}/framework/v3/term/retire/{{t3_term}}?framework={{fw13_code}}&category={{master15_code}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"framework",
												"v3",
												"term",
												"retire",
												"{{t3_term}}"
											],
											"query": [
												{
													"key": "framework",
													"value": "{{fw13_code}}"
												},
												{
													"key": "category",
													"value": "{{master15_code}}"
												}
											]
										},
										"description": "This API is associated with searching the existing terms under a category in a framework on Sunbird Platform\n   - The endpoint for **Search Term** is `/framework/v1/term/search`\n   - It points to knowledge-mw-service - `/v1/framework/term/search`\n   - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
									},
									"response": []
								},
								{
									"name": "Delete master category",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json()\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.collectionVariables.set(\"master15_node\",jsonResponse.result.node_id);\r",
													"console.log(pm.collectionVariables.get(\"master15_node\"));\r",
													"\r",
													"pm.collectionVariables.set(\"master16_id\",jsonResponse.result.node_id);\r",
													"console.log(pm.collectionVariables.get(\"master16_id\"));\r",
													"\r",
													"pm.test(`identifier should be equal to ${pm.collectionVariables.get(\"master16_id\")}`, () => {\r",
													"    pm.expect(jsonResponse.result.identifier).to.eql(`${pm.collectionVariables.get(\"master16_code\")}`);\r",
													"});\r",
													"\r",
													"pm.test(`node_id should be equal to ${pm.collectionVariables.get(\"master16_node\")}`, () => {\r",
													"    pm.expect(jsonResponse.result.node_id).to.eql(`${pm.collectionVariables.get(\"master16_code\")}`);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{auth_token}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Channel-Id",
												"value": "{{X-Channel-Id}}"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{host}}/framework/v3/category/master/retire/{{master16_code}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"framework",
												"v3",
												"category",
												"master",
												"retire",
												"{{master16_code}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete framework",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json()\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"fw14_node\",jsonResponse.result.node_id);\r",
													"console.log(pm.collectionVariables.get(\"fw14_node\"));\r",
													"\r",
													"pm.test(`node id should be equal to ${pm.collectionVariables.get(\"fw14_node\")}`, () => {\r",
													"    pm.expect(jsonResponse.result.node_id).to.eql(pm.collectionVariables.get(\"fw14_code\"));\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "in",
													"value": "header",
													"type": "string"
												},
												{
													"key": "value",
													"value": "{{auth_token}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "X-Channel-Id",
												"value": "{{X-Channel-Id}}",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{host}}/framework/v3/retire/{{fw14_code}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"framework",
												"v3",
												"retire",
												"{{fw14_code}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete framework category",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json()\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"fw_catgry3\",jsonResponse.result.identifier);\r",
													"console.log(pm.collectionVariables.get(\"fw_catgry3\"));\r",
													"\r",
													"pm.test(`identifier should be equal to ${pm.collectionVariables.get(\"fw_catgry3\")}`, () => {\r",
													"    pm.expect(jsonResponse.result.identifier).to.eql(`${pm.collectionVariables.get(\"fw14_code\")}_${pm.collectionVariables.get(\"master16_code\")}`);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Channel-Id",
												"value": "sunbird"
											}
										],
										"url": {
											"raw": "{{host}}/framework/v3/category/retire/{{master16_code}}?framework={{fw14_code}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"framework",
												"v3",
												"category",
												"retire",
												"{{master16_code}}"
											],
											"query": [
												{
													"key": "framework",
													"value": "{{fw14_code}}"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"description": "Pre requisite:\n\n1. Master category should be available before creating framework category\n2. Framework category, framework should be available before creating framework term\n    \n3. Master category, framework and framework category should be updated before running the collection (in the pre requisite folder as well)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"//Scenario-1",
									"pm.collectionVariables.set(\"master13_code\", \"master13_cat_4\");",
									"pm.collectionVariables.set(\"fw11_name\", \"fw11_name\");",
									"pm.collectionVariables.set(\"fw11_code\", \"fw11_code4\");",
									"pm.collectionVariables.set(\"t1_term\", \"tm1_term04\");",
									"//Scenario-2",
									"pm.collectionVariables.set(\"master14_code\", \"master14_cat_3\");",
									"pm.collectionVariables.set(\"fw12_name\", \"fw12_name\");",
									"pm.collectionVariables.set(\"fw12_code\", \"fw12_code3\");",
									"pm.collectionVariables.set(\"t2_term\", \"tm2_term04\");",
									"//Scenario-3",
									"pm.collectionVariables.set(\"master15_code\", \"master15_cat_4\");",
									"pm.collectionVariables.set(\"fw13_name\", \"fw13_name\");",
									"pm.collectionVariables.set(\"fw13_code\", \"fw13_code4\");",
									"pm.collectionVariables.set(\"t3_term\", \"tm3_term05\");",
									"//Scenario-4",
									"pm.collectionVariables.set(\"master16_code\", \"master16_cat_3\");",
									"pm.collectionVariables.set(\"fw14_name\", \"fw14_name\");",
									"pm.collectionVariables.set(\"fw14_code\", \"fw14_code3\");",
									"pm.collectionVariables.set(\"t4_term\", \"tm4_term03\");"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"description": "Pre requisite:\n\n- Framework name should be updated before runnng the collection (in the prequisite folder as well)\n- Framework category should be updated before running the collection (in the pre requisite folder as well)\n- Master category should be updated before running the collection (in the pre requisite folder as well)\n- Framework term should be updated before running the collection (in the pre requisite folder as well)"
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://staging.open-sunbird.org/api",
			"type": "string"
		},
		{
			"key": "code",
			"value": "Ut enim offici",
			"type": "any"
		},
		{
			"key": "name",
			"value": ""
		},
		{
			"key": "name_fw",
			"value": ""
		},
		{
			"key": "code_fw",
			"value": ""
		},
		{
			"key": "name1",
			"value": ""
		},
		{
			"key": "code1",
			"value": ""
		},
		{
			"key": "framework",
			"value": ""
		},
		{
			"key": "channel_id",
			"value": ""
		},
		{
			"key": "fwcat_cat1",
			"value": ""
		},
		{
			"key": "fw5_name",
			"value": ""
		},
		{
			"key": "fw5_code",
			"value": ""
		},
		{
			"key": "fw5_node",
			"value": ""
		},
		{
			"key": "master6_code",
			"value": ""
		},
		{
			"key": "master6_id",
			"value": ""
		},
		{
			"key": "master6_node",
			"value": ""
		},
		{
			"key": "copy_fw",
			"value": ""
		},
		{
			"key": "copy_node",
			"value": ""
		},
		{
			"key": "master7_code",
			"value": ""
		},
		{
			"key": "master7_id",
			"value": ""
		},
		{
			"key": "master7_node",
			"value": ""
		},
		{
			"key": "fw6_name",
			"value": ""
		},
		{
			"key": "fw6_code",
			"value": ""
		},
		{
			"key": "fw6_node",
			"value": ""
		},
		{
			"key": "fwcat_cat2",
			"value": ""
		},
		{
			"key": "fw4_node",
			"value": ""
		},
		{
			"key": "fw4_id",
			"value": ""
		},
		{
			"key": "fw4_name",
			"value": ""
		},
		{
			"key": "fw4_code",
			"value": ""
		},
		{
			"key": "fw_catgry",
			"value": ""
		},
		{
			"key": "fw1_node",
			"value": ""
		},
		{
			"key": "fw2_node",
			"value": ""
		},
		{
			"key": "fw3_node",
			"value": ""
		},
		{
			"key": "fw1_name",
			"value": ""
		},
		{
			"key": "fw1_code",
			"value": ""
		},
		{
			"key": "fw2_name",
			"value": ""
		},
		{
			"key": "fw2_code",
			"value": ""
		},
		{
			"key": "fw3_name",
			"value": ""
		},
		{
			"key": "fw3_code",
			"value": ""
		},
		{
			"key": "master_code",
			"value": ""
		},
		{
			"key": "master2_code",
			"value": ""
		},
		{
			"key": "master3_code",
			"value": ""
		},
		{
			"key": "master4_code",
			"value": ""
		},
		{
			"key": "master5_code",
			"value": ""
		},
		{
			"key": "master_id",
			"value": ""
		},
		{
			"key": "master_node",
			"value": ""
		},
		{
			"key": "master3_id",
			"value": ""
		},
		{
			"key": "master3_node",
			"value": ""
		},
		{
			"key": "master4_id",
			"value": ""
		},
		{
			"key": "master4_node",
			"value": ""
		},
		{
			"key": "master5_id",
			"value": ""
		},
		{
			"key": "master5_node",
			"value": ""
		},
		{
			"key": "master2_id",
			"value": ""
		},
		{
			"key": "master2_node",
			"value": ""
		},
		{
			"key": "master8_code",
			"value": ""
		},
		{
			"key": "fw7_name",
			"value": ""
		},
		{
			"key": "fw7_code",
			"value": ""
		},
		{
			"key": "master9_code",
			"value": ""
		},
		{
			"key": "master10_code",
			"value": ""
		},
		{
			"key": "fw8_name",
			"value": ""
		},
		{
			"key": "fw8_code",
			"value": ""
		},
		{
			"key": "master11_code",
			"value": ""
		},
		{
			"key": "fw9_name",
			"value": ""
		},
		{
			"key": "fw9_code",
			"value": ""
		},
		{
			"key": "master12_code",
			"value": ""
		},
		{
			"key": "fw10_name",
			"value": ""
		},
		{
			"key": "fw10_code",
			"value": ""
		},
		{
			"key": "master8_id",
			"value": ""
		},
		{
			"key": "master8_node",
			"value": ""
		},
		{
			"key": "fw7_node",
			"value": ""
		},
		{
			"key": "master9_id",
			"value": ""
		},
		{
			"key": "master9_node",
			"value": ""
		},
		{
			"key": "master10_id",
			"value": ""
		},
		{
			"key": "master10_node",
			"value": ""
		},
		{
			"key": "fw8_node",
			"value": ""
		},
		{
			"key": "fwcat_cat3",
			"value": ""
		},
		{
			"key": "master11_id",
			"value": ""
		},
		{
			"key": "master11_node",
			"value": ""
		},
		{
			"key": "fw9_node",
			"value": ""
		},
		{
			"key": "fwcat_cat4",
			"value": ""
		},
		{
			"key": "master12_id",
			"value": ""
		},
		{
			"key": "master12_node",
			"value": ""
		},
		{
			"key": "identifier",
			"value": ""
		},
		{
			"key": "fw10_node",
			"value": ""
		},
		{
			"key": "fwcat_cat5",
			"value": ""
		},
		{
			"key": "master13_code",
			"value": ""
		},
		{
			"key": "fw11_name",
			"value": ""
		},
		{
			"key": "fw11_code",
			"value": ""
		},
		{
			"key": "t1_term",
			"value": ""
		},
		{
			"key": "master14_code",
			"value": ""
		},
		{
			"key": "fw12_name",
			"value": ""
		},
		{
			"key": "fw12_code",
			"value": ""
		},
		{
			"key": "t2_term",
			"value": ""
		},
		{
			"key": "master15_code",
			"value": ""
		},
		{
			"key": "fw13_name",
			"value": ""
		},
		{
			"key": "fw13_code",
			"value": ""
		},
		{
			"key": "t3_term",
			"value": ""
		},
		{
			"key": "master16_code",
			"value": ""
		},
		{
			"key": "fw14_name",
			"value": ""
		},
		{
			"key": "fw14_code",
			"value": ""
		},
		{
			"key": "t4_term",
			"value": ""
		},
		{
			"key": "master13_id",
			"value": ""
		},
		{
			"key": "master13_node",
			"value": ""
		},
		{
			"key": "fw11_node",
			"value": ""
		},
		{
			"key": "fwcat_cat6",
			"value": ""
		},
		{
			"key": "term_id",
			"value": ""
		},
		{
			"key": "term_node",
			"value": ""
		},
		{
			"key": "master14_id",
			"value": ""
		},
		{
			"key": "master14_node",
			"value": ""
		},
		{
			"key": "fw12_node",
			"value": ""
		},
		{
			"key": "fwcat_cat7",
			"value": ""
		},
		{
			"key": "master15_id",
			"value": ""
		},
		{
			"key": "master15_node",
			"value": ""
		},
		{
			"key": "fw13_node",
			"value": ""
		},
		{
			"key": "fwcat_cat8",
			"value": ""
		},
		{
			"key": "term1_id",
			"value": ""
		},
		{
			"key": "master16_id",
			"value": ""
		},
		{
			"key": "master16_node",
			"value": ""
		},
		{
			"key": "fw14_node",
			"value": ""
		},
		{
			"key": "fwcat_cat9",
			"value": ""
		},
		{
			"key": "term2_node",
			"value": ""
		},
		{
			"key": "del_term_id",
			"value": ""
		},
		{
			"key": "del_fw_catgry1",
			"value": ""
		},
		{
			"key": "del_term_id1",
			"value": ""
		},
		{
			"key": "del_term_id2",
			"value": ""
		},
		{
			"key": "fw_catgry1",
			"value": ""
		},
		{
			"key": "del_term_id3",
			"value": ""
		},
		{
			"key": "fw_catgry3",
			"value": ""
		}
	]
}