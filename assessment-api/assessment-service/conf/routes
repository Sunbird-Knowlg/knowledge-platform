# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~
GET		  /health						    controllers.HealthController.health
GET       /service/health                   controllers.HealthController.serviceHealth

# ItemSet API's
POST      /itemset/v3/create                controllers.v3.ItemSetController.create
GET       /itemset/v3/read/:identifier      controllers.v3.ItemSetController.read(identifier:String, fields:Option[String])
PATCH     /itemset/v3/update/:identifier    controllers.v3.ItemSetController.update(identifier:String)
POST      /itemset/v3/review/:identifier    controllers.v3.ItemSetController.review(identifier:String)
DELETE    /itemset/v3/retire/:identifier    controllers.v3.ItemSetController.retire(identifier:String)

# Question API's
POST      /question/v4/create                     controllers.v4.QuestionController.create
GET       /question/v4/read/:identifier           controllers.v4.QuestionController.read(identifier:String, mode:Option[String], fields:Option[String])
GET       /question/v4/private/read/:identifier   controllers.v4.QuestionController.privateRead(identifier:String, mode:Option[String], fields:Option[String])
PATCH     /question/v4/update/:identifier         controllers.v4.QuestionController.update(identifier:String)
POST      /question/v4/review/:identifier         controllers.v4.QuestionController.review(identifier:String)
POST      /question/v4/publish/:identifier        controllers.v4.QuestionController.publish(identifier:String)
DELETE    /question/v4/retire/:identifier         controllers.v4.QuestionController.retire(identifier:String)
POST      /question/v4/import                     controllers.v4.QuestionController.importQuestion()
PATCH     /question/v4/system/update/:identifier  controllers.v4.QuestionController.systemUpdate(identifier:String)
POST      /question/v4/list                       controllers.v4.QuestionController.list(fields:Option[String])
POST      /question/v4/reject/:identifier         controllers.v4.QuestionController.reject(identifier:String)
POST      /question/v4/copy/:identifier           controllers.v4.QuestionController.copy(identifier:String, mode:Option[String])

# QuestionSet API's
POST      /questionset/v4/create                     controllers.v4.QuestionSetController.create
GET       /questionset/v4/read/:identifier           controllers.v4.QuestionSetController.read(identifier:String, mode:Option[String], fields:Option[String])
GET       /questionset/v4/private/read/:identifier   controllers.v4.QuestionSetController.privateRead(identifier:String, mode:Option[String], fields:Option[String])
PATCH     /questionset/v4/update/:identifier         controllers.v4.QuestionSetController.update(identifier:String)
POST      /questionset/v4/review/:identifier         controllers.v4.QuestionSetController.review(identifier:String)
POST      /questionset/v4/publish/:identifier        controllers.v4.QuestionSetController.publish(identifier:String)
DELETE    /questionset/v4/retire/:identifier         controllers.v4.QuestionSetController.retire(identifier:String)
PATCH     /questionset/v4/add                        controllers.v4.QuestionSetController.add
DELETE    /questionset/v4/remove                     controllers.v4.QuestionSetController.remove
PATCH     /questionset/v4/hierarchy/update           controllers.v4.QuestionSetController.updateHierarchy
GET       /questionset/v4/hierarchy/:identifier      controllers.v4.QuestionSetController.getHierarchy(identifier:String, mode:Option[String])
POST      /questionset/v4/reject/:identifier         controllers.v4.QuestionSetController.reject(identifier:String)
POST      /questionset/v4/import                     controllers.v4.QuestionSetController.importQuestionSet()
PATCH     /questionset/v4/system/update/:identifier  controllers.v4.QuestionSetController.systemUpdate(identifier:String)
POST      /questionset/v4/copy/:identifier           controllers.v4.QuestionSetController.copy(identifier:String, mode:Option[String], type:String?="deep")