# This is the main configuration file for the application.
# https://www.playframework.com/documentation/latest/ConfigFile
# ~~~~~

## Akka
# https://www.playframework.com/documentation/latest/JavaAkka#Configuration
# ~~~~~
akka {
  #loggers =["akka.event.Logging$DefaultLogger"]
  #log-config-on-start = true
}

## Secret key
# http://www.playframework.com/documentation/latest/ApplicationSecret
# ~~~~~
#play.crypto.secret = "changeme"


## Internationalisation
# https://www.playframework.com/documentation/latest/JavaI18N
# ~~~~~
play.i18n {
  # The application languages
  langs = [ "en" ]
}

## Play HTTP settings
# ~~~~~
play.http {
  ## Router
  # https://www.playframework.com/documentation/latest/JavaRouting
  # https://www.playframework.com/documentation/latest/ScalaRouting
  # ~~~~~
  # Define the Router object to use for this application.
  # This router will be looked up first when the application is starting up,
  # so make sure this is the entry point.
  # Furthermore, it's assumed your route file is named properly.
  # So for an application router like `my.application.Router`,
  # you may need to define a router file `conf/my.application.routes`.
  # Default to Routes in the root package (aka "apps" folder) (and conf/routes)
  #router = my.application.Router
  #TO allow more data in request body
  parser.maxDiskBuffer=50MB
  parser.maxMemoryBuffer=50MB
}

## Netty Provider
# ~~~~~
play.server.netty {
  # If you run Play on Linux, you can use Netty's native socket transport
  # for higher performance with less garbage.
  #transport = "native"
  maxChunkSize = 30000000
}

## WS (HTTP Client)
# ~~~~~
libraryDependencies += javaWs

## Cache
# https://www.playframework.com/documentation/latest/JavaCache
# https://www.playframework.com/documentation/latest/ScalaCache
# ~~~~~
# Play comes with an integrated cache API that can reduce the operational
# overhead of repeated requests. You must enable this by adding to build.sbt:
#
libraryDependencies += cache
#
play.cache {
  # If you want to bind several caches, you can bind the individually
  #bindCaches = ["db-cache", "user-cache", "session-cache"]
}

//play.http.filters= filters.HealthCheckFilter

# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/),
# by providing an application-logger.xml file in the conf directory.

# Root logger:
#logger.root=ERROR

# Logger used by the framework:
#logger.play=INFO

# Logger provided to your application:
#logger.application=DEBUG

# APP Specific config
# ~~~~~
# Application specific configurations can be provided here
application.global=Global

play.http.parser.maxMemoryBuffer = 900000K
play.http.parser.maxDiskBuffer = 900000K

play.server.http.port = 9000
# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/),
# by providing an application-logger.xml file in the conf directory.

# Root logger:
logger.root=ERROR

# Logger used by the framework:
logger.play=INFO

# Logger provided to your application:
logger.application=DEBUG

# APP Specific config
# ~~~~~
# Application specific configurations can be provided here

# Cache-Manager Configuration
cache.type="redis"


search.es_conn_info="{{ .Values.es_connection }}"
search.fields.query=["name^100","title^100","lemma^100","code^100","tags^100","question^100","domain","subject","description^10","keywords^25","ageGroup^10","filter^10","theme^10","genre^10","objects^25","contentType^100","language^200","teachingMode^25","skills^10","learningObjective^10","curriculum^100","gradeLevel^100","developer^100","attributions^10","owner^50","text","words","releaseNotes","body"]
search.fields.date=["lastUpdatedOn","createdOn","versionDate","lastSubmittedOn","lastPublishedOn"]
search.batch.size=500
search.connection.timeout=30

#Top N Config for Search Telemetry
telemetry.search.topn=5
telemetry_env=dev
installation.id=ekstep

# Configuration for default channel ID
channel.default="in.ekstep"

# Redis Configuration
redis.host="{{ .Values.redis_connection}}"
redis.port=6379
redis.maxConnections=128

# DIAL Code Configuration
dialcode.keyspace.name="{{ .Values.dialcode_keyspace_name }}"
dialcode.keyspace.table="{{ .Values.dialcode_keyspace_table }}"
dialcode.max_count=1000

# System Configuration
system.config.keyspace.name="{{ .Values.system_config_keyspace_name}}"
system.config.table="{{ .Values.system_config_table}}"

#Publisher Configuration
publisher.keyspace.name="{{ .Values.system_config_table}}"
publisher.keyspace.table="{{ .Values.publisher_keyspace_table}}"

#DIAL Code Generator Configuration
dialcode.strip.chars="0"
dialcode.length=6.0
dialcode.large.prime_number=1679979167

#DIAL Code ElasticSearch Configuration
dialcode.index=true
dialcode.object_type="{{ .Values.dialocode_object_type}}"

# Cassandra Configuration
cassandra.lp.connection="{{ .Values.cassandra_connection }}"
cassandra.lpa.connection="{{ .Values.cassandra_connection }}"


# Consistency Level for Multi Node Cassandra cluster
#cassandra.lp.consistency.level=QUORUM

#Kafka Configuration
kafka {
  urls = "{{ .Values.kafka_connection}}"
  topic {
    send_enable = false
    graph_event = "{{ .Values.graph_event}}"
  }
}

jsonld {
    basePath = "https://sunbirdstagingpublic.blob.core.windows.net/sunbird-dial-staging/jsonld-schema/local"
    type = "sbed"
    localPath = "/tmp"
    ttl = 43200
    sb_schema = ["http://store.knowlg.sunbird.org/dial/specs/sbed/schema.jsonld"]
}

dial_id =  "https://dev.sunbirded.org/dial/{dialcode}"
dial_type = "https://dev.sunbirded.org/ns/"

