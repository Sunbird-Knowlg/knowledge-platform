# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~
GET		  /health						    controllers.HealthController.health
GET       /service/health                   controllers.HealthController.serviceHealth

# Content APIs
POST      /content/v3/create                controllers.v3.ContentController.create
PATCH     /content/v3/update/:identifier    controllers.v3.ContentController.update(identifier:String)
GET       /content/v3/read/:identifier      controllers.v3.ContentController.read(identifier:String, mode:Option[String], fields:Option[String])
POST      /content/v3/upload/url/:identifier     controllers.v3.ContentController.uploadPreSigned(identifier:String, type: Option[String])
POST      /content/v3/upload/:identifier         controllers.v3.ContentController.upload(identifier:String, fileFormat: Option[String], validation: Option[String])
POST      /content/v3/copy/:identifier           controllers.v3.ContentController.copy(identifier:String, mode:Option[String], type:String ?= "deep")
POST     /content/v3/dialcode/link               controllers.v3.ContentController.linkDialCode()
POST     /content/v3/import                 controllers.v3.ContentController.importContent()

# Content APIs - with mock response
POST     /content/v3/flag/:identifier           controllers.v3.ContentController.flag(identifier:String)
POST     /content/v3/bundle                     controllers.v3.ContentController.bundle
POST     /content/v3/flag/accept/:identifier    controllers.v3.ContentController.acceptFlag(identifier:String)
POST     /content/v3/flag/reject/:identifier    controllers.v3.ContentController.rejectFlag(identifier:String)
POST     /content/v3/publish/:identifier        controllers.v3.ContentController.publish(identifier:String)
POST     /content/v3/public/publish/:identifier controllers.v3.ContentController.publish(identifier:String)
POST     /content/v3/review/:identifier         controllers.v3.ContentController.review(identifier:String)
DELETE   /content/v3/discard/:identifier        controllers.v3.ContentController.discard(identifier:String)
DELETE   /content/v3/retire/:identifier         controllers.v3.ContentController.retire(identifier:String)
POST     /content/v3/dialcode/reserve/:identifier controllers.v3.ContentController.reserveDialCode(identifier:String)
PATCH    /content/v3/dialcode/release/:identifier controllers.v3.ContentController.releaseDialcodes(identifier:String)
POST     /content/v3/reject/:identifier           controllers.v3.ContentController.rejectContent(identifier:String)
POST     /content/v3/unlisted/publish/:identifier  controllers.v3.ContentController.publishUnlisted(identifier:String)

# Collection APIs
PATCH     /content/v3/hierarchy/add         controllers.v3.ContentController.addHierarchy
DELETE    /content/v3/hierarchy/remove      controllers.v3.ContentController.removeHierarchy
PATCH     /content/v3/hierarchy/update      controllers.v3.ContentController.updateHierarchy
GET       /content/v3/hierarchy/:identifier      controllers.v3.ContentController.getHierarchy(identifier:String, mode:Option[String])
GET       /content/v3/hierarchy/:identifier/:bookmarkId controllers.v3.ContentController.getBookmarkHierarchy(identifier: String, bookmarkId: String, mode: Option[String])
POST    /collection/v3/dialcode/link/:identifier            @controllers.v3.ContentController.collectionLinkDialCode(identifier:String)

#License APIs
POST    /license/v3/create                      controllers.v3.LicenseController.create
GET     /license/v3/read/:identifier            controllers.v3.LicenseController.read(identifier: String, fields:Option[String])
PATCH   /license/v3/update/:identifier          controllers.v3.LicenseController.update(identifier: String)
DELETE  /license/v3/retire/:identifier          controllers.v3.LicenseController.retire(identifier: String)

#These are routes for Channel
POST     /channel/v3/create                   controllers.v3.ChannelController.create
PATCH     /channel/v3/update/:identifier      controllers.v3.ChannelController.update(identifier: String)
GET       /channel/v3/read/:identifier        controllers.v3.ChannelController.read(identifier: String)
DELETE     /channel/v3/retire/:identifier    controllers.v3.ChannelController.retire(identifier: String)

# Category APIs
POST    /category/v3/create                      controllers.v3.CategoryController.create
GET     /category/v3/read/:identifier            controllers.v3.CategoryController.read(identifier: String, fields:Option[String])
PATCH   /category/v3/update/:identifier          controllers.v3.CategoryController.update(identifier: String)
DELETE  /category/v3/retire/:identifier          controllers.v3.CategoryController.retire(identifier: String)

#Asset V4 Api's
POST      /asset/v4/create                       controllers.v4.AssetController.create
PATCH     /asset/v4/update/:identifier           controllers.v4.AssetController.update(identifier:String)
GET       /asset/v4/read/:identifier             controllers.v4.AssetController.read(identifier:String, mode:Option[String], fields:Option[String])
POST      /asset/v4/upload/:identifier           controllers.v4.AssetController.upload(identifier:String, fileFormat: Option[String], validation: Option[String])
POST      /asset/v4/upload/url/:identifier       controllers.v4.AssetController.uploadPreSigned(identifier:String, type: Option[String])
POST      /asset/v4/copy/:identifier             controllers.v4.AssetController.copy(identifier:String)

# Collection v4 Api's
POST     /collection/v4/create                     controllers.v4.CollectionController.create
PATCH    /collection/v4/update/:identifier         controllers.v4.CollectionController.update(identifier:String)
GET      /collection/v4/read/:identifier           controllers.v4.CollectionController.read(identifier:String, mode:Option[String], fields:Option[String])
POST     /collection/v4/flag/:identifier           controllers.v4.CollectionController.flag(identifier:String)
POST     /collection/v4/flag/accept/:identifier    controllers.v4.CollectionController.acceptFlag(identifier:String)
DELETE   /collection/v4/discard/:identifier        controllers.v4.CollectionController.discard(identifier:String)
DELETE   /collection/v4/retire/:identifier         controllers.v4.CollectionController.retire(identifier:String)
PATCH    /collection/v4/hierarchy/add              controllers.v4.CollectionController.addHierarchy
DELETE   /collection/v4/hierarchy/remove           controllers.v4.CollectionController.removeHierarchy
PATCH    /collection/v4/hierarchy/update           controllers.v4.CollectionController.updateHierarchy
GET      /collection/v4/hierarchy/:identifier      controllers.v4.CollectionController.getHierarchy(identifier:String, mode:Option[String])
GET      /collection/v4/hierarchy/:identifier/:bookmarkId    controllers.v4.CollectionController.getBookmarkHierarchy(identifier: String, bookmarkId: String, mode: Option[String])
POST     /collection/v4/dialcode/link/:identifier            controllers.v4.CollectionController.collectionLinkDialCode(identifier:String)
POST     /collection/v4/copy/:identifier                     controllers.v4.CollectionController.copy(identifier:String, mode:Option[String], type:String ?= "deep")
PATCH    /collection/v4/system/update/:identifier            controllers.v4.CollectionController.systemUpdate(identifier:String)


# Content v4 APIs
POST      /content/v4/create                       controllers.v4.ContentController.create
PATCH     /content/v4/update/:identifier           controllers.v4.ContentController.update(identifier:String)
GET       /content/v4/read/:identifier             controllers.v4.ContentController.read(identifier:String, mode:Option[String], fields:Option[String])
POST      /content/v4/upload/url/:identifier       controllers.v4.ContentController.uploadPreSigned(identifier:String, type: Option[String])
POST      /content/v4/upload/:identifier           controllers.v4.ContentController.upload(identifier:String, fileFormat: Option[String], validation: Option[String])
POST      /content/v4/copy/:identifier             controllers.v4.ContentController.copy(identifier:String, mode:Option[String], type:String ?= "deep")
POST      /content/v4/dialcode/link                controllers.v4.ContentController.linkDialCode()
POST      /content/v4/import                       controllers.v4.ContentController.importContent()
POST      /content/v4/flag/:identifier             controllers.v4.ContentController.flag(identifier:String)
POST      /content/v4/flag/accept/:identifier      controllers.v4.ContentController.acceptFlag(identifier:String)
POST      /content/v4/flag/reject/:identifier      controllers.v4.ContentController.rejectFlag(identifier:String)
DELETE    /content/v4/discard/:identifier          controllers.v4.ContentController.discard(identifier:String)
DELETE    /content/v4/retire/:identifier           controllers.v4.ContentController.retire(identifier:String)
PATCH     /content/v4/system/update/:identifier    controllers.v4.ContentController.systemUpdate(identifier:String)
POST      /content/v4/review/reject/:identifier    controllers.v4.ContentController.rejectContent(identifier:String)

# App v4 APIs
POST      /app/v4/register                          controllers.v4.AppController.register
PATCH     /app/v4/update/:identifier                controllers.v4.AppController.update(identifier:String)
GET       /app/v4/read/:identifier                  controllers.v4.AppController.read(identifier:String, fields:Option[String])

# Event APIs
POST      /event/v4/create                          controllers.v4.EventController.create
PATCH     /event/v4/update/:identifier              controllers.v4.EventController.update(identifier:String)
POST      /event/v4/publish/:identifier             controllers.v4.EventController.publish(identifier:String)
GET       /event/v4/read/:identifier                controllers.v4.EventController.read(identifier:String, mode:Option[String], fields:Option[String])
DELETE    /event/v4/discard/:identifier             controllers.v4.EventController.discard(identifier:String)
DELETE    /private/event/v4/retire/:identifier      controllers.v4.EventController.retire(identifier:String)

# EventSet v4 Api's
POST    /eventset/v4/create                      controllers.v4.EventSetController.create
PUT     /eventset/v4/update/:identifier          controllers.v4.EventSetController.update(identifier:String)
POST    /eventset/v4/publish/:identifier         controllers.v4.EventSetController.publish(identifier:String)
GET     /eventset/v4/hierarchy/:identifier       controllers.v4.EventSetController.getHierarchy(identifier:String, mode:Option[String], fields:Option[String])
GET     /eventset/v4/read/:identifier            controllers.v4.EventSetController.read(identifier:String, mode:Option[String], fields:Option[String])
DELETE  /eventset/v4/discard/:identifier         controllers.v4.EventSetController.discard(identifier:String)
DELETE  /private/eventset/v4/retire/:identifier  controllers.v4.EventSetController.retire(identifier:String)

# Object v4 Api's
GET     /object/v4/read/:identifier              controllers.v4.ObjectController.read(identifier:String, fields:Option[String])