{
	"info": {
		"_postman_id": "3a33b6a7-0451-41d4-a2e2-b7233c507254",
		"name": "Sunbird Content Management API(s)_V1",
		"description": "The Content Management API allows you to manage content over the sunbird platform.Apis perform operations related to all the _Content_ on the Sunbird Platform.\n- Each of the endpoints serve a different purpose, so which one to use depends on what you want to do\n- The operations include CRUD (Create, Update, Read and Delete) operations and other operations such as upload, publish, flag, link Dialcode, etc.\n- The URL for Sunbird Content API(s) is `content/v2`\n- [TestCases](https://www.getpostman.com/collections/3c1817fcb4606ae53b9a)\n\nContact Support:\n Email: info@sunbird.org",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19432603",
		"_collection_link": "https://blue-flare-639335.postman.co/workspace/API-automation-Knowlg~3ae6d444-e850-468d-bdb0-8be163d62aea/collection/19432603-3a33b6a7-0451-41d4-a2e2-b7233c507254?action=share&source=collection_link&creator=19432603"
	},
	"item": [
		{
			"name": "content",
			"item": [
				{
					"name": "v4",
					"item": [
						{
							"name": "upload",
							"item": [
								{
									"name": "Upload content",
									"item": [
										{
											"name": "Pre requisite",
											"item": [
												{
													"name": "Create content",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let jsonResponse = pm.response.json();\r",
																	"\r",
																	"pm.collectionVariables.set(\"upload_content_id\", jsonResponse.result.identifier);\r",
																	"console.log(pm.collectionVariables.get(\"upload_content_id\"));\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-Authenticated-User-token",
																"value": "{{keycloak_access_token}}"
															},
															{
																"key": "X-Channel-Id",
																"value": "sunbird"
															},
															{
																"key": "Authorization",
																"value": "{{auth_token}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Pdf Content_01\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"Explanation Content\"\n        }\n    }\n}"
														},
														"url": {
															"raw": "{{host}}/content/v4/create",
															"host": [
																"{{host}}"
															],
															"path": [
																"content",
																"v4",
																"create"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Positive",
											"item": [
												{
													"name": "Upload Content with valid file",
													"request": {
														"auth": {
															"type": "apikey",
															"apikey": [
																{
																	"key": "key",
																	"value": "Authorization",
																	"type": "string"
																},
																{
																	"key": "value",
																	"value": "<API Key>",
																	"type": "string"
																},
																{
																	"key": "in",
																	"value": "header",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json\n  - Multipart/form-data\n  - Application/x-www-form-urlencoded",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) The Registered User ID to execute the API.",
																"key": "X-Authenticated-Userid",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "file",
																	"description": "(Required) Content package file which you intend to upload",
																	"type": "file",
																	"src": "/C:/Users/Qualitrix/Downloads/pdf_233.pdf"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/content/v4/upload/{{upload_content_id}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v4",
																"upload",
																"{{upload_content_id}}"
															]
														},
														"description": "This API is associated with uploading content on the Sunbird Platform .\n   - The**_/upload/{content Id}_** endpoint executes \"Upload Content\" request based on parameters provided as metadata in the request body.\n   - The endpoint for **Upload Content** is `/content/v2/upload`\n  - It points to knowledge-mw-service - `/v2/content/upload`\n  - {...}refers to a section of upload endpoint URL path that needs to be replaced by appropriate Id.\n   - You need to provide a valid content Id value in {Content Id} field of API URL.\n   - It is mandatory to provide values for parameters marked with *.\n   - Mandatory fields cannot be null or empty."
													},
													"response": [
														{
															"name": "OK ! Successful operation.\"Content upload\" operation was successfully executed.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json\n  - Multipart/form-data\n  - Application/x-www-form-urlencoded",
																		"key": "Content-Type",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) The Registered User ID to execute the API.",
																		"key": "X-Authenticated-Userid",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																		"key": "Authorization",
																		"value": "ea laborum"
																	}
																],
																"body": {
																	"mode": "formdata",
																	"formdata": [
																		{
																			"key": "file",
																			"description": "(Required) Content package file which you intend to upload",
																			"type": "file",
																			"src": []
																		}
																	]
																},
																"url": {
																	"raw": "{{baseUrl}}/content/v2/upload/:Content_Id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"content",
																		"v2",
																		"upload",
																		":Content_Id"
																	],
																	"variable": [
																		{
																			"key": "Content_Id",
																			"value": "ea laborum",
																			"description": "(Required) Please append a valid Content Id To the Request URL"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"id\": \"api.content.upload\",\n  \"ver\": \"3.0\",\n  \"ts\": \"2020-12-10T21:00:16ZZ\",\n  \"params\": {\n    \"resmsgid\": \"4505a08c-9d0c-447b-8b3f-692e31f841fd\",\n    \"msgid\": null,\n    \"err\": null,\n    \"status\": \"successful\",\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"identifier\": \"do_1131697376667402241315\",\n    \"artifactUrl\": \"https://ekstep-public-dev.s3-ap-south-1.amazonaws.com/content/do_112547906582659072139/artifact/pdf_1531726896452.pdf\",\n    \"content_url\": \"https://ekstep-public-dev.s3-ap-south-1.amazonaws.com/content/do_112547906582659072139/artifact/pdf_1531726896452.pdf\",\n    \"node_id\": \"do_1131697376667402241315\",\n    \"versionKey\": \"1607634016927\"\n  }\n}"
														},
														{
															"name": "RESOURCE NOT FOUND,**Content Send for Review** operation failed !The possible reason for failure is that you may have provided wrong content id.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json\n  - Multipart/form-data\n  - Application/x-www-form-urlencoded",
																		"key": "Content-Type",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) The Registered User ID to execute the API.",
																		"key": "X-Authenticated-Userid",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																		"key": "Authorization",
																		"value": "ea laborum"
																	}
																],
																"body": {
																	"mode": "formdata",
																	"formdata": [
																		{
																			"key": "file",
																			"description": "(Required) Content package file which you intend to upload",
																			"type": "file",
																			"src": []
																		}
																	]
																},
																"url": {
																	"raw": "{{baseUrl}}/content/v2/upload/:Content_Id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"content",
																		"v2",
																		"upload",
																		":Content_Id"
																	],
																	"variable": [
																		{
																			"key": "Content_Id",
																			"value": "ea laborum",
																			"description": "(Required) Please append a valid Content Id To the Request URL"
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"id\": \"api.content.upload\",\n  \"ver\": \"3.0\",\n  \"ts\": \"2020-12-10T21:21:20ZZ\",\n  \"params\": {\n    \"resmsgid\": \"58139c89-2852-4673-b414-2f867c91bbc1\",\n    \"msgid\": null,\n    \"err\": \"NOT_FOUND\",\n    \"status\": \"failed\",\n    \"errmsg\": \"Error! Node(s) doesn't Exists. | [Invalid Node Id.]: do_11316973766674022413151\"\n  },\n  \"responseCode\": \"RESOURCE_NOT_FOUND\",\n  \"result\": {\n    \"messages\": null\n  }\n}"
														},
														{
															"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json\n  - Multipart/form-data\n  - Application/x-www-form-urlencoded",
																		"key": "Content-Type",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) The Registered User ID to execute the API.",
																		"key": "X-Authenticated-Userid",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																		"key": "Authorization",
																		"value": "ea laborum"
																	}
																],
																"body": {
																	"mode": "formdata",
																	"formdata": [
																		{
																			"key": "file",
																			"description": "(Required) Content package file which you intend to upload",
																			"type": "file",
																			"src": []
																		}
																	]
																},
																"url": {
																	"raw": "{{baseUrl}}/content/v2/upload/:Content_Id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"content",
																		"v2",
																		"upload",
																		":Content_Id"
																	],
																	"variable": [
																		{
																			"key": "Content_Id",
																			"value": "ea laborum",
																			"description": "(Required) Please append a valid Content Id To the Request URL"
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"result\": {},\n  \"id\": \"cupidatat reprehenderit dolor\",\n  \"ver\": \"minim anim commodo\",\n  \"ts\": \"commodo\",\n  \"params\": {\n    \"resmsgid\": \"pariatur repre\",\n    \"msgid\": \"irure\",\n    \"err\": \"consequat esse ea\",\n    \"status\": \"esse\",\n    \"errmsg\": \"aliqua laboris velit\"\n  },\n  \"responseCode\": \"reprehenderit dolor elit sunt dolore\"\n}"
														}
													]
												}
											]
										},
										{
											"name": "Negative",
											"item": [
												{
													"name": "Upload Content with invalid file",
													"request": {
														"auth": {
															"type": "apikey",
															"apikey": [
																{
																	"key": "key",
																	"value": "Authorization",
																	"type": "string"
																},
																{
																	"key": "value",
																	"value": "<API Key>",
																	"type": "string"
																},
																{
																	"key": "in",
																	"value": "header",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json\n  - Multipart/form-data\n  - Application/x-www-form-urlencoded",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) The Registered User ID to execute the API.",
																"key": "X-Authenticated-Userid",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "file",
																	"description": "(Required) Content package file which you intend to upload",
																	"type": "file",
																	"src": "/C:/Users/Qualitrix/Downloads/pdf_233.pdf"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/content/v4/upload/{{upload_content_id}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v4",
																"upload",
																"{{upload_content_id}}"
															]
														},
														"description": "This API is associated with uploading content on the Sunbird Platform .\n   - The**_/upload/{content Id}_** endpoint executes \"Upload Content\" request based on parameters provided as metadata in the request body.\n   - The endpoint for **Upload Content** is `/content/v2/upload`\n  - It points to knowledge-mw-service - `/v2/content/upload`\n  - {...}refers to a section of upload endpoint URL path that needs to be replaced by appropriate Id.\n   - You need to provide a valid content Id value in {Content Id} field of API URL.\n   - It is mandatory to provide values for parameters marked with *.\n   - Mandatory fields cannot be null or empty."
													},
													"response": [
														{
															"name": "OK ! Successful operation.\"Content upload\" operation was successfully executed.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json\n  - Multipart/form-data\n  - Application/x-www-form-urlencoded",
																		"key": "Content-Type",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) The Registered User ID to execute the API.",
																		"key": "X-Authenticated-Userid",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																		"key": "Authorization",
																		"value": "ea laborum"
																	}
																],
																"body": {
																	"mode": "formdata",
																	"formdata": [
																		{
																			"key": "file",
																			"description": "(Required) Content package file which you intend to upload",
																			"type": "file",
																			"src": []
																		}
																	]
																},
																"url": {
																	"raw": "{{baseUrl}}/content/v2/upload/:Content_Id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"content",
																		"v2",
																		"upload",
																		":Content_Id"
																	],
																	"variable": [
																		{
																			"key": "Content_Id",
																			"value": "ea laborum",
																			"description": "(Required) Please append a valid Content Id To the Request URL"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"id\": \"api.content.upload\",\n  \"ver\": \"3.0\",\n  \"ts\": \"2020-12-10T21:00:16ZZ\",\n  \"params\": {\n    \"resmsgid\": \"4505a08c-9d0c-447b-8b3f-692e31f841fd\",\n    \"msgid\": null,\n    \"err\": null,\n    \"status\": \"successful\",\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"identifier\": \"do_1131697376667402241315\",\n    \"artifactUrl\": \"https://ekstep-public-dev.s3-ap-south-1.amazonaws.com/content/do_112547906582659072139/artifact/pdf_1531726896452.pdf\",\n    \"content_url\": \"https://ekstep-public-dev.s3-ap-south-1.amazonaws.com/content/do_112547906582659072139/artifact/pdf_1531726896452.pdf\",\n    \"node_id\": \"do_1131697376667402241315\",\n    \"versionKey\": \"1607634016927\"\n  }\n}"
														},
														{
															"name": "RESOURCE NOT FOUND,**Content Send for Review** operation failed !The possible reason for failure is that you may have provided wrong content id.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json\n  - Multipart/form-data\n  - Application/x-www-form-urlencoded",
																		"key": "Content-Type",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) The Registered User ID to execute the API.",
																		"key": "X-Authenticated-Userid",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																		"key": "Authorization",
																		"value": "ea laborum"
																	}
																],
																"body": {
																	"mode": "formdata",
																	"formdata": [
																		{
																			"key": "file",
																			"description": "(Required) Content package file which you intend to upload",
																			"type": "file",
																			"src": []
																		}
																	]
																},
																"url": {
																	"raw": "{{baseUrl}}/content/v2/upload/:Content_Id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"content",
																		"v2",
																		"upload",
																		":Content_Id"
																	],
																	"variable": [
																		{
																			"key": "Content_Id",
																			"value": "ea laborum",
																			"description": "(Required) Please append a valid Content Id To the Request URL"
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"id\": \"api.content.upload\",\n  \"ver\": \"3.0\",\n  \"ts\": \"2020-12-10T21:21:20ZZ\",\n  \"params\": {\n    \"resmsgid\": \"58139c89-2852-4673-b414-2f867c91bbc1\",\n    \"msgid\": null,\n    \"err\": \"NOT_FOUND\",\n    \"status\": \"failed\",\n    \"errmsg\": \"Error! Node(s) doesn't Exists. | [Invalid Node Id.]: do_11316973766674022413151\"\n  },\n  \"responseCode\": \"RESOURCE_NOT_FOUND\",\n  \"result\": {\n    \"messages\": null\n  }\n}"
														},
														{
															"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json\n  - Multipart/form-data\n  - Application/x-www-form-urlencoded",
																		"key": "Content-Type",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) The Registered User ID to execute the API.",
																		"key": "X-Authenticated-Userid",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																		"key": "Authorization",
																		"value": "ea laborum"
																	}
																],
																"body": {
																	"mode": "formdata",
																	"formdata": [
																		{
																			"key": "file",
																			"description": "(Required) Content package file which you intend to upload",
																			"type": "file",
																			"src": []
																		}
																	]
																},
																"url": {
																	"raw": "{{baseUrl}}/content/v2/upload/:Content_Id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"content",
																		"v2",
																		"upload",
																		":Content_Id"
																	],
																	"variable": [
																		{
																			"key": "Content_Id",
																			"value": "ea laborum",
																			"description": "(Required) Please append a valid Content Id To the Request URL"
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"result\": {},\n  \"id\": \"cupidatat reprehenderit dolor\",\n  \"ver\": \"minim anim commodo\",\n  \"ts\": \"commodo\",\n  \"params\": {\n    \"resmsgid\": \"pariatur repre\",\n    \"msgid\": \"irure\",\n    \"err\": \"consequat esse ea\",\n    \"status\": \"esse\",\n    \"errmsg\": \"aliqua laboris velit\"\n  },\n  \"responseCode\": \"reprehenderit dolor elit sunt dolore\"\n}"
														}
													]
												}
											]
										}
									]
								},
								{
									"name": "Upload URL",
									"item": [
										{
											"name": "Pre requisite",
											"item": [
												{
													"name": "Create content",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let jsonResponse = pm.response.json();\r",
																	"\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Status code name has string OK\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"pm.test(\"id should be api.content.create\", function () {\r",
																	"   pm.expect(jsonResponse.id).to.eql(\"api.content.create\");\r",
																	"});\r",
																	"pm.test(\"ver should be 4.0\", function () {\r",
																	"   pm.expect(jsonResponse.ver).to.eql(\"4.0\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Params has keys: resmsgid , msgid , err , status , errmsg \", () => {\r",
																	"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid', 'msgid','err','status','errmsg');\r",
																	"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");\r",
																	"  pm.expect(jsonResponse.params.msgid).to.be.a('null');\r",
																	"  pm.expect(jsonResponse.params.err).to.be.a('null');\r",
																	"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");\r",
																	"  pm.expect(jsonResponse.params.errmsg).to.be.a('null');\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status is successful\", function () {\r",
																	"    pm.expect(jsonResponse.params.status).to.be.equal(\"successful\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"ResponseCode is OK\", function () {\r",
																	"    pm.expect(jsonResponse.responseCode).to.be.equal(\"OK\");\r",
																	"});\r",
																	"\r",
																	"// Set global variable\r",
																	"pm.collectionVariables.set(\"pre_content_id\", jsonResponse.result.identifier);\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-Authenticated-User-token",
																"value": "{{keycloak_access_token}}"
															},
															{
																"key": "X-Channel-Id",
																"value": "sunbird"
															},
															{
																"key": "Authorization",
																"value": "{{kong_api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"PDF Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"Explanation Content\"\n        }\n    }\n}"
														},
														"url": {
															"raw": "{{host}}/content/v4/create",
															"host": [
																"{{host}}"
															],
															"path": [
																"content",
																"v4",
																"create"
															]
														}
													},
													"response": []
												},
												{
													"name": "Upload URL",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let jsonResponse = pm.response.json();\r",
																	"\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Status code name has string OK\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"pm.test(\"id should be api.content.upload.url\", function () {\r",
																	"   pm.expect(jsonResponse.id).to.eql(\"api.content.upload.url\");\r",
																	"});\r",
																	"pm.test(\"ver should be 4.0\", function () {\r",
																	"   pm.expect(jsonResponse.ver).to.eql(\"4.0\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Params has keys: resmsgid , msgid , err , status , errmsg \", () => {\r",
																	"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid', 'msgid','err','status','errmsg');\r",
																	"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");\r",
																	"  pm.expect(jsonResponse.params.msgid).to.be.a('null');\r",
																	"  pm.expect(jsonResponse.params.err).to.be.a('null');\r",
																	"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");\r",
																	"  pm.expect(jsonResponse.params.errmsg).to.be.a('null');\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status is successful\", function () {\r",
																	"    pm.expect(jsonResponse.params.status).to.be.equal(\"successful\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"ResponseCode is OK\", function () {\r",
																	"    pm.expect(jsonResponse.responseCode).to.be.equal(\"OK\");\r",
																	"});\r",
																	"\r",
																	"\r",
																	"pm.test(\"Verify keys and data type of the response result\", () => {\r",
																	"  pm.expect(jsonResponse.result).to.have.all.keys('identifier', 'url_expiry', 'pre_signed_url');\r",
																	"});\r",
																	"pm.collectionVariables.set(\"pre_signed_URL\",jsonResponse.result.pre_signed_url );\r",
																	"console.log(pm.collectionVariables.get(\"pre_signed_URL\"));\r",
																	"\r",
																	"pm.collectionVariables.set(\"id\", jsonResponse.result.identifier);\r",
																	"console.log(pm.collectionVariables.get(\"id\"));\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "apikey",
															"apikey": [
																{
																	"key": "key",
																	"value": "Authorization",
																	"type": "string"
																},
																{
																	"key": "value",
																	"value": "<API Key>",
																	"type": "string"
																},
																{
																	"key": "in",
																	"value": "header",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"description": "(Required) The Registered User ID to execute the API.",
																"key": "X-Authenticated-Userid",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"request\": {\n        \"content\": {\n            \"fileName\":\"test.pdf\"\n        }\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v4/upload/url/{{pre_content_id}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v4",
																"upload",
																"url",
																"{{pre_content_id}}"
															]
														},
														"description": "This API is associated with uploading content on the Sunbird Platform .\n   - The**_/upload/url/{content Id}_** endpoint executes \"Upload Content URL\" request based on parameters provided as metadata in the request body.\n   - The endpoint for **Upload Content URL** is `/content/v2/upload/url`\n  - It points to knowledge-mw-service - `/v2/content/upload/url`\n  - {...}refers to a section of upload endpoint URL path that needs to be replaced by appropriate Id.\n   - You need to provide a valid content Id value in {Content Id} field of API URL.\n   - On Success api returns pre-signed-url link with come configured ttl against which file can be uploaded.\n   - It is mandatory to provide values for parameters marked with *.\n   - Mandatory fields cannot be null or empty."
													},
													"response": [
														{
															"name": "OK ! Successful operation.\"Content upload\" operation was successfully executed.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																		"key": "Content-Type",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) The Registered User ID to execute the API.",
																		"key": "X-Authenticated-Userid",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																		"key": "Authorization",
																		"value": "ea laborum"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"request\": {\n    \"content\": {\n      \"fileName\": \"test.pdf\"\n    }\n  }\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/content/v2/upload/url/:Content_Id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"content",
																		"v2",
																		"upload",
																		"url",
																		":Content_Id"
																	],
																	"variable": [
																		{
																			"key": "Content_Id",
																			"value": "ea laborum",
																			"description": "(Required) Please append a valid Content Id To the Request URL"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"id\": \"api.content.upload.url\",\n  \"ver\": \"3.0\",\n  \"ts\": \"2020-12-11T23:52:44ZZ\",\n  \"params\": {\n    \"resmsgid\": \"81e308fa-3e36-45ff-b295-e28e8f757dc7\",\n    \"msgid\": null,\n    \"err\": null,\n    \"status\": \"successful\",\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"identifier\": \"do_11317053041892556811094\",\n    \"url_expiry\": \"54000\",\n    \"pre_signed_url\": \"https://sunbirddev.blob.core.windows.net/sunbird-content-dev/content/assets/do_11317053041892556811094/10-page-pdf.pdf?sv=2017-04-17&se=2020-12-12T14%3A52%3A44Z&sr=b&sp=w&sig=Tlt6uWI/6lMeupkEbsTAmGajmo1qzw8HeUHrVwOm6yk%3D\"\n  }\n}"
														},
														{
															"name": "BAD REQUEST. The 'Upload Url' operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																		"key": "Content-Type",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) The Registered User ID to execute the API.",
																		"key": "X-Authenticated-Userid",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																		"key": "Authorization",
																		"value": "ea laborum"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"request\": {\n    \"content\": {\n      \"fileName\": \"test.pdf\"\n    }\n  }\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/content/v2/upload/url/:Content_Id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"content",
																		"v2",
																		"upload",
																		"url",
																		":Content_Id"
																	],
																	"variable": [
																		{
																			"key": "Content_Id",
																			"value": "ea laborum",
																			"description": "(Required) Please append a valid Content Id To the Request URL"
																		}
																	]
																}
															},
															"status": "Bad Request",
															"code": 400,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"id\": \"api.content.upload.url\",\n  \"ver\": \"3.0\",\n  \"ts\": \"2020-12-11T23:54:07ZZ\",\n  \"params\": {\n    \"resmsgid\": \"4edde64d-3116-4271-bcc1-a8ba0ec2d56b\",\n    \"msgid\": null,\n    \"err\": \"ERR_CONTENT_BLANK_FILE_NAME\",\n    \"status\": \"failed\",\n    \"errmsg\": \"File name is blank\"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {\n    \"messages\": null\n  }\n}"
														},
														{
															"name": "RESOURCE NOT FOUND,**Content Id sent for generating upload url** operation failed !The possible reason for failure is that you may have provided wrong content id.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																		"key": "Content-Type",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) The Registered User ID to execute the API.",
																		"key": "X-Authenticated-Userid",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																		"key": "Authorization",
																		"value": "ea laborum"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"request\": {\n    \"content\": {\n      \"fileName\": \"test.pdf\"\n    }\n  }\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/content/v2/upload/url/:Content_Id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"content",
																		"v2",
																		"upload",
																		"url",
																		":Content_Id"
																	],
																	"variable": [
																		{
																			"key": "Content_Id",
																			"value": "ea laborum",
																			"description": "(Required) Please append a valid Content Id To the Request URL"
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"id\": \"api.upload.url\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-11T23:48:26.694Z\",\n  \"params\": {\n    \"resmsgid\": \"5cf72660-3c0b-11eb-b0a2-8d5c9f561887\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"NOT_FOUND\",\n    \"errmsg\": \"Error! Node(s) doesn't Exists. | [Invalid Node Id.]: do_11254577204586086415\"\n  },\n  \"responseCode\": \"RESOURCE_NOT_FOUND\",\n  \"result\": {}\n}"
														},
														{
															"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																		"key": "Content-Type",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) The Registered User ID to execute the API.",
																		"key": "X-Authenticated-Userid",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																		"key": "Authorization",
																		"value": "ea laborum"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"request\": {\n    \"content\": {\n      \"fileName\": \"test.pdf\"\n    }\n  }\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/content/v2/upload/url/:Content_Id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"content",
																		"v2",
																		"upload",
																		"url",
																		":Content_Id"
																	],
																	"variable": [
																		{
																			"key": "Content_Id",
																			"value": "ea laborum",
																			"description": "(Required) Please append a valid Content Id To the Request URL"
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"result\": {},\n  \"id\": \"cupidatat reprehenderit dolor\",\n  \"ver\": \"minim anim commodo\",\n  \"ts\": \"commodo\",\n  \"params\": {\n    \"resmsgid\": \"pariatur repre\",\n    \"msgid\": \"irure\",\n    \"err\": \"consequat esse ea\",\n    \"status\": \"esse\",\n    \"errmsg\": \"aliqua laboris velit\"\n  },\n  \"responseCode\": \"reprehenderit dolor elit sunt dolore\"\n}"
														}
													]
												},
												{
													"name": "Upload file to the URL",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"var fullUrl= pm.collectionVariables.get(\"pre_signed_URL\");\r",
																	"\r",
																	"// Find the index of '?' to get the position of the query parameters\r",
																	"var indexOfQuestionMark = fullUrl.indexOf('?');\r",
																	"\r",
																	"// Extract the partial URL without the query parameters\r",
																	"var partialUrl = indexOfQuestionMark !== -1 ? fullUrl.slice(0, indexOfQuestionMark) : fullUrl;\r",
																	"pm.collectionVariables.set(\"partial_URL\", partialUrl);\r",
																	"// Log the partial URL to the console (you can remove this line if not needed)\r",
																	"console.log(pm.collectionVariables.get(\"partial_URL\"));\r",
																	"\r",
																	"// Now you can use the 'partialUrl' variable in Postman as needed\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-Ms-Blob-Type",
																"value": "BlockBlob"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "file",
																	"type": "file",
																	"src": "/C:/Users/Qualitrix/Downloads/pdf_233.pdf"
																}
															]
														},
														"url": {
															"raw": "{{pre_signed_URL}}",
															"host": [
																"{{pre_signed_URL}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Positive",
											"item": [
												{
													"name": "Update the content with valid URL and mime type",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let jsonResponse = pm.response.json();\r",
																	"\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Status code name has string OK\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"pm.test(\"id should be api.content.upload\", function () {\r",
																	"   pm.expect(jsonResponse.id).to.eql(\"api.content.upload\");\r",
																	"});\r",
																	"pm.test(\"ver should be 4.0\", function () {\r",
																	"   pm.expect(jsonResponse.ver).to.eql(\"4.0\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Params has keys: resmsgid , msgid , err , status , errmsg \", () => {\r",
																	"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid', 'msgid','err','status','errmsg');\r",
																	"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");\r",
																	"  pm.expect(jsonResponse.params.msgid).to.be.a('null');\r",
																	"  pm.expect(jsonResponse.params.err).to.be.a('null');\r",
																	"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");\r",
																	"  pm.expect(jsonResponse.params.errmsg).to.be.a('null');\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status is successful\", function () {\r",
																	"    pm.expect(jsonResponse.params.status).to.be.equal(\"successful\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"ResponseCode is OK\", function () {\r",
																	"    pm.expect(jsonResponse.responseCode).to.be.equal(\"OK\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Result has keys: identifier , artifactUrl , content_url , node_id , versionKey \", () => {\r",
																	"  pm.expect(jsonResponse.result).to.have.all.keys('identifier', 'artifactUrl','content_url','node_id','versionKey');\r",
																	"  pm.expect(jsonResponse.result.identifier).to.be.a(\"string\");\r",
																	"  pm.expect(jsonResponse.result.artifactUrl).to.be.a(\"string\");\r",
																	"  pm.expect(jsonResponse.result.content_url).to.be.a(\"string\");\r",
																	"  pm.expect(jsonResponse.result.node_id).to.be.a(\"string\");\r",
																	"  pm.expect(jsonResponse.result.versionKey).to.be.a(\"string\");\r",
																	"});\r",
																	"\r",
																	"pm.test(`artifactUrl should be: ${pm.collectionVariables.get(\"partial_URL\")}`, function () {\r",
																	"    pm.expect(jsonResponse.result.artifactUrl).to.be.equal(`${pm.collectionVariables.get(\"partial_URL\")}`);\r",
																	"});\r",
																	"\r",
																	"pm.test(`content_url should be: ${pm.collectionVariables.get(\"partial_URL\")}`, function () {\r",
																	"    pm.expect(jsonResponse.result.content_url).to.be.equal(`${pm.collectionVariables.get(\"partial_URL\")}`);\r",
																	"});\r",
																	"\r",
																	"pm.test(`identifier should be: ${pm.collectionVariables.get(\"pre_content_id\")}`, function () {\r",
																	"    pm.expect(jsonResponse.result.identifier).to.be.equal(`${pm.collectionVariables.get(\"pre_content_id\")}`);\r",
																	"});\r",
																	"\r",
																	"pm.test(`node_id should be: ${pm.collectionVariables.get(\"pre_content_id\")}`, function () {\r",
																	"    pm.expect(jsonResponse.result.node_id).to.be.equal(`${pm.collectionVariables.get(\"pre_content_id\")}`);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "user-id",
																"value": "mahesh"
															},
															{
																"key": "Cookie",
																"value": "connect.sid=s%3AnLNdCeYI27WUkZBIFdX1J5MKTM6ISEdJ.SFTq%2FeT2cVLh5TSEWmwZPCekWDSeNXILHPDyziKa26E"
															},
															{
																"key": "X-Channel-Id",
																"value": "0137541424673095687"
															},
															{
																"key": "X-Authenticated-User-token",
																"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6ImFjY2Vzc3YxX2tleTEifQ.eyJhdWQiOiJodHRwczovL2Rldi5zdW5iaXJkZWQub3JnL2F1dGgvcmVhbG1zL3N1bmJpcmQiLCJzdWIiOiJmOjVhOGEzZjJiLTM0MDktNDJlMC05MDAxLWY5MTNiYzBmZGUzMToxNTVjZTNjNS03MTNlLTQ3NDktYmMxYy05NWQwOWM2NDA5MTQiLCJyb2xlcyI6W3sicm9sZSI6IkNPTlRFTlRfQ1JFQVRPUiIsInNjb3BlIjpbeyJvcmdhbmlzYXRpb25JZCI6IjAxMzc1NDE0MjQ2NzMwOTU2ODcifV19LHsicm9sZSI6IkNPVVJTRV9NRU5UT1IiLCJzY29wZSI6W3sib3JnYW5pc2F0aW9uSWQiOiIwMTM3NTQxNDI0NjczMDk1Njg3In1dfSx7InJvbGUiOiJQVUJMSUMiLCJzY29wZSI6W119XSwiaXNzIjoiaHR0cHM6Ly9kZXYuc3VuYmlyZGVkLm9yZy9hdXRoL3JlYWxtcy9zdW5iaXJkIiwibmFtZSI6ImNvbnRlbnRDcmVhdG9yIiwidHlwIjoiQmVhcmVyIiwiZXhwIjoxNzAyMzI0NjU0LCJpYXQiOjE3MDIyODE0NTR9.MxiIhP6YJmI1XbozLNoJeQAbdQKs597f2mlNHWcJ-ZZIXvBx4BcX7T57B5xXGIT6LJ6YlS86saiG6SXHIG5ptgICphdefNysfVgkSUmqTsgzfzvjp2lzIw8Re7xi735Kd7B612y5Tkswm0ETP7NIeQ7-Tc_3h37GV04ISfx0LMD75UvgllxcDz91Bl6N3-WN4KwCeKIfJ-iZj-EJLwoBmJjGsgNCNTn5DTzF_joFcyett__WVc14Ex-BqRSq8Hr2fMVoHpNXze3QUJ7PcD4JRY2Ywg5R9VkHz3mkhY9kI1cWeHdQypeSsM8niQK1XCWJz_aTqsP35MshDnHkWhmDyg"
															},
															{
																"key": "Authorization",
																"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiIzZGNjMzY3OWIwYTE0NmU2YWYyZjlmZDA5NWU5NTlkNCJ9.0NZhX5sqUNy-GZUya90aQFkr5ZNiqfOuELYz_IvoyS8"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "fileUrl",
																	"value": "{{partial_URL}}",
																	"type": "text"
																},
																{
																	"key": "mimeType",
																	"value": "application/pdf",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{host}}/content/v4/upload/{{pre_content_id}}",
															"host": [
																"{{host}}"
															],
															"path": [
																"content",
																"v4",
																"upload",
																"{{pre_content_id}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Upload the content with Valid url and no mime type",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let jsonResponse = pm.response.json();\r",
																	"\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Status code name has string OK\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"pm.test(\"id should be api.content.upload\", function () {\r",
																	"   pm.expect(jsonResponse.id).to.eql(\"api.content.upload\");\r",
																	"});\r",
																	"pm.test(\"ver should be 4.0\", function () {\r",
																	"   pm.expect(jsonResponse.ver).to.eql(\"4.0\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Params has keys: resmsgid , msgid , err , status , errmsg \", () => {\r",
																	"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid', 'msgid','err','status','errmsg');\r",
																	"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");\r",
																	"  pm.expect(jsonResponse.params.msgid).to.be.a('null');\r",
																	"  pm.expect(jsonResponse.params.err).to.be.a('null');\r",
																	"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");\r",
																	"  pm.expect(jsonResponse.params.errmsg).to.be.a('null');\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status is successful\", function () {\r",
																	"    pm.expect(jsonResponse.params.status).to.be.equal(\"successful\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"ResponseCode is OK\", function () {\r",
																	"    pm.expect(jsonResponse.responseCode).to.be.equal(\"OK\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Result has keys: identifier , artifactUrl , content_url , node_id , versionKey \", () => {\r",
																	"  pm.expect(jsonResponse.result).to.have.all.keys('identifier', 'artifactUrl','content_url','node_id','versionKey');\r",
																	"  pm.expect(jsonResponse.result.identifier).to.be.a(\"string\");\r",
																	"  pm.expect(jsonResponse.result.artifactUrl).to.be.a(\"string\");\r",
																	"  pm.expect(jsonResponse.result.content_url).to.be.a(\"string\");\r",
																	"  pm.expect(jsonResponse.result.node_id).to.be.a(\"string\");\r",
																	"  pm.expect(jsonResponse.result.versionKey).to.be.a(\"string\");\r",
																	"});\r",
																	"\r",
																	"pm.test(`artifactUrl should be: ${pm.collectionVariables.get(\"partial_URL\")}`, function () {\r",
																	"    pm.expect(jsonResponse.result.artifactUrl).to.be.equal(`${pm.collectionVariables.get(\"partial_URL\")}`);\r",
																	"});\r",
																	"\r",
																	"pm.test(`content_url should be: ${pm.collectionVariables.get(\"partial_URL\")}`, function () {\r",
																	"    pm.expect(jsonResponse.result.content_url).to.be.equal(`${pm.collectionVariables.get(\"partial_URL\")}`);\r",
																	"});\r",
																	"\r",
																	"pm.test(`identifier should be: ${pm.collectionVariables.get(\"content_id\")}`, function () {\r",
																	"    pm.expect(jsonResponse.result.identifier).to.be.equal(`${pm.collectionVariables.get(\"content_id\")}`);\r",
																	"});\r",
																	"\r",
																	"pm.test(`node_id should be: ${pm.collectionVariables.get(\"content_id\")}`, function () {\r",
																	"    pm.expect(jsonResponse.result.node_id).to.be.equal(`${pm.collectionVariables.get(\"content_id\")}`);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "user-id",
																"value": "mahesh"
															},
															{
																"key": "Cookie",
																"value": "connect.sid=s%3AnLNdCeYI27WUkZBIFdX1J5MKTM6ISEdJ.SFTq%2FeT2cVLh5TSEWmwZPCekWDSeNXILHPDyziKa26E"
															},
															{
																"key": "X-Channel-Id",
																"value": "0137541424673095687"
															},
															{
																"key": "X-Authenticated-User-token",
																"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6ImFjY2Vzc3YxX2tleTEifQ.eyJhdWQiOiJodHRwczovL2Rldi5zdW5iaXJkZWQub3JnL2F1dGgvcmVhbG1zL3N1bmJpcmQiLCJzdWIiOiJmOjVhOGEzZjJiLTM0MDktNDJlMC05MDAxLWY5MTNiYzBmZGUzMToxNTVjZTNjNS03MTNlLTQ3NDktYmMxYy05NWQwOWM2NDA5MTQiLCJyb2xlcyI6W3sicm9sZSI6IkNPTlRFTlRfQ1JFQVRPUiIsInNjb3BlIjpbeyJvcmdhbmlzYXRpb25JZCI6IjAxMzc1NDE0MjQ2NzMwOTU2ODcifV19LHsicm9sZSI6IkNPVVJTRV9NRU5UT1IiLCJzY29wZSI6W3sib3JnYW5pc2F0aW9uSWQiOiIwMTM3NTQxNDI0NjczMDk1Njg3In1dfSx7InJvbGUiOiJQVUJMSUMiLCJzY29wZSI6W119XSwiaXNzIjoiaHR0cHM6Ly9kZXYuc3VuYmlyZGVkLm9yZy9hdXRoL3JlYWxtcy9zdW5iaXJkIiwibmFtZSI6ImNvbnRlbnRDcmVhdG9yIiwidHlwIjoiQmVhcmVyIiwiZXhwIjoxNzAyMzI0NjU0LCJpYXQiOjE3MDIyODE0NTR9.MxiIhP6YJmI1XbozLNoJeQAbdQKs597f2mlNHWcJ-ZZIXvBx4BcX7T57B5xXGIT6LJ6YlS86saiG6SXHIG5ptgICphdefNysfVgkSUmqTsgzfzvjp2lzIw8Re7xi735Kd7B612y5Tkswm0ETP7NIeQ7-Tc_3h37GV04ISfx0LMD75UvgllxcDz91Bl6N3-WN4KwCeKIfJ-iZj-EJLwoBmJjGsgNCNTn5DTzF_joFcyett__WVc14Ex-BqRSq8Hr2fMVoHpNXze3QUJ7PcD4JRY2Ywg5R9VkHz3mkhY9kI1cWeHdQypeSsM8niQK1XCWJz_aTqsP35MshDnHkWhmDyg"
															},
															{
																"key": "Authorization",
																"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiIzZGNjMzY3OWIwYTE0NmU2YWYyZjlmZDA5NWU5NTlkNCJ9.0NZhX5sqUNy-GZUya90aQFkr5ZNiqfOuELYz_IvoyS8"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "fileUrl",
																	"value": "{{partial_URL}}",
																	"type": "text"
																},
																{
																	"key": "mimeType",
																	"value": "dummy",
																	"type": "text",
																	"disabled": true
																}
															]
														},
														"url": {
															"raw": "{{host}}/content/v4/upload/{{content_id}}",
															"host": [
																"{{host}}"
															],
															"path": [
																"content",
																"v4",
																"upload",
																"{{content_id}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Negative",
											"item": [
												{
													"name": "Upload the content with invalid url and valid mime type",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let jsonResponse = pm.response.json();\r",
																	"\r",
																	"pm.test(\"Status code is 400\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string Bad Request\", function () {\r",
																	"    pm.response.to.have.status(\"Bad Request\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"id should be api.content.upload\", function () {\r",
																	"   pm.expect(jsonResponse.id).to.eql(\"api.content.upload\");\r",
																	"});\r",
																	"pm.test(\"ver should be 4.0\", function () {\r",
																	"   pm.expect(jsonResponse.ver).to.eql(\"4.0\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Params has keys: resmsgid , msgid , err , status , errmsg \", () => {\r",
																	"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid', 'msgid','err','status','errmsg');\r",
																	"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");\r",
																	"  pm.expect(jsonResponse.params.msgid).to.be.a('null');\r",
																	"  pm.expect(jsonResponse.params.err).to.be.a('string');\r",
																	"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");\r",
																	"  pm.expect(jsonResponse.params.errmsg).to.be.a('string');\r",
																	"});\r",
																	"\r",
																	"pm.test(\"err is ERR_INVALID_FILE_URL\", function () {\r",
																	"    pm.expect(jsonResponse.params.err).to.be.equal(\"ERR_INVALID_FILE_URL\");\r",
																	"});\r",
																	"pm.test(\"errmsg: Please Provide Valid File Url!\", function () {\r",
																	"    pm.expect(jsonResponse.params.errmsg).to.be.equal(\"Please Provide Valid File Url!\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status is failed\", function () {\r",
																	"    pm.expect(jsonResponse.params.status).to.be.equal(\"failed\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"ResponseCode is CLIENT_ERROR\", function () {\r",
																	"    pm.expect(jsonResponse.responseCode).to.be.equal(\"CLIENT_ERROR\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "user-id",
																"value": "mahesh"
															},
															{
																"key": "Cookie",
																"value": "connect.sid=s%3AnLNdCeYI27WUkZBIFdX1J5MKTM6ISEdJ.SFTq%2FeT2cVLh5TSEWmwZPCekWDSeNXILHPDyziKa26E"
															},
															{
																"key": "X-Channel-Id",
																"value": "0137541424673095687"
															},
															{
																"key": "X-Authenticated-User-token",
																"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6ImFjY2Vzc3YxX2tleTEifQ.eyJhdWQiOiJodHRwczovL2Rldi5zdW5iaXJkZWQub3JnL2F1dGgvcmVhbG1zL3N1bmJpcmQiLCJzdWIiOiJmOjVhOGEzZjJiLTM0MDktNDJlMC05MDAxLWY5MTNiYzBmZGUzMToxNTVjZTNjNS03MTNlLTQ3NDktYmMxYy05NWQwOWM2NDA5MTQiLCJyb2xlcyI6W3sicm9sZSI6IkNPTlRFTlRfQ1JFQVRPUiIsInNjb3BlIjpbeyJvcmdhbmlzYXRpb25JZCI6IjAxMzc1NDE0MjQ2NzMwOTU2ODcifV19LHsicm9sZSI6IkNPVVJTRV9NRU5UT1IiLCJzY29wZSI6W3sib3JnYW5pc2F0aW9uSWQiOiIwMTM3NTQxNDI0NjczMDk1Njg3In1dfSx7InJvbGUiOiJQVUJMSUMiLCJzY29wZSI6W119XSwiaXNzIjoiaHR0cHM6Ly9kZXYuc3VuYmlyZGVkLm9yZy9hdXRoL3JlYWxtcy9zdW5iaXJkIiwibmFtZSI6ImNvbnRlbnRDcmVhdG9yIiwidHlwIjoiQmVhcmVyIiwiZXhwIjoxNzAyMzI0NjU0LCJpYXQiOjE3MDIyODE0NTR9.MxiIhP6YJmI1XbozLNoJeQAbdQKs597f2mlNHWcJ-ZZIXvBx4BcX7T57B5xXGIT6LJ6YlS86saiG6SXHIG5ptgICphdefNysfVgkSUmqTsgzfzvjp2lzIw8Re7xi735Kd7B612y5Tkswm0ETP7NIeQ7-Tc_3h37GV04ISfx0LMD75UvgllxcDz91Bl6N3-WN4KwCeKIfJ-iZj-EJLwoBmJjGsgNCNTn5DTzF_joFcyett__WVc14Ex-BqRSq8Hr2fMVoHpNXze3QUJ7PcD4JRY2Ywg5R9VkHz3mkhY9kI1cWeHdQypeSsM8niQK1XCWJz_aTqsP35MshDnHkWhmDyg"
															},
															{
																"key": "Authorization",
																"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiIzZGNjMzY3OWIwYTE0NmU2YWYyZjlmZDA5NWU5NTlkNCJ9.0NZhX5sqUNy-GZUya90aQFkr5ZNiqfOuELYz_IvoyS8"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "fileUrl",
																	"value": "dummy",
																	"type": "text"
																},
																{
																	"key": "mimeType",
																	"value": "application/pdf",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{host}}/content/v4/upload/{{content_id}}",
															"host": [
																"{{host}}"
															],
															"path": [
																"content",
																"v4",
																"upload",
																"{{content_id}}"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "flag",
							"item": [
								{
									"name": "Flag content",
									"item": [
										{
											"name": "Pre requisite",
											"item": [
												{
													"name": "Create content",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let jsonResponse = pm.response.json();\r",
																	"\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Status code name has string OK\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"pm.test(\"id should be api.content.create\", function () {\r",
																	"   pm.expect(jsonResponse.id).to.eql(\"api.content.create\");\r",
																	"});\r",
																	"pm.test(\"ver should be 4.0\", function () {\r",
																	"   pm.expect(jsonResponse.ver).to.eql(\"4.0\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Params has keys: resmsgid , msgid , err , status , errmsg \", () => {\r",
																	"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid', 'msgid','err','status','errmsg');\r",
																	"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");\r",
																	"  pm.expect(jsonResponse.params.msgid).to.be.a('null');\r",
																	"  pm.expect(jsonResponse.params.err).to.be.a('null');\r",
																	"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");\r",
																	"  pm.expect(jsonResponse.params.errmsg).to.be.a('null');\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status is successful\", function () {\r",
																	"    pm.expect(jsonResponse.params.status).to.be.equal(\"successful\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"ResponseCode is OK\", function () {\r",
																	"    pm.expect(jsonResponse.responseCode).to.be.equal(\"OK\");\r",
																	"});\r",
																	"\r",
																	"// Set global variable\r",
																	"pm.collectionVariables.set(\"flag_content_id\", jsonResponse.result.identifier);\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-Authenticated-User-token",
																"value": "{{keycloak_access_token}}"
															},
															{
																"key": "X-Channel-Id",
																"value": "sunbird"
															},
															{
																"key": "Authorization",
																"value": "{{kong_api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"PDF Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"Explanation Content\"\n        }\n    }\n}"
														},
														"url": {
															"raw": "{{host}}/content/v4/create",
															"host": [
																"{{host}}"
															],
															"path": [
																"content",
																"v4",
																"create"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Positive",
											"item": [
												{
													"name": "Flag valid Content",
													"request": {
														"auth": {
															"type": "apikey",
															"apikey": [
																{
																	"key": "key",
																	"value": "Authorization",
																	"type": "string"
																},
																{
																	"key": "value",
																	"value": "<API Key>",
																	"type": "string"
																},
																{
																	"key": "in",
																	"value": "header",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) The Registered User ID to execute the API.",
																"key": "X-Authenticated-Userid",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/flag/{{flag_content_id}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"flag",
																"{{flag_content_id}}"
															]
														},
														"description": "This API is associated with setting Flag for content.\n  - The **_/flag/{content Id}_** endpoint executes a request to set flagging status for content ,flag can either be set to \"Accepted\" or \"Rejected\".\n  - The endpoint for **Flag Content** is `/content/v2/flag`\n  - It points to knowledge-mw-service - `/v2/content/flag`\n  - {...}refers to a section of reject endpoint URL path that needs to be replaced by appropriate Id.\n  - You need to provide a valid content Id value in {Content Id} field of API URL.\n  - It is mandatory to provide values for parameters marked with *.\n  - Mandatory fields cannot be null or empty."
													},
													"response": [
														{
															"name": "OK ! Successful operation.\"Content Flagging\" operation was successfully executed.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																		"key": "Content-Type",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) The Registered User ID to execute the API.",
																		"key": "X-Authenticated-Userid",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																		"key": "Authorization",
																		"value": "ea laborum"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/content/v2/flag/:Content_Id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"content",
																		"v2",
																		"flag",
																		":Content_Id"
																	],
																	"variable": [
																		{
																			"key": "Content_Id",
																			"value": "ea laborum",
																			"description": "(Required) Please append a valid Content Id To the Request URL"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"id\": \"api.content.flag\",\n  \"ver\": \"3.0\",\n  \"ts\": \"2020-12-11T08:45:49ZZ\",\n  \"params\": {\n    \"resmsgid\": \"9c935e0c-b504-45e6-bd15-313f46c4613f\",\n    \"msgid\": null,\n    \"err\": null,\n    \"status\": \"successful\",\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"identifier\": \"do_213143334457982976144\",\n    \"node_id\": \"do_213143334457982976144\",\n    \"versionKey\": \"1607676349236\"\n  }\n}"
														},
														{
															"name": "ERR_CONTENT_NOT_FLAGGABLE! Looks like contentId is not in flaggable status.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																		"key": "Content-Type",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) The Registered User ID to execute the API.",
																		"key": "X-Authenticated-Userid",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																		"key": "Authorization",
																		"value": "ea laborum"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/content/v2/flag/:Content_Id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"content",
																		"v2",
																		"flag",
																		":Content_Id"
																	],
																	"variable": [
																		{
																			"key": "Content_Id",
																			"value": "ea laborum",
																			"description": "(Required) Please append a valid Content Id To the Request URL"
																		}
																	]
																}
															},
															"status": "Bad Request",
															"code": 400,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"id\": \"api.content.flag\",\n  \"ver\": \"3.0\",\n  \"ts\": \"2020-12-11T08:44:53ZZ\",\n  \"params\": {\n    \"resmsgid\": \"2ff1945b-a114-44ca-929e-7d19a6f8a745\",\n    \"msgid\": null,\n    \"err\": \"ERR_CONTENT_NOT_FLAGGABLE\",\n    \"status\": \"failed\",\n    \"errmsg\": \"Unpublished Content do_213168073757138944196 cannot be flagged\"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {\n    \"messages\": null\n  }\n}"
														},
														{
															"name": "RESOURCE NOT FOUND,**Content Send for Flag** operation failed !The possible reason for failure is that you may have provided wrong content id.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																		"key": "Content-Type",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) The Registered User ID to execute the API.",
																		"key": "X-Authenticated-Userid",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																		"key": "Authorization",
																		"value": "ea laborum"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/content/v2/flag/:Content_Id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"content",
																		"v2",
																		"flag",
																		":Content_Id"
																	],
																	"variable": [
																		{
																			"key": "Content_Id",
																			"value": "ea laborum",
																			"description": "(Required) Please append a valid Content Id To the Request URL"
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"id\": \"api.content.flag\",\n  \"ver\": \"3.0\",\n  \"ts\": \"2020-12-11T09:41:41ZZ\",\n  \"params\": {\n    \"resmsgid\": \"5b4f0b33-3941-4c18-b8bf-123c2e0348e6\",\n    \"msgid\": null,\n    \"err\": \"NOT_FOUND\",\n    \"status\": \"failed\",\n    \"errmsg\": \"Error! Node(s) doesn't Exists. | [Invalid Node Id.]: do_2131433344579829761441\"\n  },\n  \"responseCode\": \"RESOURCE_NOT_FOUND\",\n  \"result\": {\n    \"messages\": null\n  }\n}"
														},
														{
															"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																		"key": "Content-Type",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) The Registered User ID to execute the API.",
																		"key": "X-Authenticated-Userid",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																		"key": "Authorization",
																		"value": "ea laborum"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/content/v2/flag/:Content_Id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"content",
																		"v2",
																		"flag",
																		":Content_Id"
																	],
																	"variable": [
																		{
																			"key": "Content_Id",
																			"value": "ea laborum",
																			"description": "(Required) Please append a valid Content Id To the Request URL"
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"result\": {},\n  \"id\": \"cupidatat reprehenderit dolor\",\n  \"ver\": \"minim anim commodo\",\n  \"ts\": \"commodo\",\n  \"params\": {\n    \"resmsgid\": \"pariatur repre\",\n    \"msgid\": \"irure\",\n    \"err\": \"consequat esse ea\",\n    \"status\": \"esse\",\n    \"errmsg\": \"aliqua laboris velit\"\n  },\n  \"responseCode\": \"reprehenderit dolor elit sunt dolore\"\n}"
														}
													]
												}
											]
										},
										{
											"name": "Negative",
											"item": [
												{
													"name": "Flag invalid Content",
													"request": {
														"auth": {
															"type": "apikey",
															"apikey": [
																{
																	"key": "key",
																	"value": "Authorization",
																	"type": "string"
																},
																{
																	"key": "value",
																	"value": "<API Key>",
																	"type": "string"
																},
																{
																	"key": "in",
																	"value": "header",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) The Registered User ID to execute the API.",
																"key": "X-Authenticated-Userid",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/flag/dummy",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"flag",
																"dummy"
															]
														},
														"description": "This API is associated with setting Flag for content.\n  - The **_/flag/{content Id}_** endpoint executes a request to set flagging status for content ,flag can either be set to \"Accepted\" or \"Rejected\".\n  - The endpoint for **Flag Content** is `/content/v2/flag`\n  - It points to knowledge-mw-service - `/v2/content/flag`\n  - {...}refers to a section of reject endpoint URL path that needs to be replaced by appropriate Id.\n  - You need to provide a valid content Id value in {Content Id} field of API URL.\n  - It is mandatory to provide values for parameters marked with *.\n  - Mandatory fields cannot be null or empty."
													},
													"response": [
														{
															"name": "OK ! Successful operation.\"Content Flagging\" operation was successfully executed.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																		"key": "Content-Type",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) The Registered User ID to execute the API.",
																		"key": "X-Authenticated-Userid",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																		"key": "Authorization",
																		"value": "ea laborum"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/content/v2/flag/:Content_Id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"content",
																		"v2",
																		"flag",
																		":Content_Id"
																	],
																	"variable": [
																		{
																			"key": "Content_Id",
																			"value": "ea laborum",
																			"description": "(Required) Please append a valid Content Id To the Request URL"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"id\": \"api.content.flag\",\n  \"ver\": \"3.0\",\n  \"ts\": \"2020-12-11T08:45:49ZZ\",\n  \"params\": {\n    \"resmsgid\": \"9c935e0c-b504-45e6-bd15-313f46c4613f\",\n    \"msgid\": null,\n    \"err\": null,\n    \"status\": \"successful\",\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"identifier\": \"do_213143334457982976144\",\n    \"node_id\": \"do_213143334457982976144\",\n    \"versionKey\": \"1607676349236\"\n  }\n}"
														},
														{
															"name": "ERR_CONTENT_NOT_FLAGGABLE! Looks like contentId is not in flaggable status.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																		"key": "Content-Type",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) The Registered User ID to execute the API.",
																		"key": "X-Authenticated-Userid",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																		"key": "Authorization",
																		"value": "ea laborum"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/content/v2/flag/:Content_Id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"content",
																		"v2",
																		"flag",
																		":Content_Id"
																	],
																	"variable": [
																		{
																			"key": "Content_Id",
																			"value": "ea laborum",
																			"description": "(Required) Please append a valid Content Id To the Request URL"
																		}
																	]
																}
															},
															"status": "Bad Request",
															"code": 400,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"id\": \"api.content.flag\",\n  \"ver\": \"3.0\",\n  \"ts\": \"2020-12-11T08:44:53ZZ\",\n  \"params\": {\n    \"resmsgid\": \"2ff1945b-a114-44ca-929e-7d19a6f8a745\",\n    \"msgid\": null,\n    \"err\": \"ERR_CONTENT_NOT_FLAGGABLE\",\n    \"status\": \"failed\",\n    \"errmsg\": \"Unpublished Content do_213168073757138944196 cannot be flagged\"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {\n    \"messages\": null\n  }\n}"
														},
														{
															"name": "RESOURCE NOT FOUND,**Content Send for Flag** operation failed !The possible reason for failure is that you may have provided wrong content id.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																		"key": "Content-Type",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) The Registered User ID to execute the API.",
																		"key": "X-Authenticated-Userid",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																		"key": "Authorization",
																		"value": "ea laborum"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/content/v2/flag/:Content_Id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"content",
																		"v2",
																		"flag",
																		":Content_Id"
																	],
																	"variable": [
																		{
																			"key": "Content_Id",
																			"value": "ea laborum",
																			"description": "(Required) Please append a valid Content Id To the Request URL"
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"id\": \"api.content.flag\",\n  \"ver\": \"3.0\",\n  \"ts\": \"2020-12-11T09:41:41ZZ\",\n  \"params\": {\n    \"resmsgid\": \"5b4f0b33-3941-4c18-b8bf-123c2e0348e6\",\n    \"msgid\": null,\n    \"err\": \"NOT_FOUND\",\n    \"status\": \"failed\",\n    \"errmsg\": \"Error! Node(s) doesn't Exists. | [Invalid Node Id.]: do_2131433344579829761441\"\n  },\n  \"responseCode\": \"RESOURCE_NOT_FOUND\",\n  \"result\": {\n    \"messages\": null\n  }\n}"
														},
														{
															"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																		"key": "Content-Type",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) The Registered User ID to execute the API.",
																		"key": "X-Authenticated-Userid",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																		"key": "Authorization",
																		"value": "ea laborum"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/content/v2/flag/:Content_Id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"content",
																		"v2",
																		"flag",
																		":Content_Id"
																	],
																	"variable": [
																		{
																			"key": "Content_Id",
																			"value": "ea laborum",
																			"description": "(Required) Please append a valid Content Id To the Request URL"
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"result\": {},\n  \"id\": \"cupidatat reprehenderit dolor\",\n  \"ver\": \"minim anim commodo\",\n  \"ts\": \"commodo\",\n  \"params\": {\n    \"resmsgid\": \"pariatur repre\",\n    \"msgid\": \"irure\",\n    \"err\": \"consequat esse ea\",\n    \"status\": \"esse\",\n    \"errmsg\": \"aliqua laboris velit\"\n  },\n  \"responseCode\": \"reprehenderit dolor elit sunt dolore\"\n}"
														}
													]
												}
											]
										}
									]
								},
								{
									"name": "Flag accept",
									"item": [
										{
											"name": "Pre requisite",
											"item": [
												{
													"name": "Create content",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let jsonResponse = pm.response.json();\r",
																	"\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Status code name has string OK\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"pm.test(\"id should be api.content.create\", function () {\r",
																	"   pm.expect(jsonResponse.id).to.eql(\"api.content.create\");\r",
																	"});\r",
																	"pm.test(\"ver should be 4.0\", function () {\r",
																	"   pm.expect(jsonResponse.ver).to.eql(\"4.0\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Params has keys: resmsgid , msgid , err , status , errmsg \", () => {\r",
																	"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid', 'msgid','err','status','errmsg');\r",
																	"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");\r",
																	"  pm.expect(jsonResponse.params.msgid).to.be.a('null');\r",
																	"  pm.expect(jsonResponse.params.err).to.be.a('null');\r",
																	"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");\r",
																	"  pm.expect(jsonResponse.params.errmsg).to.be.a('null');\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status is successful\", function () {\r",
																	"    pm.expect(jsonResponse.params.status).to.be.equal(\"successful\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"ResponseCode is OK\", function () {\r",
																	"    pm.expect(jsonResponse.responseCode).to.be.equal(\"OK\");\r",
																	"});\r",
																	"\r",
																	"// Set global variable\r",
																	"pm.collectionVariables.set(\"flag_accept_content_id\", jsonResponse.result.identifier);\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-Authenticated-User-token",
																"value": "{{keycloak_access_token}}"
															},
															{
																"key": "X-Channel-Id",
																"value": "sunbird"
															},
															{
																"key": "Authorization",
																"value": "{{kong_api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"PDF Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"Explanation Content\"\n        }\n    }\n}"
														},
														"url": {
															"raw": "{{host}}/content/v4/create",
															"host": [
																"{{host}}"
															],
															"path": [
																"content",
																"v4",
																"create"
															]
														}
													},
													"response": []
												},
												{
													"name": "Flag valid Content Copy",
													"request": {
														"auth": {
															"type": "apikey",
															"apikey": [
																{
																	"key": "key",
																	"value": "Authorization",
																	"type": "string"
																},
																{
																	"key": "value",
																	"value": "<API Key>",
																	"type": "string"
																},
																{
																	"key": "in",
																	"value": "header",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) The Registered User ID to execute the API.",
																"key": "X-Authenticated-Userid",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/flag/{{flag_accept_content_id}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"flag",
																"{{flag_accept_content_id}}"
															]
														},
														"description": "This API is associated with setting Flag for content.\n  - The **_/flag/{content Id}_** endpoint executes a request to set flagging status for content ,flag can either be set to \"Accepted\" or \"Rejected\".\n  - The endpoint for **Flag Content** is `/content/v2/flag`\n  - It points to knowledge-mw-service - `/v2/content/flag`\n  - {...}refers to a section of reject endpoint URL path that needs to be replaced by appropriate Id.\n  - You need to provide a valid content Id value in {Content Id} field of API URL.\n  - It is mandatory to provide values for parameters marked with *.\n  - Mandatory fields cannot be null or empty."
													},
													"response": [
														{
															"name": "OK ! Successful operation.\"Content Flagging\" operation was successfully executed.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																		"key": "Content-Type",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) The Registered User ID to execute the API.",
																		"key": "X-Authenticated-Userid",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																		"key": "Authorization",
																		"value": "ea laborum"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/content/v2/flag/:Content_Id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"content",
																		"v2",
																		"flag",
																		":Content_Id"
																	],
																	"variable": [
																		{
																			"key": "Content_Id",
																			"value": "ea laborum",
																			"description": "(Required) Please append a valid Content Id To the Request URL"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"id\": \"api.content.flag\",\n  \"ver\": \"3.0\",\n  \"ts\": \"2020-12-11T08:45:49ZZ\",\n  \"params\": {\n    \"resmsgid\": \"9c935e0c-b504-45e6-bd15-313f46c4613f\",\n    \"msgid\": null,\n    \"err\": null,\n    \"status\": \"successful\",\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"identifier\": \"do_213143334457982976144\",\n    \"node_id\": \"do_213143334457982976144\",\n    \"versionKey\": \"1607676349236\"\n  }\n}"
														},
														{
															"name": "ERR_CONTENT_NOT_FLAGGABLE! Looks like contentId is not in flaggable status.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																		"key": "Content-Type",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) The Registered User ID to execute the API.",
																		"key": "X-Authenticated-Userid",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																		"key": "Authorization",
																		"value": "ea laborum"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/content/v2/flag/:Content_Id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"content",
																		"v2",
																		"flag",
																		":Content_Id"
																	],
																	"variable": [
																		{
																			"key": "Content_Id",
																			"value": "ea laborum",
																			"description": "(Required) Please append a valid Content Id To the Request URL"
																		}
																	]
																}
															},
															"status": "Bad Request",
															"code": 400,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"id\": \"api.content.flag\",\n  \"ver\": \"3.0\",\n  \"ts\": \"2020-12-11T08:44:53ZZ\",\n  \"params\": {\n    \"resmsgid\": \"2ff1945b-a114-44ca-929e-7d19a6f8a745\",\n    \"msgid\": null,\n    \"err\": \"ERR_CONTENT_NOT_FLAGGABLE\",\n    \"status\": \"failed\",\n    \"errmsg\": \"Unpublished Content do_213168073757138944196 cannot be flagged\"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {\n    \"messages\": null\n  }\n}"
														},
														{
															"name": "RESOURCE NOT FOUND,**Content Send for Flag** operation failed !The possible reason for failure is that you may have provided wrong content id.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																		"key": "Content-Type",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) The Registered User ID to execute the API.",
																		"key": "X-Authenticated-Userid",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																		"key": "Authorization",
																		"value": "ea laborum"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/content/v2/flag/:Content_Id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"content",
																		"v2",
																		"flag",
																		":Content_Id"
																	],
																	"variable": [
																		{
																			"key": "Content_Id",
																			"value": "ea laborum",
																			"description": "(Required) Please append a valid Content Id To the Request URL"
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"id\": \"api.content.flag\",\n  \"ver\": \"3.0\",\n  \"ts\": \"2020-12-11T09:41:41ZZ\",\n  \"params\": {\n    \"resmsgid\": \"5b4f0b33-3941-4c18-b8bf-123c2e0348e6\",\n    \"msgid\": null,\n    \"err\": \"NOT_FOUND\",\n    \"status\": \"failed\",\n    \"errmsg\": \"Error! Node(s) doesn't Exists. | [Invalid Node Id.]: do_2131433344579829761441\"\n  },\n  \"responseCode\": \"RESOURCE_NOT_FOUND\",\n  \"result\": {\n    \"messages\": null\n  }\n}"
														},
														{
															"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																		"key": "Content-Type",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) The Registered User ID to execute the API.",
																		"key": "X-Authenticated-Userid",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																		"key": "Authorization",
																		"value": "ea laborum"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/content/v2/flag/:Content_Id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"content",
																		"v2",
																		"flag",
																		":Content_Id"
																	],
																	"variable": [
																		{
																			"key": "Content_Id",
																			"value": "ea laborum",
																			"description": "(Required) Please append a valid Content Id To the Request URL"
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"result\": {},\n  \"id\": \"cupidatat reprehenderit dolor\",\n  \"ver\": \"minim anim commodo\",\n  \"ts\": \"commodo\",\n  \"params\": {\n    \"resmsgid\": \"pariatur repre\",\n    \"msgid\": \"irure\",\n    \"err\": \"consequat esse ea\",\n    \"status\": \"esse\",\n    \"errmsg\": \"aliqua laboris velit\"\n  },\n  \"responseCode\": \"reprehenderit dolor elit sunt dolore\"\n}"
														}
													]
												}
											]
										},
										{
											"name": "Positive",
											"item": [
												{
													"name": "Flag accept valid content id",
													"request": {
														"auth": {
															"type": "apikey",
															"apikey": [
																{
																	"key": "key",
																	"value": "Authorization",
																	"type": "string"
																},
																{
																	"key": "value",
																	"value": "<API Key>",
																	"type": "string"
																},
																{
																	"key": "in",
																	"value": "header",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json\n  - Multipart/form-data\n  - Application/x-www-form-urlencoded",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) The Registered User ID to execute the API.",
																"key": "X-Authenticated-User-token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"versionKey\": \"1507102327646\"\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/flag/accept/{{flag_accept_content_id}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"flag",
																"accept",
																"{{flag_accept_content_id}}"
															]
														},
														"description": "This API is associated with setting Accept Flag for content under review process on the Sunbird Platform .\n  - The **_/flag/accept/_**endpoint executes request for flagging content under review to \"Accept flag\", if content is found appropriate.\n  - The endpoint for **Flag Accept Content** is `/content/v2/flag/accept`\n  - It points to knowledge-mw-service - `/v2/content/flag/accept`\n  - It is mandatory to provide values for parameters marked with *.\n  - Mandatory fields cannot be null or empty."
													},
													"response": [
														{
															"name": "OK ! Successful operation.\"Accept Flag\" operation was successfully executed.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json\n  - Multipart/form-data\n  - Application/x-www-form-urlencoded",
																		"key": "Content-Type",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) The Registered User ID to execute the API.",
																		"key": "X-Authenticated-User-token",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																		"key": "Authorization",
																		"value": "ea laborum"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"request\": {\n    \"versionKey\": \"1507102327646\"\n  }\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/content/v2/flag/accept/:Content_Id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"content",
																		"v2",
																		"flag",
																		"accept",
																		":Content_Id"
																	],
																	"variable": [
																		{
																			"key": "Content_Id",
																			"value": "ea laborum",
																			"description": "(Required) Please append a valid Content Id To the Request URL"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"id\": \"api.flag.accept\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-11T11:40:01.464Z\",\n  \"params\": {\n    \"resmsgid\": \"9a9e4b80-3ba5-11eb-b0a2-8d5c9f561887\",\n    \"msgid\": \"9a49e9f0-3ba5-11eb-b0a2-8d5c9f561887\",\n    \"status\": \"successful\",\n    \"err\": null,\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"identifier\": \"do_31221753157709004825531\",\n    \"node_id\": \"do_31221753157709004825531\",\n    \"versionKey\": \"1607686801161\"\n  }\n}"
														},
														{
															"name": "BAD REQUEST. The \"Accept Flag\" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json\n  - Multipart/form-data\n  - Application/x-www-form-urlencoded",
																		"key": "Content-Type",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) The Registered User ID to execute the API.",
																		"key": "X-Authenticated-User-token",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																		"key": "Authorization",
																		"value": "ea laborum"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"request\": {\n    \"versionKey\": \"1507102327646\"\n  }\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/content/v2/flag/accept/:Content_Id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"content",
																		"v2",
																		"flag",
																		"accept",
																		":Content_Id"
																	],
																	"variable": [
																		{
																			"key": "Content_Id",
																			"value": "ea laborum",
																			"description": "(Required) Please append a valid Content Id To the Request URL"
																		}
																	]
																}
															},
															"status": "Bad Request",
															"code": 400,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"id\": \"api.flag.accept\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-11T11:25:34.614Z\",\n  \"params\": {\n    \"resmsgid\": \"95ef7b60-3ba3-11eb-be5b-f9d249ba9049\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"ERR_INVALID_CONTENT\",\n    \"errmsg\": \"Invalid Flagged Content! Content Can Not Be Accepted.\"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {}\n}"
														},
														{
															"name": "RESOURCE NOT FOUND,**Content Send for Flag Accept** operation failed !The possible reason for failure is that you may have provided wrong content id.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json\n  - Multipart/form-data\n  - Application/x-www-form-urlencoded",
																		"key": "Content-Type",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) The Registered User ID to execute the API.",
																		"key": "X-Authenticated-User-token",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																		"key": "Authorization",
																		"value": "ea laborum"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"request\": {\n    \"versionKey\": \"1507102327646\"\n  }\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/content/v2/flag/accept/:Content_Id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"content",
																		"v2",
																		"flag",
																		"accept",
																		":Content_Id"
																	],
																	"variable": [
																		{
																			"key": "Content_Id",
																			"value": "ea laborum",
																			"description": "(Required) Please append a valid Content Id To the Request URL"
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"id\": \"api.flag.accept\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-11T11:24:42.903Z\",\n  \"params\": {\n    \"resmsgid\": \"771d0270-3ba3-11eb-be5b-f9d249ba9049\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"NOT_FOUND\",\n    \"errmsg\": \"Error! Node(s) doesn't Exists. | [Invalid Node Id.]: do_213143334457982976144\"\n  },\n  \"responseCode\": \"RESOURCE_NOT_FOUND\",\n  \"result\": {}\n}"
														},
														{
															"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json\n  - Multipart/form-data\n  - Application/x-www-form-urlencoded",
																		"key": "Content-Type",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) The Registered User ID to execute the API.",
																		"key": "X-Authenticated-User-token",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																		"key": "Authorization",
																		"value": "ea laborum"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"request\": {\n    \"versionKey\": \"1507102327646\"\n  }\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/content/v2/flag/accept/:Content_Id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"content",
																		"v2",
																		"flag",
																		"accept",
																		":Content_Id"
																	],
																	"variable": [
																		{
																			"key": "Content_Id",
																			"value": "ea laborum",
																			"description": "(Required) Please append a valid Content Id To the Request URL"
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"result\": {},\n  \"id\": \"cupidatat reprehenderit dolor\",\n  \"ver\": \"minim anim commodo\",\n  \"ts\": \"commodo\",\n  \"params\": {\n    \"resmsgid\": \"pariatur repre\",\n    \"msgid\": \"irure\",\n    \"err\": \"consequat esse ea\",\n    \"status\": \"esse\",\n    \"errmsg\": \"aliqua laboris velit\"\n  },\n  \"responseCode\": \"reprehenderit dolor elit sunt dolore\"\n}"
														}
													]
												}
											]
										},
										{
											"name": "Negative",
											"item": [
												{
													"name": "Flag accept invalid content id",
													"request": {
														"auth": {
															"type": "apikey",
															"apikey": [
																{
																	"key": "key",
																	"value": "Authorization",
																	"type": "string"
																},
																{
																	"key": "value",
																	"value": "<API Key>",
																	"type": "string"
																},
																{
																	"key": "in",
																	"value": "header",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json\n  - Multipart/form-data\n  - Application/x-www-form-urlencoded",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) The Registered User ID to execute the API.",
																"key": "X-Authenticated-User-token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"versionKey\": \"1507102327646\"\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/flag/accept/{{flag_accept_content_id}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"flag",
																"accept",
																"{{flag_accept_content_id}}"
															]
														},
														"description": "This API is associated with setting Accept Flag for content under review process on the Sunbird Platform .\n  - The **_/flag/accept/_**endpoint executes request for flagging content under review to \"Accept flag\", if content is found appropriate.\n  - The endpoint for **Flag Accept Content** is `/content/v2/flag/accept`\n  - It points to knowledge-mw-service - `/v2/content/flag/accept`\n  - It is mandatory to provide values for parameters marked with *.\n  - Mandatory fields cannot be null or empty."
													},
													"response": [
														{
															"name": "OK ! Successful operation.\"Accept Flag\" operation was successfully executed.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json\n  - Multipart/form-data\n  - Application/x-www-form-urlencoded",
																		"key": "Content-Type",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) The Registered User ID to execute the API.",
																		"key": "X-Authenticated-User-token",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																		"key": "Authorization",
																		"value": "ea laborum"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"request\": {\n    \"versionKey\": \"1507102327646\"\n  }\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/content/v2/flag/accept/:Content_Id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"content",
																		"v2",
																		"flag",
																		"accept",
																		":Content_Id"
																	],
																	"variable": [
																		{
																			"key": "Content_Id",
																			"value": "ea laborum",
																			"description": "(Required) Please append a valid Content Id To the Request URL"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"id\": \"api.flag.accept\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-11T11:40:01.464Z\",\n  \"params\": {\n    \"resmsgid\": \"9a9e4b80-3ba5-11eb-b0a2-8d5c9f561887\",\n    \"msgid\": \"9a49e9f0-3ba5-11eb-b0a2-8d5c9f561887\",\n    \"status\": \"successful\",\n    \"err\": null,\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"identifier\": \"do_31221753157709004825531\",\n    \"node_id\": \"do_31221753157709004825531\",\n    \"versionKey\": \"1607686801161\"\n  }\n}"
														},
														{
															"name": "BAD REQUEST. The \"Accept Flag\" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json\n  - Multipart/form-data\n  - Application/x-www-form-urlencoded",
																		"key": "Content-Type",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) The Registered User ID to execute the API.",
																		"key": "X-Authenticated-User-token",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																		"key": "Authorization",
																		"value": "ea laborum"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"request\": {\n    \"versionKey\": \"1507102327646\"\n  }\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/content/v2/flag/accept/:Content_Id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"content",
																		"v2",
																		"flag",
																		"accept",
																		":Content_Id"
																	],
																	"variable": [
																		{
																			"key": "Content_Id",
																			"value": "ea laborum",
																			"description": "(Required) Please append a valid Content Id To the Request URL"
																		}
																	]
																}
															},
															"status": "Bad Request",
															"code": 400,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"id\": \"api.flag.accept\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-11T11:25:34.614Z\",\n  \"params\": {\n    \"resmsgid\": \"95ef7b60-3ba3-11eb-be5b-f9d249ba9049\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"ERR_INVALID_CONTENT\",\n    \"errmsg\": \"Invalid Flagged Content! Content Can Not Be Accepted.\"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {}\n}"
														},
														{
															"name": "RESOURCE NOT FOUND,**Content Send for Flag Accept** operation failed !The possible reason for failure is that you may have provided wrong content id.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json\n  - Multipart/form-data\n  - Application/x-www-form-urlencoded",
																		"key": "Content-Type",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) The Registered User ID to execute the API.",
																		"key": "X-Authenticated-User-token",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																		"key": "Authorization",
																		"value": "ea laborum"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"request\": {\n    \"versionKey\": \"1507102327646\"\n  }\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/content/v2/flag/accept/:Content_Id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"content",
																		"v2",
																		"flag",
																		"accept",
																		":Content_Id"
																	],
																	"variable": [
																		{
																			"key": "Content_Id",
																			"value": "ea laborum",
																			"description": "(Required) Please append a valid Content Id To the Request URL"
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"id\": \"api.flag.accept\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-11T11:24:42.903Z\",\n  \"params\": {\n    \"resmsgid\": \"771d0270-3ba3-11eb-be5b-f9d249ba9049\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"NOT_FOUND\",\n    \"errmsg\": \"Error! Node(s) doesn't Exists. | [Invalid Node Id.]: do_213143334457982976144\"\n  },\n  \"responseCode\": \"RESOURCE_NOT_FOUND\",\n  \"result\": {}\n}"
														},
														{
															"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json\n  - Multipart/form-data\n  - Application/x-www-form-urlencoded",
																		"key": "Content-Type",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) The Registered User ID to execute the API.",
																		"key": "X-Authenticated-User-token",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																		"key": "Authorization",
																		"value": "ea laborum"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"request\": {\n    \"versionKey\": \"1507102327646\"\n  }\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/content/v2/flag/accept/:Content_Id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"content",
																		"v2",
																		"flag",
																		"accept",
																		":Content_Id"
																	],
																	"variable": [
																		{
																			"key": "Content_Id",
																			"value": "ea laborum",
																			"description": "(Required) Please append a valid Content Id To the Request URL"
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"result\": {},\n  \"id\": \"cupidatat reprehenderit dolor\",\n  \"ver\": \"minim anim commodo\",\n  \"ts\": \"commodo\",\n  \"params\": {\n    \"resmsgid\": \"pariatur repre\",\n    \"msgid\": \"irure\",\n    \"err\": \"consequat esse ea\",\n    \"status\": \"esse\",\n    \"errmsg\": \"aliqua laboris velit\"\n  },\n  \"responseCode\": \"reprehenderit dolor elit sunt dolore\"\n}"
														}
													]
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "Create Content",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "Create content with minimal required attribute",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"Status code name has string OK\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"pm.test(\"id should be api.content.create\", function () {",
															"   pm.expect(jsonResponse.id).to.eql(\"api.content.create\");",
															"});",
															"pm.test(\"ver should be 4.0\", function () {",
															"   pm.expect(jsonResponse.ver).to.eql(\"4.0\");",
															"});",
															"",
															"pm.test(\"Params has keys: resmsgid , msgid , err , status , errmsg \", () => {",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid', 'msgid','err','status','errmsg');",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");",
															"  pm.expect(jsonResponse.params.msgid).to.be.a('null');",
															"  pm.expect(jsonResponse.params.err).to.be.a('null');",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a('null');",
															"});",
															"",
															"pm.test(\"Status is successful\", function () {",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"successful\");",
															"});",
															"",
															"pm.test(\"ResponseCode is OK\", function () {",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"OK\");",
															"});",
															"pm.test(\"Result has keys: identifier , node_id , versionKey\", () => {",
															"  pm.expect(jsonResponse.result).to.have.all.keys('identifier', 'node_id','versionKey');",
															"  pm.expect(jsonResponse.result.identifier).to.be.a(\"string\");",
															"  pm.expect(jsonResponse.result.versionKey).to.be.a(\"string\");",
															"  pm.expect(jsonResponse.result.node_id).to.be.a(\"string\");",
															"});",
															"",
															"// Set global variable",
															"pm.collectionVariables.set(\"content_id_01\", jsonResponse.result.identifier);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"connection": true
												}
											},
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{kong_api_key}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}"
													},
													{
														"key": "",
														"value": "",
														"disabled": true
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"Explanation Content\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/content/v4/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"content",
														"v4",
														"create"
													]
												},
												"description": "This API is associated with batch creation\nThe endpoint for Creates a Batch is /batch/create\nThe fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
											},
											"response": []
										},
										{
											"name": "Create content with identifier",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"Status code name has string OK\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"pm.test(\"id should be api.content.create\", function () {",
															"   pm.expect(jsonResponse.id).to.eql(\"api.content.create\");",
															"});",
															"pm.test(\"ver should be 4.0\", function () {",
															"   pm.expect(jsonResponse.ver).to.eql(\"4.0\");",
															"});",
															"",
															"pm.test(\"Params has keys: resmsgid , msgid , err , status , errmsg \", () => {",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid', 'msgid','err','status','errmsg');",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");",
															"  pm.expect(jsonResponse.params.msgid).to.be.a('null');",
															"  pm.expect(jsonResponse.params.err).to.be.a('null');",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a('null');",
															"});",
															"",
															"pm.test(\"Status is successful\", function () {",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"successful\");",
															"});",
															"",
															"pm.test(\"ResponseCode is OK\", function () {",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"OK\");",
															"});",
															"pm.test(\"Result has keys: identifier , node_id , versionKey\", () => {",
															"  pm.expect(jsonResponse.result).to.have.all.keys('identifier', 'node_id','versionKey');",
															"  pm.expect(jsonResponse.result.identifier).to.be.a(\"string\");",
															"  pm.expect(jsonResponse.result.versionKey).to.be.a(\"string\");",
															"  pm.expect(jsonResponse.result.node_id).to.be.a(\"string\");",
															"});",
															"",
															"// Result",
															"pm.test(`identifier should be equal to ${JSON.parse(request.data).request.content.identifier}`, () => {",
															"    pm.expect(jsonResponse.result.identifier).to.eql(`${JSON.parse(request.data).request.content.identifier}`);",
															"});",
															"pm.test(`node_id should be equal to ${JSON.parse(request.data).request.content.identifier}`, () => {",
															"    pm.expect(jsonResponse.result.node_id).to.eql(`${JSON.parse(request.data).request.content.identifier}`);",
															"});",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.collectionVariables.set(\"identifier\", \"some_identifier07\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"connection": true
												}
											},
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{auth_token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}"
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}"
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"identifier\": \"{{identifier}}\",\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"Explanation Content\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/content/v4/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"content",
														"v4",
														"create"
													]
												},
												"description": "This API is associated with batch creation\nThe endpoint for Creates a Batch is /batch/create\nThe fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
											},
											"response": []
										},
										{
											"name": "Create content with external fields",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"Status code name has string OK\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"pm.test(\"id should be api.content.create\", function () {",
															"   pm.expect(jsonResponse.id).to.eql(\"api.content.create\");",
															"});",
															"pm.test(\"ver should be 4.0\", function () {",
															"   pm.expect(jsonResponse.ver).to.eql(\"4.0\");",
															"});",
															"",
															"pm.test(\"Params has keys: resmsgid , msgid , err , status , errmsg \", () => {",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid', 'msgid','err','status','errmsg');",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");",
															"  pm.expect(jsonResponse.params.msgid).to.be.a('null');",
															"  pm.expect(jsonResponse.params.err).to.be.a('null');",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a('null');",
															"});",
															"",
															"pm.test(\"Status is successful\", function () {",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"successful\");",
															"});",
															"",
															"pm.test(\"ResponseCode is OK\", function () {",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"OK\");",
															"});",
															"pm.test(\"Result has keys: identifier , node_id , versionKey\", () => {",
															"  pm.expect(jsonResponse.result).to.have.all.keys('identifier', 'node_id','versionKey');",
															"  pm.expect(jsonResponse.result.identifier).to.be.a(\"string\");",
															"  pm.expect(jsonResponse.result.versionKey).to.be.a(\"string\");",
															"  pm.expect(jsonResponse.result.node_id).to.be.a(\"string\");",
															"});",
															"",
															"",
															"// Set global variable",
															"pm.collectionVariables.set(\"content_id_02\", jsonResponse.result.identifier);",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"connection": true
												}
											},
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{auth_token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}"
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}"
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"Explanation Content\",\n            \"body\": \"{\\\"key\\\":\\\"value\\\"}\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/content/v4/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"content",
														"v4",
														"create"
													]
												},
												"description": "This API is associated with batch creation\nThe endpoint for Creates a Batch is /batch/create\nThe fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
											},
											"response": []
										},
										{
											"name": "Create content with Special character in name",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"Status code name has string OK\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"pm.test(\"id should be api.content.create\", function () {",
															"   pm.expect(jsonResponse.id).to.eql(\"api.content.create\");",
															"});",
															"pm.test(\"ver should be 4.0\", function () {",
															"   pm.expect(jsonResponse.ver).to.eql(\"4.0\");",
															"});",
															"",
															"pm.test(\"Params has keys: resmsgid , msgid , err , status , errmsg \", () => {",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid', 'msgid','err','status','errmsg');",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");",
															"  pm.expect(jsonResponse.params.msgid).to.be.a('null');",
															"  pm.expect(jsonResponse.params.err).to.be.a('null');",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a('null');",
															"});",
															"",
															"pm.test(\"Status is successful\", function () {",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"successful\");",
															"});",
															"",
															"pm.test(\"ResponseCode is OK\", function () {",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"OK\");",
															"});",
															"pm.test(\"Result has keys: identifier , node_id , versionKey\", () => {",
															"  pm.expect(jsonResponse.result).to.have.all.keys('identifier', 'node_id','versionKey');",
															"  pm.expect(jsonResponse.result.identifier).to.be.a(\"string\");",
															"  pm.expect(jsonResponse.result.versionKey).to.be.a(\"string\");",
															"  pm.expect(jsonResponse.result.node_id).to.be.a(\"string\");",
															"});",
															"",
															"",
															"// Set global variable",
															"pm.collectionVariables.set(\"content_id_03\", jsonResponse.result.identifier);",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"connection": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}"
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}"
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"~`S!@#$%^&*()_+=:;\\\"'<,>.?/\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"Explanation Content\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/content/v4/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"content",
														"v4",
														"create"
													]
												},
												"description": "This API is associated with batch creation\nThe endpoint for Creates a Batch is /batch/create\nThe fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Create content with missing channel",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()",
															"",
															"//Verification",
															"pm.test(\"Status code is 400\", () => {",
															"    pm.response.to.have.status(400)",
															"});",
															"//code name contains a string",
															"tests[\"Status code name has string \\\"Bad Request\\\"\"] = responseCode.name.has(\"Bad Request\");",
															"",
															"pm.test(\"id should be api.content.create\", function () {",
															"   pm.expect(jsonResponse.id).to.eql(\"api.content.create\");",
															"});",
															"",
															"pm.test(\"ver should be 4.0\", function () {",
															"   pm.expect(jsonResponse.ver).to.eql(\"4.0\");",
															"});",
															"",
															"pm.test(\"Params has keys: resmsgid , msgid , err , status , errmsg \", () => {",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid', 'msgid','err','status','errmsg');",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");",
															"  pm.expect(jsonResponse.params.msgid).to.be.a('null');",
															"  pm.expect(jsonResponse.params.err).to.be.a('string');",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a('string');",
															"});",
															"",
															"pm.test(\"Verify keys and data type of the response result\", () => {",
															"  pm.expect(jsonResponse.result).to.be.an(\"object\");",
															"  pm.expect(jsonResponse.result).to.have.all.keys('messages');",
															"  pm.expect(jsonResponse.result.messages).to.not.be.empty;",
															"});",
															"",
															"//Validation",
															"// Response body",
															"pm.test(\"responseCode should be \\\"CLIENT_ERROR\\\"\", () => {",
															"    pm.expect(jsonResponse.responseCode).to.eql(\"CLIENT_ERROR\");",
															"});",
															"",
															"// Params",
															"pm.test(\"params.err should be \\\"CLIENT_ERROR\\\"\", () => {",
															"    pm.expect(jsonResponse.params.err).to.eql(\"CLIENT_ERROR\");",
															"});",
															"pm.test(\"params.errmsg should be \\\"Validation Errors\\\"\", () => {",
															"    pm.expect(jsonResponse.params.errmsg).to.eql(\"Validation Errors\");",
															"});",
															"",
															"// Result",
															"pm.test(\"result body should include messages \\\"Required Metadata channel not set\\\"\", () => {",
															"    pm.expect(jsonResponse.result.messages).to.have.length(1)",
															"    pm.expect(jsonResponse.result.messages).to.include('Required Metadata channel not set');",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"connection": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}"
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}"
													},
													{
														"key": "X-Channel-Id",
														"value": "",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"request\": {\n    \"content\": {\n      \"name\": \"Untitled Content\",\n      \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n      \"mimeType\": \"application/pdf\",\n      \"createdBy\": \"530b19ea-dc8d-4cc7-a4b5-0c0214c8113a\",\n      \"resourceType\": \"Learn\",\n      \"framework\": \"ekstep_ncert_k-12\",\n      \"primaryCategory\": \"Explanation Content\"\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{host}}/content/v4/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"content",
														"v4",
														"create"
													]
												},
												"description": "This API is associated with batch creation\nThe endpoint for Creates a Batch is /batch/create\nThe fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
											},
											"response": []
										},
										{
											"name": "Create content with empty channel",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()",
															"",
															"//Verification",
															"pm.test(\"Status code is 400\", () => {",
															"    pm.response.to.have.status(400)",
															"});",
															"pm.test(\"id should be api.content.create\", function () {",
															"   pm.expect(jsonResponse.id).to.eql(\"api.content.create\");",
															"});",
															"",
															"pm.test(\"ver should be 4.0\", function () {",
															"   pm.expect(jsonResponse.ver).to.eql(\"4.0\");",
															"});",
															"",
															"pm.test(\"Params has keys: resmsgid , msgid , err , status , errmsg \", () => {",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid', 'msgid','err','status','errmsg');",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");",
															"  pm.expect(jsonResponse.params.msgid).to.be.a('null');",
															"  pm.expect(jsonResponse.params.err).to.be.a('string');",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a('string');",
															"});",
															"",
															"//code name contains a string",
															"tests[\"Status code name has string \\\"Bad Request\\\"\"] = responseCode.name.has(\"Bad Request\");",
															"",
															"pm.test(\"Verify keys and data type of the response result\", () => {",
															"  pm.expect(jsonResponse.result).to.be.an(\"object\");",
															"  pm.expect(jsonResponse.result).to.have.all.keys('messages');",
															"  pm.expect(jsonResponse.result.messages).to.not.be.empty;",
															"});",
															"",
															"//Validation",
															"// Response body",
															"pm.test(\"responseCode should be \\\"CLIENT_ERROR\\\"\", () => {",
															"    pm.expect(jsonResponse.responseCode).to.eql(\"CLIENT_ERROR\");",
															"});",
															"",
															"// Params",
															"pm.test(\"params.err should be \\\"CLIENT_ERROR\\\"\", () => {",
															"    pm.expect(jsonResponse.params.err).to.eql(\"CLIENT_ERROR\");",
															"});",
															"pm.test(\"params.errmsg should be \\\"Validation Errors\\\"\", () => {",
															"    pm.expect(jsonResponse.params.errmsg).to.eql(\"Validation Errors\");",
															"});",
															"",
															"// Result",
															"pm.test(\"result body should include messages \\\"Required Metadata channel not set\\\"\", () => {",
															"    pm.expect(jsonResponse.result.messages).to.have.length(1)",
															"    pm.expect(jsonResponse.result.messages).to.include('Required Metadata channel not set');",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"connection": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}"
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}"
													},
													{
														"key": "X-Channel-Id",
														"value": "",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"request\": {\n    \"content\": {\n      \"name\": \"Untitled Content\",\n      \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n      \"mimeType\": \"application/pdf\",\n      \"createdBy\": \"530b19ea-dc8d-4cc7-a4b5-0c0214c8113a\",\n      \"resourceType\": \"Learn\",\n      \"framework\": \"ekstep_ncert_k-12\",\n      \"primaryCategory\": \"Explanation Content\"\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{host}}/content/v4/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"content",
														"v4",
														"create"
													]
												},
												"description": "This API is associated with batch creation\nThe endpoint for Creates a Batch is /batch/create\nThe fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
											},
											"response": []
										},
										{
											"name": "Create content with missing name",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()",
															"",
															"//Verification",
															"pm.test(\"Status code is 400\", () => {",
															"    pm.response.to.have.status(400)",
															"});",
															"pm.test(\"id should be api.content.create\", function () {",
															"   pm.expect(jsonResponse.id).to.eql(\"api.content.create\");",
															"});",
															"",
															"pm.test(\"ver should be 4.0\", function () {",
															"   pm.expect(jsonResponse.ver).to.eql(\"4.0\");",
															"});",
															"",
															"pm.test(\"Params has keys: resmsgid , msgid , err , status , errmsg \", () => {",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid', 'msgid','err','status','errmsg');",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");",
															"  pm.expect(jsonResponse.params.msgid).to.be.a('null');",
															"  pm.expect(jsonResponse.params.err).to.be.a('string');",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a('string');",
															"});",
															"",
															"//code name contains a string",
															"tests[\"Status code name has string \\\"Bad Request\\\"\"] = responseCode.name.has(\"Bad Request\");",
															"",
															"pm.test(\"Verify keys and data type of the response result\", () => {",
															"  pm.expect(jsonResponse.result).to.be.an(\"object\");",
															"  pm.expect(jsonResponse.result).to.have.all.keys('messages');",
															"  pm.expect(jsonResponse.result.messages).to.not.be.empty;",
															"});",
															"",
															"//Validation",
															"// Response body",
															"pm.test(\"responseCode should be \\\"CLIENT_ERROR\\\"\", () => {",
															"    pm.expect(jsonResponse.responseCode).to.eql(\"CLIENT_ERROR\");",
															"});",
															"",
															"// Params",
															"pm.test(\"params.err should be \\\"CLIENT_ERROR\\\"\", () => {",
															"    pm.expect(jsonResponse.params.err).to.eql(\"CLIENT_ERROR\");",
															"});",
															"pm.test(\"params.errmsg should be \\\"Validation Errors\\\"\", () => {",
															"    pm.expect(jsonResponse.params.errmsg).to.eql(\"Validation Errors\");",
															"});",
															"",
															"// Result",
															"pm.test(\"result body should include messages \\\"Required Metadata name not set\\\"\", () => {",
															"    pm.expect(jsonResponse.result.messages).to.have.length(1)",
															"    pm.expect(jsonResponse.result.messages).to.include('Required Metadata name not set');",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"connection": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}"
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}"
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"Explanation Content\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/content/v4/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"content",
														"v4",
														"create"
													]
												},
												"description": "This API is associated with batch creation\nThe endpoint for Creates a Batch is /batch/create\nThe fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
											},
											"response": []
										},
										{
											"name": "Create content with name: invalid datatype",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()",
															"",
															"//Verification",
															"pm.test(\"Status code is 400\", () => {",
															"    pm.response.to.have.status(400)",
															"});",
															"pm.test(\"id should be api.content.create\", function () {",
															"   pm.expect(jsonResponse.id).to.eql(\"api.content.create\");",
															"});",
															"",
															"pm.test(\"ver should be 4.0\", function () {",
															"   pm.expect(jsonResponse.ver).to.eql(\"4.0\");",
															"});",
															"",
															"pm.test(\"Params has keys: resmsgid , msgid , err , status , errmsg \", () => {",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid', 'msgid','err','status','errmsg');",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");",
															"  pm.expect(jsonResponse.params.msgid).to.be.a('null');",
															"  pm.expect(jsonResponse.params.err).to.be.a('string');",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a('string');",
															"});",
															"",
															"//code name contains a string",
															"tests[\"Status code name has string \\\"Bad Request\\\"\"] = responseCode.name.has(\"Bad Request\");",
															"",
															"pm.test(\"Verify keys and data type of the response result\", () => {",
															"  pm.expect(jsonResponse.result).to.be.an(\"object\");",
															"  pm.expect(jsonResponse.result).to.have.all.keys('messages');",
															"  pm.expect(jsonResponse.result.messages).to.not.be.empty;",
															"});",
															"",
															"//Validation",
															"// Response body",
															"pm.test(\"responseCode should be \\\"CLIENT_ERROR\\\"\", () => {",
															"    pm.expect(jsonResponse.responseCode).to.eql(\"CLIENT_ERROR\");",
															"});",
															"",
															"// Params",
															"pm.test(\"params.err should be \\\"CLIENT_ERROR\\\"\", () => {",
															"    pm.expect(jsonResponse.params.err).to.eql(\"CLIENT_ERROR\");",
															"});",
															"pm.test(\"params.errmsg should be \\\"Validation Errors\\\"\", () => {",
															"    pm.expect(jsonResponse.params.errmsg).to.eql(\"Validation Errors\");",
															"});",
															"",
															"// Result",
															"pm.test(\"result body should include messages \\\"Metadata name should be a/an String value\\\"\", () => {",
															"    pm.expect(jsonResponse.result.messages).to.have.length(1)",
															"    pm.expect(jsonResponse.result.messages).to.include('Metadata name should be a/an String value');",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"connection": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}"
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}"
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": 423432,\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"Explanation Content\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/content/v4/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"content",
														"v4",
														"create"
													]
												},
												"description": "This API is associated with batch creation\nThe endpoint for Creates a Batch is /batch/create\nThe fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
											},
											"response": []
										},
										{
											"name": "Create content with name empty",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()",
															"",
															"//Verification",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400)",
															"});",
															"pm.test(\"id should be api.content.create\", function () {",
															"   pm.expect(jsonResponse.id).to.eql(\"api.content.create\");",
															"});",
															"",
															"pm.test(\"ver should be 4.0\", function () {",
															"   pm.expect(jsonResponse.ver).to.eql(\"4.0\");",
															"});",
															"",
															"pm.test(\"Params has keys: resmsgid , msgid , err , status , errmsg \", () => {",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid', 'msgid','err','status','errmsg');",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");",
															"  pm.expect(jsonResponse.params.msgid).to.be.a('null');",
															"  pm.expect(jsonResponse.params.err).to.be.a('string');",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a('string');",
															"});",
															"",
															"//code name contains a string",
															"tests[\"Status code name has string \\\"Bad Request\\\"\"] = responseCode.name.has(\"Bad Request\");",
															"",
															"pm.test(\"Verify keys and data type of the response result\", () => {",
															"  pm.expect(jsonResponse.result).to.be.an(\"object\");",
															"  pm.expect(jsonResponse.result).to.have.all.keys('messages');",
															"  pm.expect(jsonResponse.result.messages).to.not.be.empty;",
															"});",
															"",
															"//Validation",
															"// Response body",
															"pm.test(\"responseCode should be \\\"CLIENT_ERROR\\\"\", () => {",
															"    pm.expect(jsonResponse.responseCode).to.eql(\"CLIENT_ERROR\");",
															"});",
															"",
															"// Params",
															"pm.test(\"params.err should be \\\"CLIENT_ERROR\\\"\", () => {",
															"    pm.expect(jsonResponse.params.err).to.eql(\"CLIENT_ERROR\");",
															"});",
															"pm.test(\"params.errmsg should be \\\"Validation Errors\\\"\", () => {",
															"    pm.expect(jsonResponse.params.errmsg).to.eql(\"Validation Errors\");",
															"});",
															"",
															"// Result",
															"pm.test(\"result body should include messages \\\"Required Metadata name not set\\\"\", () => {",
															"    pm.expect(jsonResponse.result.messages).to.have.length(1)",
															"    pm.expect(jsonResponse.result.messages).to.include('Required Metadata name not set');",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"connection": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}"
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}"
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"Explanation Content\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/content/v4/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"content",
														"v4",
														"create"
													]
												},
												"description": "This API is associated with batch creation\nThe endpoint for Creates a Batch is /batch/create\nThe fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
											},
											"response": []
										},
										{
											"name": "Create content with missing code",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()",
															"",
															"//Verification",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400)",
															"});",
															"pm.test(\"id should be api.content.create\", function () {",
															"   pm.expect(jsonResponse.id).to.eql(\"api.content.create\");",
															"});",
															"",
															"pm.test(\"ver should be 4.0\", function () {",
															"   pm.expect(jsonResponse.ver).to.eql(\"4.0\");",
															"});",
															"",
															"pm.test(\"Params has keys: resmsgid , msgid , err , status , errmsg \", () => {",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid', 'msgid','err','status','errmsg');",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");",
															"  pm.expect(jsonResponse.params.msgid).to.be.a('null');",
															"  pm.expect(jsonResponse.params.err).to.be.a('string');",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a('string');",
															"});",
															"",
															"//code name contains a string",
															"tests[\"Status code name has string \\\"Bad Request\\\"\"] = responseCode.name.has(\"Bad Request\");",
															"",
															"pm.test(\"Verify keys and data type of the response result\", () => {",
															"  pm.expect(jsonResponse.result).to.be.an(\"object\");",
															"  pm.expect(jsonResponse.result).to.have.all.keys('messages');",
															"  pm.expect(jsonResponse.result.messages).to.not.be.empty;",
															"});",
															"",
															"//Validation",
															"// Response body",
															"pm.test(\"responseCode should be \\\"CLIENT_ERROR\\\"\", () => {",
															"    pm.expect(jsonResponse.responseCode).to.eql(\"CLIENT_ERROR\");",
															"});",
															"",
															"// Params",
															"pm.test(\"params.err should be \\\"CLIENT_ERROR\\\"\", () => {",
															"    pm.expect(jsonResponse.params.err).to.eql(\"CLIENT_ERROR\");",
															"});",
															"pm.test(\"params.errmsg should be \\\"Validation Errors\\\"\", () => {",
															"    pm.expect(jsonResponse.params.errmsg).to.eql(\"Validation Errors\");",
															"});",
															"",
															"// Result",
															"pm.test(\"result body should include messages \\\"Required Metadata code not set\\\"\", () => {",
															"    pm.expect(jsonResponse.result.messages).to.have.length(1)",
															"    pm.expect(jsonResponse.result.messages).to.include('Required Metadata code not set');",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"connection": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}"
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}"
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"Explanation Content\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/content/v4/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"content",
														"v4",
														"create"
													]
												},
												"description": "This API is associated with batch creation\nThe endpoint for Creates a Batch is /batch/create\nThe fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
											},
											"response": []
										},
										{
											"name": "Create content with missing mimeType",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()",
															"",
															"//Verification",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400)",
															"});",
															"pm.test(\"id should be api.content.create\", function () {",
															"   pm.expect(jsonResponse.id).to.eql(\"api.content.create\");",
															"});",
															"",
															"pm.test(\"ver should be 4.0\", function () {",
															"   pm.expect(jsonResponse.ver).to.eql(\"4.0\");",
															"});",
															"",
															"pm.test(\"Params has keys: resmsgid , msgid , err , status , errmsg \", () => {",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid', 'msgid','err','status','errmsg');",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");",
															"  pm.expect(jsonResponse.params.msgid).to.be.a('null');",
															"  pm.expect(jsonResponse.params.err).to.be.a('string');",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a('string');",
															"});",
															"",
															"//code name contains a string",
															"tests[\"Status code name has string \\\"Bad Request\\\"\"] = responseCode.name.has(\"Bad Request\");",
															"",
															"pm.test(\"Verify keys and data type of the response result\", () => {",
															"  pm.expect(jsonResponse.result).to.be.an(\"object\");",
															"  pm.expect(jsonResponse.result).to.have.all.keys('messages');",
															"  pm.expect(jsonResponse.result.messages).to.not.be.empty;",
															"});",
															"",
															"//Validation",
															"// Response body",
															"pm.test(\"responseCode should be \\\"CLIENT_ERROR\\\"\", () => {",
															"    pm.expect(jsonResponse.responseCode).to.eql(\"CLIENT_ERROR\");",
															"});",
															"",
															"// Params",
															"pm.test(\"params.err should be \\\"CLIENT_ERROR\\\"\", () => {",
															"    pm.expect(jsonResponse.params.err).to.eql(\"CLIENT_ERROR\");",
															"});",
															"pm.test(\"params.errmsg should be \\\"Validation Errors\\\"\", () => {",
															"    pm.expect(jsonResponse.params.errmsg).to.eql(\"Validation Errors\");",
															"});",
															"",
															"// Result",
															"pm.test(\"result body should include messages \\\"Required Metadata mimeType not set\\\"\", () => {",
															"    pm.expect(jsonResponse.result.messages).to.have.length(1)",
															"    pm.expect(jsonResponse.result.messages).to.include('Required Metadata mimeType not set');",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"connection": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}"
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}"
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"primaryCategory\": \"Explanation Content\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/content/v4/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"content",
														"v4",
														"create"
													]
												},
												"description": "This API is associated with batch creation\nThe endpoint for Creates a Batch is /batch/create\nThe fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
											},
											"response": []
										},
										{
											"name": "Create content with invalid mimeType",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()",
															"",
															"//Verification",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400)",
															"});",
															"pm.test(\"id should be api.content.create\", function () {",
															"   pm.expect(jsonResponse.id).to.eql(\"api.content.create\");",
															"});",
															"",
															"pm.test(\"ver should be 4.0\", function () {",
															"   pm.expect(jsonResponse.ver).to.eql(\"4.0\");",
															"});",
															"",
															"pm.test(\"Params has keys: resmsgid , msgid , err , status , errmsg \", () => {",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid', 'msgid','err','status','errmsg');",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");",
															"  pm.expect(jsonResponse.params.msgid).to.be.a('null');",
															"  pm.expect(jsonResponse.params.err).to.be.a('string');",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a('string');",
															"});",
															"pm.test(\"id should be api.content.create\", function () {",
															"   pm.expect(jsonResponse.id).to.eql(\"api.content.create\");",
															"});",
															"",
															"pm.test(\"ver should be 4.0\", function () {",
															"   pm.expect(jsonResponse.ver).to.eql(\"4.0\");",
															"});",
															"",
															"pm.test(\"Params has keys: resmsgid , msgid , err , status , errmsg \", () => {",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid', 'msgid','err','status','errmsg');",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");",
															"  pm.expect(jsonResponse.params.msgid).to.be.a('null');",
															"  pm.expect(jsonResponse.params.err).to.be.a('string');",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a('string');",
															"});",
															"",
															"//code name contains a string",
															"tests[\"Status code name has string \\\"Bad Request\\\"\"] = responseCode.name.has(\"Bad Request\");",
															"",
															"pm.test(\"Verify keys and data type of the response result\", () => {",
															"  pm.expect(jsonResponse.result).to.be.an(\"object\");",
															"  pm.expect(jsonResponse.result).to.have.all.keys('messages');",
															"  pm.expect(jsonResponse.result.messages).to.not.be.empty;",
															"});",
															"",
															"//Validation",
															"// Response body",
															"pm.test(\"responseCode should be \\\"CLIENT_ERROR\\\"\", () => {",
															"    pm.expect(jsonResponse.responseCode).to.eql(\"CLIENT_ERROR\");",
															"});",
															"",
															"// Params",
															"pm.test(\"params.err should be \\\"CLIENT_ERROR\\\"\", () => {",
															"    pm.expect(jsonResponse.params.err).to.eql(\"CLIENT_ERROR\");",
															"});",
															"pm.test(\"params.errmsg should be \\\"Validation Errors\\\"\", () => {",
															"    pm.expect(jsonResponse.params.errmsg).to.eql(\"Validation Errors\");",
															"});",
															"",
															"// Result",
															"pm.test(\"result body should include messages \\\"Metadata mimeType should be one of: [application/vnd.ekstep.ecml-archive, application/vnd.ekstep.html-archive, application/vnd.android.package-archive, application/vnd.ekstep.content-archive, application/vnd.ekstep.content-collection, application/vnd.ekstep.plugin-archive, application/vnd.ekstep.h5p-archive, application/epub, text/x-url, video/x-youtube, application/octet-stream, application/msword, application/pdf, image/jpeg, image/jpg, image/png, image/tiff, image/bmp, image/gif, image/svg+xml, video/avi, video/mpeg, video/quicktime, video/3gpp, video/mp4, video/ogg, video/webm, audio/mp3, audio/mp4, audio/mpeg, audio/ogg, audio/webm, audio/x-wav, audio/wav, application/json, application/quiz]\\\"\", () => {",
															"    pm.expect(jsonResponse.result.messages).to.have.length(1)",
															"    pm.expect(jsonResponse.result.messages).to.include('Metadata mimeType should be one of: [application/vnd.ekstep.ecml-archive, application/vnd.ekstep.html-archive, application/vnd.android.package-archive, application/vnd.ekstep.content-archive, application/vnd.ekstep.content-collection, application/vnd.ekstep.plugin-archive, application/vnd.ekstep.h5p-archive, application/epub, text/x-url, video/x-youtube, application/octet-stream, application/msword, application/pdf, image/jpeg, image/jpg, image/png, image/tiff, image/bmp, image/gif, image/svg+xml, video/avi, video/mpeg, video/quicktime, video/3gpp, video/mp4, video/ogg, video/webm, audio/mp3, audio/mp4, audio/mpeg, audio/ogg, audio/webm, audio/x-wav, audio/wav, application/json, application/quiz]');",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"connection": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}"
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}"
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"some-mimeType\",\n            \"primaryCategory\": \"Explanation Content\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/content/v4/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"content",
														"v4",
														"create"
													]
												},
												"description": "This API is associated with batch creation\nThe endpoint for Creates a Batch is /batch/create\nThe fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
											},
											"response": []
										},
										{
											"name": "Create content without primaryCategory",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()",
															"",
															"//Verification",
															"pm.test(\"Status code is 400\", () => {",
															"    pm.response.to.have.status(400)",
															"});",
															"pm.test(\"id should be api.content.create\", function () {",
															"   pm.expect(jsonResponse.id).to.eql(\"api.content.create\");",
															"});",
															"",
															"pm.test(\"ver should be 4.0\", function () {",
															"   pm.expect(jsonResponse.ver).to.eql(\"4.0\");",
															"});",
															"",
															"pm.test(\"Params has keys: resmsgid , msgid , err , status , errmsg \", () => {",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid', 'msgid','err','status','errmsg');",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");",
															"  pm.expect(jsonResponse.params.msgid).to.be.a('null');",
															"  pm.expect(jsonResponse.params.err).to.be.a('string');",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a('string');",
															"});",
															"",
															"//code name contains a string",
															"tests[\"Status code name has string \\\"Bad Request\\\"\"] = responseCode.name.has(\"Bad Request\");",
															"",
															"pm.test(\"Verify keys and data type of the response result\", () => {",
															"  pm.expect(jsonResponse.result).to.be.an(\"object\");",
															"});",
															"",
															"//Validation",
															"// Response body",
															"pm.test(\"responseCode should be \\\"CLIENT_ERROR\\\"\", () => {",
															"    pm.expect(jsonResponse.responseCode).to.eql(\"CLIENT_ERROR\");",
															"});",
															"",
															"// Params",
															"pm.test(\"params.err should be \\\"VALIDATION_ERROR\\\"\", () => {",
															"    pm.expect(jsonResponse.params.err).to.eql(\"VALIDATION_ERROR\");",
															"});",
															"pm.test(\"params.errmsg should be \\\"primaryCategory is a mandatory parameter\\\"\", () => {",
															"    pm.expect(jsonResponse.params.errmsg).to.eql(\"primaryCategory is a mandatory parameter\");",
															"});",
															"",
															"// Result",
															"pm.test(\"result body should be empty\", () => {",
															"    pm.expect(jsonResponse.result).to.eql({});",
															"    pm.expect(jsonResponse.result).to.be.empty;",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"connection": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}"
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}"
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"request\": {\n    \"content\": {\n      \"name\": \"Untitled Content\",\n      \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n      \"mimeType\": \"application/pdf\"\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{host}}/content/v4/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"content",
														"v4",
														"create"
													]
												},
												"description": "This API is associated with batch creation\nThe endpoint for Creates a Batch is /batch/create\nThe fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
											},
											"response": []
										},
										{
											"name": "Create content with Invalid subject",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()",
															"",
															"//Verification",
															"pm.test(\"Status code is 400\", () => {",
															"    pm.response.to.have.status(400)",
															"});",
															"pm.test(\"id should be api.content.create\", function () {",
															"   pm.expect(jsonResponse.id).to.eql(\"api.content.create\");",
															"});",
															"",
															"pm.test(\"ver should be 4.0\", function () {",
															"   pm.expect(jsonResponse.ver).to.eql(\"4.0\");",
															"});",
															"",
															"pm.test(\"Params has keys: resmsgid , msgid , err , status , errmsg \", () => {",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid', 'msgid','err','status','errmsg');",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");",
															"  pm.expect(jsonResponse.params.msgid).to.be.a('null');",
															"  pm.expect(jsonResponse.params.err).to.be.a('string');",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a('string');",
															"});",
															"",
															"//code name contains a string",
															"tests[\"Status code name has string \\\"Bad Request\\\"\"] = responseCode.name.has(\"Bad Request\");",
															"",
															"pm.test(\"Verify keys and data type of the response result\", () => {",
															"  pm.expect(jsonResponse.result).to.be.an(\"object\");",
															"  pm.expect(jsonResponse.result).to.have.all.keys('messages');",
															"  pm.expect(jsonResponse.result.messages).to.not.be.empty;",
															"});",
															"",
															"//Validation",
															"// Response body",
															"pm.test(\"responseCode should be \\\"CLIENT_ERROR\\\"\", () => {",
															"    pm.expect(jsonResponse.responseCode).to.eql(\"CLIENT_ERROR\");",
															"});",
															"",
															"// Params",
															"pm.test(\"params.err should be \\\"CLIENT_ERROR\\\"\", () => {",
															"    pm.expect(jsonResponse.params.err).to.eql(\"CLIENT_ERROR\");",
															"});",
															"pm.test(\"params.errmsg should be \\\"Validation Errors.\\\"\", () => {",
															"    pm.expect(jsonResponse.params.errmsg).to.eql(\"Validation Errors.\");",
															"});",
															"",
															"// Result",
															"pm.test(\"result body should include messages \\\"subject range data is empty from the given framework.\\\"\", () => {",
															"    pm.expect(jsonResponse.result.messages).to.have.length(1)",
															"    pm.expect(jsonResponse.result.messages).to.include('subject range data is empty from the given framework.');",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"connection": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}"
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}"
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"request\": {\n    \"content\": {\n      \"name\": \"Untitled Content\",\n      \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n      \"mimeType\": \"application/pdf\",\n      \"createdBy\": \"530b19ea-dc8d-4cc7-a4b5-0c0214c8113a\",\n      \"resourceType\": \"Learn\",\n      \"framework\": \"ekstep_ncert_k-12-erwe\",\n      \"subject\": [\"test\"],\n      \"primaryCategory\": \"Explanation Content\"\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{host}}/content/v4/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"content",
														"v4",
														"create"
													]
												},
												"description": "This API is associated with batch creation\nThe endpoint for Creates a Batch is /batch/create\nThe fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
											},
											"response": []
										},
										{
											"name": "Create content with Invalid primaryCategory",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()",
															"",
															"//Verification",
															"pm.test(\"Status code is 404\", () => {",
															"    pm.response.to.have.status(404)",
															"});",
															"pm.test(\"id should be api.content.create\", function () {",
															"   pm.expect(jsonResponse.id).to.eql(\"api.content.create\");",
															"});",
															"",
															"pm.test(\"ver should be 4.0\", function () {",
															"   pm.expect(jsonResponse.ver).to.eql(\"4.0\");",
															"});",
															"",
															"pm.test(\"Params has keys: resmsgid , msgid , err , status , errmsg \", () => {",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid', 'msgid','err','status','errmsg');",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");",
															"  pm.expect(jsonResponse.params.msgid).to.be.a('null');",
															"  pm.expect(jsonResponse.params.err).to.be.a('string');",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a('string');",
															"});",
															"",
															"//code name contains a string",
															"tests[\"Status code name has string \\\"Not Found\\\"\"] = responseCode.name.has(\"Not Found\");",
															"",
															"pm.test(\"Verify keys and data type of the response result\", () => {",
															"  pm.expect(jsonResponse.result).to.have.all.keys('messages');",
															"  pm.expect(jsonResponse.result.messages).to.be.null;",
															"});",
															"",
															"//Validation",
															"// Response body",
															"pm.test(\"responseCode should be RESOURCE_NOT_FOUND\", () => {",
															"    pm.expect(jsonResponse.responseCode).to.eql(\"RESOURCE_NOT_FOUND\");",
															"});",
															"",
															"// Params",
															"pm.test(\"params.err should be \\\"404\\\"\", () => {",
															"    pm.expect(jsonResponse.params.err).to.eql(\"404\");",
															"});",
															"pm.test(`params.errmsg should be \\\"Entry is not found in cassandra for content with identifier:: obj-cat:${JSON.parse(request.data).request.content.primaryCategory}_content_all {}\\\"`, () => {",
															"    pm.expect(jsonResponse.params.errmsg).to.eql(`Entry is not found in cassandra for content with identifier: obj-cat:${JSON.parse(request.data).request.content.primaryCategory}_content_all {}`);",
															"});",
															"",
															"// Result",
															"pm.test(\"messages should be null\", () => {",
															"    pm.expect(jsonResponse.result.messages).to.eql(null);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"connection": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}"
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}"
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"request\": {\n    \"content\": {\n      \"name\": \"Untitled Content\",\n      \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n      \"mimeType\": \"application/pdf\",\n      \"createdBy\": \"530b19ea-dc8d-4cc7-a4b5-0c0214c8113a\",\n      \"resourceType\": \"Learn\",\n      \"framework\": \"ekstep_ncert_k-12\",\n      \"primaryCategory\": \"aabaa\"\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{host}}/content/v4/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"content",
														"v4",
														"create"
													]
												},
												"description": "This API is associated with batch creation\nThe endpoint for Creates a Batch is /batch/create\nThe fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
											},
											"response": []
										},
										{
											"name": "Create content which already exists",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();",
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"pm.test(\"Status code name has string Bad Request\", function () {",
															"    pm.response.to.have.status(\"Bad Request\");",
															"});",
															"pm.test(\"id should be api.content.create\", function () {",
															"   pm.expect(jsonResponse.id).to.eql(\"api.content.create\");",
															"});",
															"pm.test(\"ver should be 4.0\", function () {",
															"   pm.expect(jsonResponse.ver).to.eql(\"4.0\");",
															"});",
															"pm.test(\"Params has keys: resmsgid , msgid , err , status , errmsg \", () => {",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid', 'msgid','err','status','errmsg');",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");",
															"  pm.expect(jsonResponse.params.msgid).to.be.a('null');",
															"  pm.expect(jsonResponse.params.err).to.be.a('string');",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a('string');",
															"});",
															"",
															"pm.test(\"err is CONSTRAINT_VALIDATION_FAILED\", function () {",
															"    pm.expect(jsonResponse.params.err).to.be.equal(\"CONSTRAINT_VALIDATION_FAILED\");",
															"});",
															"pm.test(`errmsg: Object already exists with identifier: ${pm.collectionVariables.get(\"identifier\")}`, function () {",
															"    pm.expect(jsonResponse.params.errmsg).to.be.equal(`Object already exists with identifier: ${pm.collectionVariables.get(\"identifier\")}`);",
															"});",
															"",
															"pm.test(\"Status is failed\", function () {",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"failed\");",
															"});",
															"",
															"pm.test(\"ResponseCode is CLIENT_ERROR\", function () {",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"CLIENT_ERROR\");",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"connection": true
												}
											},
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{auth_token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}"
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}"
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"identifier\": \"{{identifier}}\",\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"Explanation Content\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/content/v4/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"content",
														"v4",
														"create"
													]
												},
												"description": "This API is associated with batch creation\nThe endpoint for Creates a Batch is /batch/create\nThe fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
											},
											"response": []
										}
									]
								}
							],
							"description": "Pre requisite is required for the second of the create content Positive scenario"
						},
						{
							"name": "Update Content",
							"item": [
								{
									"name": "Pre requisite",
									"item": [
										{
											"name": "Create Content",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"\r",
															"pm.collectionVariables.set(\"update_content_id\", jsonResponse.result.identifier);\r",
															"console.log(pm.collectionVariables.get(\"update_content_id\"));\r",
															"\r",
															"pm.collectionVariables.set(\"updatecontent_versionkey\", jsonResponse.result.versionKey);\r",
															"console.log(pm.collectionVariables.get(\"updatecontent_versionkey\"));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "value",
															"value": "<API Key>",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}"
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}"
													},
													{
														"key": "Authorization",
														"value": "{{auth_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"Explanation Content\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/content/v4/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"content",
														"v4",
														"create"
													]
												},
												"description": "This API is associated with creating content on the Sunbird Platform.\n  - The endpoint for **Create Content** is `/content/v2/create`\n  - It points to knowledge-mw-service - `/v2/content/create`\n  - It is mandatory to provide values for parameters marked with *.\n  - Mandatory fields cannot be null or empty."
											},
											"response": [
												{
													"name": "SUCCESS. The **Create Content** operation was successful!",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) Represents a physical location (e.g: state) uniquely to which the user belongs.",
																"key": "x-channel-id",
																"value": "ea laborum"
															},
															{
																"description": "(Required) Represents the authorized User ID to execute the API.",
																"key": "X-Authenticated-User-Token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"content\": {\n      \"name\": \"H5P Content\",\n      \"code\": \"h5pcontent\",\n      \"mimeType\": \"application/vnd.ekstep.h5p-archive\",\n      \"primaryCategory\": \"Resource\",\n      \"createdBy\": \"874ed8a5-782e-4f6c-8f36-e0288455901e\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"create"
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.content.create\",\n  \"ver\": \"3.0\",\n  \"ts\": \"2020-12-10T20:24:45ZZ\",\n  \"params\": {\n    \"resmsgid\": \"3be02c4b-3324-41a3-afd8-60f6be0584d2\",\n    \"msgid\": null,\n    \"err\": null,\n    \"status\": \"successful\",\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"identifier\": \"do_1131697204035993601314\",\n    \"node_id\": \"do_1131697204035993601314\",\n    \"versionKey\": \"1607631885207\"\n  }\n}"
												},
												{
													"name": "'BAD REQUEST. The **Create Content** operation failed. You may have missed input for a mandatory parameter.'",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) Represents a physical location (e.g: state) uniquely to which the user belongs.",
																"key": "x-channel-id",
																"value": "ea laborum"
															},
															{
																"description": "(Required) Represents the authorized User ID to execute the API.",
																"key": "X-Authenticated-User-Token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"content\": {\n      \"name\": \"H5P Content\",\n      \"code\": \"h5pcontent\",\n      \"mimeType\": \"application/vnd.ekstep.h5p-archive\",\n      \"primaryCategory\": \"Resource\",\n      \"createdBy\": \"874ed8a5-782e-4f6c-8f36-e0288455901e\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"create"
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.content.create\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-10T08:50:29.786Z\",\n  \"params\": {\n    \"resmsgid\": \"c169a7a0-3ac4-11eb-b0a2-8d5c9f561887\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"ERR_CONTENT_CREATE_FIELDS_MISSING\",\n    \"errmsg\": \"Required fields for create content are missing\"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {}\n}"
												},
												{
													"name": "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) Represents a physical location (e.g: state) uniquely to which the user belongs.",
																"key": "x-channel-id",
																"value": "ea laborum"
															},
															{
																"description": "(Required) Represents the authorized User ID to execute the API.",
																"key": "X-Authenticated-User-Token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"content\": {\n      \"name\": \"H5P Content\",\n      \"code\": \"h5pcontent\",\n      \"mimeType\": \"application/vnd.ekstep.h5p-archive\",\n      \"primaryCategory\": \"Resource\",\n      \"createdBy\": \"874ed8a5-782e-4f6c-8f36-e0288455901e\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"create"
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.content.create\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-10T08:51:51.647Z\",\n  \"params\": {\n    \"resmsgid\": \"f234a6f0-3ac4-11eb-b0a2-8d5c9f561887\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": null,\n    \"errmsg\": null\n  },\n  \"responseCode\": \"SERVER_ERROR\",\n  \"result\": {}\n}"
												}
											]
										},
										{
											"name": "Create Content",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"\r",
															"pm.collectionVariables.set(\"update_content\", jsonResponse.result.identifier);\r",
															"console.log(pm.collectionVariables.get(\"update_content\"));\r",
															"\r",
															"pm.collectionVariables.set(\"update_versionkey\", jsonResponse.result.versionKey);\r",
															"console.log(pm.collectionVariables.get(\"update_versionkey\"));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "value",
															"value": "<API Key>",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}"
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}"
													},
													{
														"key": "Authorization",
														"value": "{{auth_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"Explanation Content\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/content/v4/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"content",
														"v4",
														"create"
													]
												},
												"description": "This API is associated with creating content on the Sunbird Platform.\n  - The endpoint for **Create Content** is `/content/v2/create`\n  - It points to knowledge-mw-service - `/v2/content/create`\n  - It is mandatory to provide values for parameters marked with *.\n  - Mandatory fields cannot be null or empty."
											},
											"response": [
												{
													"name": "SUCCESS. The **Create Content** operation was successful!",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) Represents a physical location (e.g: state) uniquely to which the user belongs.",
																"key": "x-channel-id",
																"value": "ea laborum"
															},
															{
																"description": "(Required) Represents the authorized User ID to execute the API.",
																"key": "X-Authenticated-User-Token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"content\": {\n      \"name\": \"H5P Content\",\n      \"code\": \"h5pcontent\",\n      \"mimeType\": \"application/vnd.ekstep.h5p-archive\",\n      \"primaryCategory\": \"Resource\",\n      \"createdBy\": \"874ed8a5-782e-4f6c-8f36-e0288455901e\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"create"
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.content.create\",\n  \"ver\": \"3.0\",\n  \"ts\": \"2020-12-10T20:24:45ZZ\",\n  \"params\": {\n    \"resmsgid\": \"3be02c4b-3324-41a3-afd8-60f6be0584d2\",\n    \"msgid\": null,\n    \"err\": null,\n    \"status\": \"successful\",\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"identifier\": \"do_1131697204035993601314\",\n    \"node_id\": \"do_1131697204035993601314\",\n    \"versionKey\": \"1607631885207\"\n  }\n}"
												},
												{
													"name": "'BAD REQUEST. The **Create Content** operation failed. You may have missed input for a mandatory parameter.'",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) Represents a physical location (e.g: state) uniquely to which the user belongs.",
																"key": "x-channel-id",
																"value": "ea laborum"
															},
															{
																"description": "(Required) Represents the authorized User ID to execute the API.",
																"key": "X-Authenticated-User-Token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"content\": {\n      \"name\": \"H5P Content\",\n      \"code\": \"h5pcontent\",\n      \"mimeType\": \"application/vnd.ekstep.h5p-archive\",\n      \"primaryCategory\": \"Resource\",\n      \"createdBy\": \"874ed8a5-782e-4f6c-8f36-e0288455901e\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"create"
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.content.create\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-10T08:50:29.786Z\",\n  \"params\": {\n    \"resmsgid\": \"c169a7a0-3ac4-11eb-b0a2-8d5c9f561887\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"ERR_CONTENT_CREATE_FIELDS_MISSING\",\n    \"errmsg\": \"Required fields for create content are missing\"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {}\n}"
												},
												{
													"name": "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) Represents a physical location (e.g: state) uniquely to which the user belongs.",
																"key": "x-channel-id",
																"value": "ea laborum"
															},
															{
																"description": "(Required) Represents the authorized User ID to execute the API.",
																"key": "X-Authenticated-User-Token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"content\": {\n      \"name\": \"H5P Content\",\n      \"code\": \"h5pcontent\",\n      \"mimeType\": \"application/vnd.ekstep.h5p-archive\",\n      \"primaryCategory\": \"Resource\",\n      \"createdBy\": \"874ed8a5-782e-4f6c-8f36-e0288455901e\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"create"
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.content.create\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-10T08:51:51.647Z\",\n  \"params\": {\n    \"resmsgid\": \"f234a6f0-3ac4-11eb-b0a2-8d5c9f561887\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": null,\n    \"errmsg\": null\n  },\n  \"responseCode\": \"SERVER_ERROR\",\n  \"result\": {}\n}"
												}
											]
										},
										{
											"name": "Create Content for invalid primaryCategory",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"\r",
															"pm.collectionVariables.set(\"content_update\", jsonResponse.result.identifier);\r",
															"console.log(pm.collectionVariables.get(\"content_update\"));\r",
															"\r",
															"pm.collectionVariables.set(\"versionkey_update\", jsonResponse.result.versionKey);\r",
															"console.log(pm.collectionVariables.get(\"versionkey_update\"));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "value",
															"value": "<API Key>",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}"
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}"
													},
													{
														"key": "Authorization",
														"value": "{{auth_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"Explanation Content\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/content/v4/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"content",
														"v4",
														"create"
													]
												},
												"description": "This API is associated with creating content on the Sunbird Platform.\n  - The endpoint for **Create Content** is `/content/v2/create`\n  - It points to knowledge-mw-service - `/v2/content/create`\n  - It is mandatory to provide values for parameters marked with *.\n  - Mandatory fields cannot be null or empty."
											},
											"response": [
												{
													"name": "SUCCESS. The **Create Content** operation was successful!",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) Represents a physical location (e.g: state) uniquely to which the user belongs.",
																"key": "x-channel-id",
																"value": "ea laborum"
															},
															{
																"description": "(Required) Represents the authorized User ID to execute the API.",
																"key": "X-Authenticated-User-Token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"content\": {\n      \"name\": \"H5P Content\",\n      \"code\": \"h5pcontent\",\n      \"mimeType\": \"application/vnd.ekstep.h5p-archive\",\n      \"primaryCategory\": \"Resource\",\n      \"createdBy\": \"874ed8a5-782e-4f6c-8f36-e0288455901e\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"create"
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.content.create\",\n  \"ver\": \"3.0\",\n  \"ts\": \"2020-12-10T20:24:45ZZ\",\n  \"params\": {\n    \"resmsgid\": \"3be02c4b-3324-41a3-afd8-60f6be0584d2\",\n    \"msgid\": null,\n    \"err\": null,\n    \"status\": \"successful\",\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"identifier\": \"do_1131697204035993601314\",\n    \"node_id\": \"do_1131697204035993601314\",\n    \"versionKey\": \"1607631885207\"\n  }\n}"
												},
												{
													"name": "'BAD REQUEST. The **Create Content** operation failed. You may have missed input for a mandatory parameter.'",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) Represents a physical location (e.g: state) uniquely to which the user belongs.",
																"key": "x-channel-id",
																"value": "ea laborum"
															},
															{
																"description": "(Required) Represents the authorized User ID to execute the API.",
																"key": "X-Authenticated-User-Token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"content\": {\n      \"name\": \"H5P Content\",\n      \"code\": \"h5pcontent\",\n      \"mimeType\": \"application/vnd.ekstep.h5p-archive\",\n      \"primaryCategory\": \"Resource\",\n      \"createdBy\": \"874ed8a5-782e-4f6c-8f36-e0288455901e\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"create"
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.content.create\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-10T08:50:29.786Z\",\n  \"params\": {\n    \"resmsgid\": \"c169a7a0-3ac4-11eb-b0a2-8d5c9f561887\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"ERR_CONTENT_CREATE_FIELDS_MISSING\",\n    \"errmsg\": \"Required fields for create content are missing\"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {}\n}"
												},
												{
													"name": "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) Represents a physical location (e.g: state) uniquely to which the user belongs.",
																"key": "x-channel-id",
																"value": "ea laborum"
															},
															{
																"description": "(Required) Represents the authorized User ID to execute the API.",
																"key": "X-Authenticated-User-Token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"content\": {\n      \"name\": \"H5P Content\",\n      \"code\": \"h5pcontent\",\n      \"mimeType\": \"application/vnd.ekstep.h5p-archive\",\n      \"primaryCategory\": \"Resource\",\n      \"createdBy\": \"874ed8a5-782e-4f6c-8f36-e0288455901e\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"create"
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.content.create\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-10T08:51:51.647Z\",\n  \"params\": {\n    \"resmsgid\": \"f234a6f0-3ac4-11eb-b0a2-8d5c9f561887\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": null,\n    \"errmsg\": null\n  },\n  \"responseCode\": \"SERVER_ERROR\",\n  \"result\": {}\n}"
												}
											]
										}
									]
								},
								{
									"name": "Positive",
									"item": [
										{
											"name": "Update existing data or add new data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"Status code name has string OK\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"pm.test(\"id should be api.content.update\", function () {",
															"   pm.expect(jsonResponse.id).to.eql(\"api.content.update\");",
															"});",
															"pm.test(\"ver should be 4.0\", function () {",
															"   pm.expect(jsonResponse.ver).to.eql(\"4.0\");",
															"});",
															"",
															"pm.test(\"Params has keys: resmsgid , msgid , err , status , errmsg \", () => {",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid', 'msgid','err','status','errmsg');",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");",
															"  pm.expect(jsonResponse.params.msgid).to.be.a('null');",
															"  pm.expect(jsonResponse.params.err).to.be.a('null');",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a('null');",
															"});",
															"",
															"pm.test(\"Status is successful\", function () {",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"successful\");",
															"});",
															"",
															"pm.test(\"ResponseCode is OK\", function () {",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"OK\");",
															"});",
															"pm.test(\"Result has keys: identifier , node_id , versionKey\", () => {",
															"  pm.expect(jsonResponse.result).to.have.all.keys('identifier', 'node_id','versionKey');",
															"  pm.expect(jsonResponse.result.identifier).to.be.a(\"string\");",
															"  pm.expect(jsonResponse.result.versionKey).to.be.a(\"string\");",
															"  pm.expect(jsonResponse.result.node_id).to.be.a(\"string\");",
															"});",
															"",
															"pm.test(\"identifier should be equal to \" + pm.collectionVariables.get(\"update_content_id\"), () => {",
															"    pm.expect(jsonResponse.result.identifier).to.eql(pm.collectionVariables.get(\"update_content_id\"));",
															"});",
															"pm.test(\"node_id should be equal to \" + pm.collectionVariables.get(\"update_content_id\"), () => {",
															"    pm.expect(jsonResponse.result.node_id).to.eql(pm.collectionVariables.get(\"update_content_id\"));",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}",
														"type": "text"
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"versionKey\":\"{{updatecontent_versionkey}}\",\n            \"description\": \"Updated description for this content\",\n            \"resourceType\": \"Learn\",\n            \"framework\": \"ekstep_ncert_k-12\",\n            \"name\": \"API DOCUMENTATION CONTENT\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/content/v4/update/{{update_content_id}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"content",
														"v4",
														"update",
														"{{update_content_id}}"
													]
												},
												"description": "This API is associated with updating a batch on the Sunbird Platform.\nThe endpoint for Course Batch Update is /batch/update\nThe fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
											},
											"response": []
										},
										{
											"name": "Update special character in name",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();",
															"",
															"pm.test(\"Verify keys and data type of the response result\", () => {",
															"  pm.expect(jsonResponse.result).to.have.all.keys('identifier', 'node_id', 'versionKey');",
															"  pm.expect(jsonResponse.result.identifier).to.be.a(\"string\");",
															"  pm.expect(jsonResponse.result.node_id).to.be.a(\"string\");",
															"  pm.expect(jsonResponse.result.versionKey).to.be.a(\"string\");",
															"});",
															"",
															"//Validation",
															"pm.test(\"id should be api.content.update\", () => {",
															"   pm.expect(jsonResponse.id).to.eql(\"api.content.update\");",
															"});",
															"pm.test(\"ver should be 4.0\", () => {",
															"   pm.expect(jsonResponse.ver).to.eql(\"4.0\");",
															"});",
															"pm.test(\"Result has keys: identifier , node_id , versionKey\", () => {",
															"  pm.expect(jsonResponse.result).to.have.all.keys('identifier', 'node_id','versionKey');",
															"  pm.expect(jsonResponse.result.identifier).to.be.a(\"string\");",
															"  pm.expect(jsonResponse.result.versionKey).to.be.a(\"string\");",
															"  pm.expect(jsonResponse.result.node_id).to.be.a(\"string\");",
															"});",
															"",
															"pm.test(\"identifier should be equal to \" + pm.collectionVariables.get(\"update_content\"), () => {",
															"    pm.expect(jsonResponse.result.identifier).to.eql(pm.collectionVariables.get(\"update_content\"));",
															"});",
															"pm.test(\"node_id should be equal to \" + pm.collectionVariables.get(\"update_content\"), () => {",
															"    pm.expect(jsonResponse.result.node_id).to.eql(pm.collectionVariables.get(\"update_content\"));",
															"});",
															"",
															"// Set global variable",
															"//pm.globals.set(\"versionKey\", jsonResponse.result.versionKey);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.collectionVariables.get(\"update_versionkey\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}",
														"type": "text"
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"versionKey\": \"{{update_versionkey}}\",\n            \"description\": \"description updated for this content\",\n            \"name\": \"~`S!@#$%^&*()_+=:;\\\"'<,>.?/\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/content/v4/update/{{update_content}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"content",
														"v4",
														"update",
														"{{update_content}}"
													]
												},
												"description": "This API is associated with updating a batch on the Sunbird Platform.\nThe endpoint for Course Batch Update is /batch/update\nThe fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Update content Invalid versionKey",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()",
															"",
															"//Verification",
															"pm.test(\"Status code is 400\", () => {",
															"    pm.response.to.have.status(400)",
															"});",
															"pm.test(\"id should be api.content.update\", function () {",
															"   pm.expect(jsonResponse.id).to.eql(\"api.content.update\");",
															"});",
															"pm.test(\"Params has keys: resmsgid , msgid , err , status , errmsg \", () => {",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid', 'msgid','err','status','errmsg');",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");",
															"  pm.expect(jsonResponse.params.msgid).to.be.a('null');",
															"  pm.expect(jsonResponse.params.err).to.be.a('string');",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a('string');",
															"});",
															"pm.test(\"ver should be 4.0\", function () {",
															"   pm.expect(jsonResponse.ver).to.eql(\"4.0\");",
															"});",
															"//code name contains a string",
															"tests[\"Status code name has string Bad Request\"] = responseCode.name.has(\"Bad Request\");",
															"",
															"pm.test(\"Content-Encoding header should not present\", () => {",
															"  pm.response.to.not.have.header(\"Content-Encoding\");",
															"});",
															"",
															"pm.test(\"Verify keys and data type of the response result\", () => {",
															"  pm.expect(jsonResponse.result).to.be.an(\"object\");",
															"  pm.expect(jsonResponse.result).to.have.all.keys('messages');",
															"  pm.expect(jsonResponse.result.messages).to.be.null;",
															"});",
															"",
															"//Validation",
															"// Response body",
															"pm.test(\"responseCode should be CLIENT_ERROR\", () => {",
															"    pm.expect(jsonResponse.responseCode).to.eql(\"CLIENT_ERROR\");",
															"});",
															"",
															"// Params",
															"pm.test(\"params.err should be CLIENT_ERROR\", () => {",
															"    pm.expect(jsonResponse.params.err).to.eql(\"CLIENT_ERROR\");",
															"});",
															"pm.test(\"params.status should be failed\", () => {",
															"    pm.expect(jsonResponse.params.status).to.eql(\"failed\");",
															"});",
															"pm.test(\"params.errmsg should be \\\"Invalid version Key\\\"\", () => {",
															"    pm.expect(jsonResponse.params.errmsg).to.eql(\"Invalid version Key\");",
															"});",
															"",
															"// Result",
															"pm.test(\"messages should be null\", () => {",
															"    pm.expect(jsonResponse.result.messages).to.eql(null);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.globals.set('invalid-versionKey', '3534534543');",
															"// pm.globals.set(\"content_id\", '');"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}",
														"type": "text"
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"versionKey\": \"{{invalid-versionKey}}\",\n            \"lastUpdatedBy\": \"874ed8a5-782e-4f6c-8f36-e0288455901e\",\n            \"description\": \"dsd\",\n            \"name\": \"API DOCUMENTATION CONTENT\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/content/v4/update/{{update_content_id}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"content",
														"v4",
														"update",
														"{{update_content_id}}"
													]
												},
												"description": "This API is associated with updating a batch on the Sunbird Platform.\nThe endpoint for Course Batch Update is /batch/update\nThe fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
											},
											"response": []
										},
										{
											"name": "Update content with Empty name",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()",
															"",
															"//Verification",
															"pm.test(\"Status code is 400\", () => {",
															"    pm.response.to.have.status(400)",
															"});",
															"pm.test(\"ver should be 4.0\", function () {",
															"   pm.expect(jsonResponse.ver).to.eql(\"4.0\");",
															"});",
															"pm.test(\"id should be api.content.update\", function () {",
															"   pm.expect(jsonResponse.id).to.eql(\"api.content.update\");",
															"});",
															"pm.test(\"Params has keys: resmsgid , msgid , err , status , errmsg \", () => {",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid', 'msgid','err','status','errmsg');",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");",
															"  pm.expect(jsonResponse.params.msgid).to.be.a('null');",
															"  pm.expect(jsonResponse.params.err).to.be.a('string');",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a('string');",
															"});",
															"//code name contains a string",
															"tests[\"Status code name has string \\\"Bad Request\\\"\"] = responseCode.name.has(\"Bad Request\");",
															"",
															"pm.test(\"Verify keys and data type of the response result\", () => {",
															"  pm.expect(jsonResponse.result).to.be.an(\"object\");",
															"  pm.expect(jsonResponse.result).to.have.all.keys('messages');",
															"  pm.expect(jsonResponse.result.messages).to.not.be.empty;",
															"});",
															"",
															"//Validation",
															"// Response body",
															"pm.test(\"responseCode should be \\\"CLIENT_ERROR\\\"\", () => {",
															"    pm.expect(jsonResponse.responseCode).to.eql(\"CLIENT_ERROR\");",
															"});",
															"",
															"// Params",
															"pm.test(\"params.err should be \\\"CLIENT_ERROR\\\"\", () => {",
															"    pm.expect(jsonResponse.params.err).to.eql(\"CLIENT_ERROR\");",
															"});",
															"pm.test(\"params.errmsg should be \\\"Validation Errors\\\"\", () => {",
															"    pm.expect(jsonResponse.params.errmsg).to.eql(\"Validation Errors\");",
															"});",
															"",
															"// Result",
															"pm.test(\"result body should include messages \\\"Required Metadata name not set\\\"\", () => {",
															"    pm.expect(jsonResponse.result.messages).to.have.length(1)",
															"    pm.expect(jsonResponse.result.messages).to.include('Required Metadata name not set');",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}",
														"type": "text"
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"versionKey\": \"{{updatecontent_versionkey}}\",\n            \"name\": \"\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/content/v4/update/{{update_content_id}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"content",
														"v4",
														"update",
														"{{update_content_id}}"
													]
												},
												"description": "This API is associated with updating a batch on the Sunbird Platform.\nThe endpoint for Course Batch Update is /batch/update\nThe fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
											},
											"response": []
										},
										{
											"name": "Update content with Invalid content id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()",
															"",
															"//Verification",
															"pm.test(\"Status code is 404\", () => {",
															"    pm.response.to.have.status(404)",
															"});",
															"pm.test(\"ver should be 4.0\", function () {",
															"   pm.expect(jsonResponse.ver).to.eql(\"4.0\");",
															"});",
															"pm.test(\"id should be api.content.update\", function () {",
															"   pm.expect(jsonResponse.id).to.eql(\"api.content.update\");",
															"});",
															"pm.test(\"Params has keys: resmsgid , msgid , err , status , errmsg \", () => {",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid', 'msgid','err','status','errmsg');",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");",
															"  pm.expect(jsonResponse.params.msgid).to.be.a('null');",
															"  pm.expect(jsonResponse.params.err).to.be.a('string');",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a('string');",
															"});",
															"//code name contains a string",
															"tests[\"Status code name has string \\\"Not Found\\\"\"] = responseCode.name.has(\"Not Found\");",
															"",
															"pm.test(\"Verify keys and data type of the response result\", () => {",
															"  pm.expect(jsonResponse.result).to.be.an(\"object\");",
															"  pm.expect(jsonResponse.result).to.have.all.keys('messages');",
															"  pm.expect(jsonResponse.result.messages).to.be.null;",
															"});",
															"",
															"//Validation",
															"// Response body",
															"pm.test(\"responseCode should be RESOURCE_NOT_FOUND\", () => {",
															"    pm.expect(jsonResponse.responseCode).to.eql(\"RESOURCE_NOT_FOUND\");",
															"});",
															"",
															"// Params",
															"pm.test(\"params.err should be NOT_FOUND\", () => {",
															"    pm.expect(jsonResponse.params.err).to.eql(\"NOT_FOUND\");",
															"});",
															"pm.test(`params.errmsg should be \\\"Error! Node(s) doesn't Exists. | [Invalid Node Id.]: ${pm.collectionVariables.get(\"invalid_content_id\")}\\\"`, () => {",
															"    pm.expect(jsonResponse.params.errmsg).to.eql(`Error! Node(s) doesn't Exists. | [Invalid Node Id.]: ${pm.collectionVariables.get(\"invalid_content_id\")}`);",
															"});",
															"",
															"// Result",
															"pm.test(\"messages should be null\", () => {",
															"    pm.expect(jsonResponse.result.messages).to.eql(null);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.collectionVariables.set(\"invalid_content_id\", 'do_21357909972698726412211');"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}",
														"type": "text"
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"versionKey\": \"{{updatecontent_versionkey}}\",\n            \"lastUpdatedBy\": \"874ed8a5-782e-4f6c-8f36-e0288455901e\",\n            \"description\": \"dsd\",\n            \"name\": \"API DOCUMENTATION CONTENT\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/content/v4/update/{{invalid_content_id}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"content",
														"v4",
														"update",
														"{{invalid_content_id}}"
													]
												},
												"description": "This API is associated with updating a batch on the Sunbird Platform.\nThe endpoint for Course Batch Update is /batch/update\nThe fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
											},
											"response": []
										},
										{
											"name": "Update content with Invalid primaryCategory",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()",
															"",
															"//Verification",
															"pm.test(\"Status code is 404\", () => {",
															"    pm.response.to.have.status(404)",
															"});",
															"pm.test(\"ver should be 4.0\", function () {",
															"   pm.expect(jsonResponse.ver).to.eql(\"4.0\");",
															"});",
															"pm.test(\"id should be api.content.update\", function () {",
															"   pm.expect(jsonResponse.id).to.eql(\"api.content.update\");",
															"});",
															"pm.test(\"Params has keys: resmsgid , msgid , err , status , errmsg \", () => {",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid', 'msgid','err','status','errmsg');",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");",
															"  pm.expect(jsonResponse.params.msgid).to.be.a('null');",
															"  pm.expect(jsonResponse.params.err).to.be.a('string');",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a('string');",
															"});",
															"//code name contains a string",
															"tests[\"Status code name has string \\\"Not Found\\\"\"] = responseCode.name.has(\"Not Found\");",
															"",
															"pm.test(\"Verify keys and data type of the response result\", () => {",
															"  pm.expect(jsonResponse.result).to.be.an(\"object\");",
															"  pm.expect(jsonResponse.result).to.have.all.keys('messages');",
															"  pm.expect(jsonResponse.result.messages).to.be.null;",
															"});",
															"",
															"//Validation",
															"// Response body",
															"pm.test(\"responseCode should be RESOURCE_NOT_FOUND\", () => {",
															"    pm.expect(jsonResponse.responseCode).to.eql(\"RESOURCE_NOT_FOUND\");",
															"});",
															"",
															"// Params",
															"pm.test(\"params.err should be \\\"404\\\"\", () => {",
															"    pm.expect(jsonResponse.params.err).to.eql(\"404\");",
															"});",
															"pm.test(\"params.status should be \\\"failed\\\"\", () => {",
															"    pm.expect(jsonResponse.params.status).to.eql(\"failed\");",
															"});",
															"pm.test(`params.errmsg should be \\\"Entry is not found in cassandra for content with identifier: obj-cat:${JSON.parse(request.data).request.content.primaryCategory}_content_all {}\\\"`, () => {",
															"    pm.expect(jsonResponse.params.errmsg).to.eql(`Entry is not found in cassandra for content with identifier: obj-cat:${JSON.parse(request.data).request.content.primaryCategory}_content_all {}`);",
															"});",
															"",
															"pm.test(\"messages should be null\", () => {",
															"    pm.expect(jsonResponse.result.messages).to.eql(null);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}",
														"type": "text"
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"versionKey\": \"{{versionkey_update}}\",\n            \"description\": \"dsd\",\n            \"name\": \"API DOCUMENTATION CONTENT\",\n            \"primaryCategory\": \"abcd\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/content/v4/update/{{content_update}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"content",
														"v4",
														"update",
														"{{content_update}}"
													]
												},
												"description": "This API is associated with updating a batch on the Sunbird Platform.\nThe endpoint for Course Batch Update is /batch/update\nThe fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Read content",
							"item": [
								{
									"name": "Pre requisite",
									"item": [
										{
											"name": "Create Content",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"\r",
															"pm.collectionVariables.set(\"read_content\", jsonResponse.result.identifier);\r",
															"console.log(pm.collectionVariables.get(\"read_content\"));\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}"
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}"
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"Explanation Content\",\n            \"body\": \"{\\\"key\\\":\\\"value\\\"}\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/content/v4/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"content",
														"v4",
														"create"
													]
												},
												"description": "This API is associated with creating content on the Sunbird Platform.\n  - The endpoint for **Create Content** is `/content/v2/create`\n  - It points to knowledge-mw-service - `/v2/content/create`\n  - It is mandatory to provide values for parameters marked with *.\n  - Mandatory fields cannot be null or empty."
											},
											"response": [
												{
													"name": "SUCCESS. The **Create Content** operation was successful!",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) Represents a physical location (e.g: state) uniquely to which the user belongs.",
																"key": "x-channel-id",
																"value": "ea laborum"
															},
															{
																"description": "(Required) Represents the authorized User ID to execute the API.",
																"key": "X-Authenticated-User-Token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"content\": {\n      \"name\": \"H5P Content\",\n      \"code\": \"h5pcontent\",\n      \"mimeType\": \"application/vnd.ekstep.h5p-archive\",\n      \"primaryCategory\": \"Resource\",\n      \"createdBy\": \"874ed8a5-782e-4f6c-8f36-e0288455901e\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"create"
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.content.create\",\n  \"ver\": \"3.0\",\n  \"ts\": \"2020-12-10T20:24:45ZZ\",\n  \"params\": {\n    \"resmsgid\": \"3be02c4b-3324-41a3-afd8-60f6be0584d2\",\n    \"msgid\": null,\n    \"err\": null,\n    \"status\": \"successful\",\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"identifier\": \"do_1131697204035993601314\",\n    \"node_id\": \"do_1131697204035993601314\",\n    \"versionKey\": \"1607631885207\"\n  }\n}"
												},
												{
													"name": "'BAD REQUEST. The **Create Content** operation failed. You may have missed input for a mandatory parameter.'",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) Represents a physical location (e.g: state) uniquely to which the user belongs.",
																"key": "x-channel-id",
																"value": "ea laborum"
															},
															{
																"description": "(Required) Represents the authorized User ID to execute the API.",
																"key": "X-Authenticated-User-Token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"content\": {\n      \"name\": \"H5P Content\",\n      \"code\": \"h5pcontent\",\n      \"mimeType\": \"application/vnd.ekstep.h5p-archive\",\n      \"primaryCategory\": \"Resource\",\n      \"createdBy\": \"874ed8a5-782e-4f6c-8f36-e0288455901e\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"create"
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.content.create\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-10T08:50:29.786Z\",\n  \"params\": {\n    \"resmsgid\": \"c169a7a0-3ac4-11eb-b0a2-8d5c9f561887\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"ERR_CONTENT_CREATE_FIELDS_MISSING\",\n    \"errmsg\": \"Required fields for create content are missing\"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {}\n}"
												},
												{
													"name": "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) Represents a physical location (e.g: state) uniquely to which the user belongs.",
																"key": "x-channel-id",
																"value": "ea laborum"
															},
															{
																"description": "(Required) Represents the authorized User ID to execute the API.",
																"key": "X-Authenticated-User-Token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"content\": {\n      \"name\": \"H5P Content\",\n      \"code\": \"h5pcontent\",\n      \"mimeType\": \"application/vnd.ekstep.h5p-archive\",\n      \"primaryCategory\": \"Resource\",\n      \"createdBy\": \"874ed8a5-782e-4f6c-8f36-e0288455901e\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"create"
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.content.create\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-10T08:51:51.647Z\",\n  \"params\": {\n    \"resmsgid\": \"f234a6f0-3ac4-11eb-b0a2-8d5c9f561887\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": null,\n    \"errmsg\": null\n  },\n  \"responseCode\": \"SERVER_ERROR\",\n  \"result\": {}\n}"
												}
											]
										}
									]
								},
								{
									"name": "Positive",
									"item": [
										{
											"name": "Read all data except external data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();",
															"",
															"pm.test(\"Verify keys and data type of the response result\", () => {",
															"  pm.expect(jsonResponse.result).to.have.all.keys('content');",
															"  pm.expect(jsonResponse.result.content).to.be.an(\"object\")",
															"  pm.expect(jsonResponse.result.content).to.have.any.keys('identifier', 'versionKey', 'code', 'channel', 'mimeType', 'createdOn', 'primaryCategory', 'contentDisposition', 'contentEncoding', 'objectType', 'visibility', 'discussionForum', 'license', 'version', 'compatibilityLevel', 'name', 'status');",
															"  pm.expect(jsonResponse.result.content.identifier).to.be.a(\"string\");",
															"  pm.expect(jsonResponse.result.content.versionKey).to.be.a(\"string\");",
															"  pm.expect(jsonResponse.result.content.version).to.be.a(\"number\");",
															"  pm.expect(jsonResponse.result.content.channel).to.be.a(\"string\");",
															"  pm.expect(jsonResponse.result.content.compatibilityLevel).to.be.a(\"number\");",
															"  pm.expect(jsonResponse.result.content.ownershipType).to.be.an(\"array\");",
															"});",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"Status code name has string OK\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"//Validation",
															"pm.test(\"id should be api.content.read\", () => {",
															"   pm.expect(jsonResponse.id).to.eql(\"api.content.read\");",
															"});",
															"pm.test(\"ver should be 4.0\", () => {",
															"   pm.expect(jsonResponse.ver).to.eql(\"4.0\");",
															"});",
															"",
															"pm.test(`identifier should be equal to ${pm.collectionVariables.get(\"read_content\")}`, () => {",
															"    pm.expect(jsonResponse.result.content.identifier).to.eql(pm.collectionVariables.get(\"read_content\"));",
															"});",
															"pm.test(\"objectType should be Content\", () => {",
															"    pm.expect(jsonResponse.result.content.objectType).to.eql(\"Content\");",
															"});",
															"pm.test(\"visibility should be Default\", () => {",
															"    pm.expect(jsonResponse.result.content.visibility).to.eql(\"Default\");",
															"});",
															"pm.test(\"compatibilityLevel should be 1\", () => {",
															"    pm.expect(jsonResponse.result.content.compatibilityLevel).to.eql(1);",
															"});",
															"pm.test(\"status should be Draft\", () => {",
															"    pm.expect(jsonResponse.result.content.status).to.eql(\"Draft\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{host}}/content/v4/read/{{read_content}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"content",
														"v4",
														"read",
														"{{read_content}}"
													]
												},
												"description": "Fetch a particular Batch\nThis API is associated with fetching a particular batch on the Sunbird Platform.\nThe endpoint for Fetch a particular Batch is /batch/read/{Batch_ID}\nThe fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
											},
											"response": []
										},
										{
											"name": "Read specific attributes by sending fields query params",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"Status code name has string OK\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Verify keys and data type of the response result\", () => {",
															"  pm.expect(jsonResponse.result).to.have.all.keys('content');",
															"  pm.expect(jsonResponse.result.content).to.be.an(\"object\")",
															"  pm.expect(jsonResponse.result.content).to.have.all.keys('identifier', 'primaryCategory', 'name', 'languageCode','body');",
															"  pm.expect(jsonResponse.result.content.identifier).to.be.a(\"string\");",
															"  pm.expect(jsonResponse.result.content.versionKey).to.be.undefined;",
															"  pm.expect(jsonResponse.result.content.version).to.be.undefined;",
															"  pm.expect(jsonResponse.result.content.channel).to.be.undefined;",
															"  pm.expect(jsonResponse.result.content.compatibilityLevel).to.be.undefined;",
															"  pm.expect(jsonResponse.result.content.languageCode).to.be.an(\"array\");",
															"});",
															"",
															"//Validation",
															"pm.test(\"id should be api.content.read\", function () {",
															"   pm.expect(jsonResponse.id).to.eql(\"api.content.read\");",
															"});",
															"pm.test(\"ver should be 4.0\", () => {",
															"   pm.expect(jsonResponse.ver).to.eql(\"4.0\");",
															"});",
															"",
															"pm.test(`identifier should be equal to ${pm.collectionVariables.get(\"read_content\")}`, () => {",
															"    pm.expect(jsonResponse.result.content.identifier).to.eql(pm.collectionVariables.get(\"read_content\"));",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// pm.globals.set('content_id', '');"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{host}}/content/v4/read/{{read_content}}?fields=name,primaryCategory,body",
													"host": [
														"{{host}}"
													],
													"path": [
														"content",
														"v4",
														"read",
														"{{read_content}}"
													],
													"query": [
														{
															"key": "fields",
															"value": "name,primaryCategory,body",
															"description": "Fields param is used to get the external data in response, by default read API doesn't return external data. Also fields can be used to get the specific data only in response instead of getting all the data."
														}
													]
												},
												"description": "Fetch a particular Batch\nThis API is associated with fetching a particular batch on the Sunbird Platform.\nThe endpoint for Fetch a particular Batch is /batch/read/{Batch_ID}\nThe fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
											},
											"response": []
										}
									]
								},
								{
									"name": "Negtaive",
									"item": [
										{
											"name": "Read invalid content",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()",
															"",
															"//Verification",
															"pm.test(\"Status code is 404\", function () {",
															"    pm.response.to.have.status(404)",
															"});",
															"pm.test(\"Params has keys: resmsgid , msgid , err , status , errmsg \", () => {",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid', 'msgid','err','status','errmsg');",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");",
															"  pm.expect(jsonResponse.params.msgid).to.be.a('null');",
															"  pm.expect(jsonResponse.params.err).to.be.a('string');",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a('string');",
															"});",
															"//code name contains a string",
															"tests[\"Status code name has string \\\"Not Found\\\"\"] = responseCode.name.has(\"Not Found\");",
															"",
															"pm.test(\"Test data type of the response and keys\", () => {",
															"  pm.expect(jsonResponse.result).to.be.an(\"object\");",
															"  pm.expect(jsonResponse.result).to.have.all.keys('messages');",
															"  pm.expect(jsonResponse.result.messages).to.be.null;",
															"});",
															"",
															"//Validation",
															"// Response body",
															"pm.test(\"id should be api.content.read\", () => {",
															"   pm.expect(jsonResponse.id).to.eql(\"api.content.read\");",
															"});",
															"pm.test(\"ver should be 4.0\", () => {",
															"   pm.expect(jsonResponse.ver).to.eql(\"4.0\");",
															"});",
															"pm.test(\"responseCode should be RESOURCE_NOT_FOUND\", () => {",
															"    pm.expect(jsonResponse.responseCode).to.eql(\"RESOURCE_NOT_FOUND\");",
															"});",
															"",
															"// Params",
															"pm.test(\"params.err should be \\\"NOT_FOUND\\\"\", () => {",
															"    pm.expect(jsonResponse.params.err).to.eql(\"NOT_FOUND\");",
															"});",
															"pm.test(\"params.status should be \\\"failed\\\"\", () => {",
															"    pm.expect(jsonResponse.params.status).to.eql(\"failed\");",
															"});",
															"pm.test(`params.errmsg should be \\\"Error! Node(s) doesn't Exists. | [Invalid Node Id.]: ${pm.globals.get('invalid_content_id')}\\\"`, () => {",
															"    pm.expect(jsonResponse.params.errmsg).to.eql(`Error! Node(s) doesn't Exists. | [Invalid Node Id.]: ${pm.globals.get('invalid_content_id')}`);",
															"});",
															"",
															"// Result",
															"pm.test(\"messages should be null\", () => {",
															"    pm.expect(jsonResponse.result.messages).to.eql(null);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.globals.set('invalid_content_id', 'do_42353245436534');"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{host}}/content/v4/read/{{invalid_content_id}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"content",
														"v4",
														"read",
														"{{invalid_content_id}}"
													]
												},
												"description": "Fetch a particular Batch\nThis API is associated with fetching a particular batch on the Sunbird Platform.\nThe endpoint for Fetch a particular Batch is /batch/read/{Batch_ID}\nThe fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Submit Review",
							"item": [
								{
									"name": "Pre requisite",
									"item": [
										{
											"name": "Create Content",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"\r",
															"pm.collectionVariables.set(\"submit_content\", jsonResponse.result.identifier);\r",
															"console.log(pm.collectionVariables.get(\"submit_content\"));\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}"
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}"
													},
													{
														"key": "X-Channel-Id",
														"value": "sunbird"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"video/mp4\",\n            \"primaryCategory\": \"Explanation Content\",\n            \"body\": \"{\\\"key\\\":\\\"value\\\"}\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/content/v4/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"content",
														"v4",
														"create"
													]
												},
												"description": "This API is associated with creating content on the Sunbird Platform.\n  - The endpoint for **Create Content** is `/content/v2/create`\n  - It points to knowledge-mw-service - `/v2/content/create`\n  - It is mandatory to provide values for parameters marked with *.\n  - Mandatory fields cannot be null or empty."
											},
											"response": [
												{
													"name": "SUCCESS. The **Create Content** operation was successful!",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) Represents a physical location (e.g: state) uniquely to which the user belongs.",
																"key": "x-channel-id",
																"value": "ea laborum"
															},
															{
																"description": "(Required) Represents the authorized User ID to execute the API.",
																"key": "X-Authenticated-User-Token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"content\": {\n      \"name\": \"H5P Content\",\n      \"code\": \"h5pcontent\",\n      \"mimeType\": \"application/vnd.ekstep.h5p-archive\",\n      \"primaryCategory\": \"Resource\",\n      \"createdBy\": \"874ed8a5-782e-4f6c-8f36-e0288455901e\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"create"
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.content.create\",\n  \"ver\": \"3.0\",\n  \"ts\": \"2020-12-10T20:24:45ZZ\",\n  \"params\": {\n    \"resmsgid\": \"3be02c4b-3324-41a3-afd8-60f6be0584d2\",\n    \"msgid\": null,\n    \"err\": null,\n    \"status\": \"successful\",\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"identifier\": \"do_1131697204035993601314\",\n    \"node_id\": \"do_1131697204035993601314\",\n    \"versionKey\": \"1607631885207\"\n  }\n}"
												},
												{
													"name": "'BAD REQUEST. The **Create Content** operation failed. You may have missed input for a mandatory parameter.'",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) Represents a physical location (e.g: state) uniquely to which the user belongs.",
																"key": "x-channel-id",
																"value": "ea laborum"
															},
															{
																"description": "(Required) Represents the authorized User ID to execute the API.",
																"key": "X-Authenticated-User-Token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"content\": {\n      \"name\": \"H5P Content\",\n      \"code\": \"h5pcontent\",\n      \"mimeType\": \"application/vnd.ekstep.h5p-archive\",\n      \"primaryCategory\": \"Resource\",\n      \"createdBy\": \"874ed8a5-782e-4f6c-8f36-e0288455901e\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"create"
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.content.create\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-10T08:50:29.786Z\",\n  \"params\": {\n    \"resmsgid\": \"c169a7a0-3ac4-11eb-b0a2-8d5c9f561887\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"ERR_CONTENT_CREATE_FIELDS_MISSING\",\n    \"errmsg\": \"Required fields for create content are missing\"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {}\n}"
												},
												{
													"name": "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) Represents a physical location (e.g: state) uniquely to which the user belongs.",
																"key": "x-channel-id",
																"value": "ea laborum"
															},
															{
																"description": "(Required) Represents the authorized User ID to execute the API.",
																"key": "X-Authenticated-User-Token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"content\": {\n      \"name\": \"H5P Content\",\n      \"code\": \"h5pcontent\",\n      \"mimeType\": \"application/vnd.ekstep.h5p-archive\",\n      \"primaryCategory\": \"Resource\",\n      \"createdBy\": \"874ed8a5-782e-4f6c-8f36-e0288455901e\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"create"
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.content.create\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-10T08:51:51.647Z\",\n  \"params\": {\n    \"resmsgid\": \"f234a6f0-3ac4-11eb-b0a2-8d5c9f561887\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": null,\n    \"errmsg\": null\n  },\n  \"responseCode\": \"SERVER_ERROR\",\n  \"result\": {}\n}"
												}
											]
										},
										{
											"name": "Upload URL Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Status code name has string OK\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"id should be api.content.upload.url\", function () {\r",
															"   pm.expect(jsonResponse.id).to.eql(\"api.content.upload.url\");\r",
															"});\r",
															"pm.test(\"ver should be 4.0\", function () {\r",
															"   pm.expect(jsonResponse.ver).to.eql(\"4.0\");\r",
															"});\r",
															"\r",
															"pm.test(\"Params has keys: resmsgid , msgid , err , status , errmsg \", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid', 'msgid','err','status','errmsg');\r",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.params.msgid).to.be.a('null');\r",
															"  pm.expect(jsonResponse.params.err).to.be.a('null');\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a('null');\r",
															"});\r",
															"\r",
															"pm.test(\"Status is successful\", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"successful\");\r",
															"});\r",
															"\r",
															"pm.test(\"ResponseCode is OK\", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"OK\");\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.result).to.have.all.keys('identifier', 'url_expiry', 'pre_signed_url');\r",
															"});\r",
															"pm.collectionVariables.set(\"pre_signed_URL\",jsonResponse.result.pre_signed_url );\r",
															"console.log(pm.collectionVariables.get(\"pre_signed_URL\"));\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "value",
															"value": "<API Key>",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"description": "(Required) The Registered User ID to execute the API.",
														"key": "X-Authenticated-Userid",
														"value": "ea laborum"
													},
													{
														"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
														"key": "Authorization",
														"value": "ea laborum"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"fileName\":\"test.pdf\"\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/content/v4/upload/url/{{submit_content}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"content",
														"v4",
														"upload",
														"url",
														"{{submit_content}}"
													]
												},
												"description": "This API is associated with uploading content on the Sunbird Platform .\n   - The**_/upload/url/{content Id}_** endpoint executes \"Upload Content URL\" request based on parameters provided as metadata in the request body.\n   - The endpoint for **Upload Content URL** is `/content/v2/upload/url`\n  - It points to knowledge-mw-service - `/v2/content/upload/url`\n  - {...}refers to a section of upload endpoint URL path that needs to be replaced by appropriate Id.\n   - You need to provide a valid content Id value in {Content Id} field of API URL.\n   - On Success api returns pre-signed-url link with come configured ttl against which file can be uploaded.\n   - It is mandatory to provide values for parameters marked with *.\n   - Mandatory fields cannot be null or empty."
											},
											"response": [
												{
													"name": "OK ! Successful operation.\"Content upload\" operation was successfully executed.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) The Registered User ID to execute the API.",
																"key": "X-Authenticated-Userid",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"content\": {\n      \"fileName\": \"test.pdf\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/upload/url/:Content_Id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"upload",
																"url",
																":Content_Id"
															],
															"variable": [
																{
																	"key": "Content_Id",
																	"value": "ea laborum",
																	"description": "(Required) Please append a valid Content Id To the Request URL"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.content.upload.url\",\n  \"ver\": \"3.0\",\n  \"ts\": \"2020-12-11T23:52:44ZZ\",\n  \"params\": {\n    \"resmsgid\": \"81e308fa-3e36-45ff-b295-e28e8f757dc7\",\n    \"msgid\": null,\n    \"err\": null,\n    \"status\": \"successful\",\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"identifier\": \"do_11317053041892556811094\",\n    \"url_expiry\": \"54000\",\n    \"pre_signed_url\": \"https://sunbirddev.blob.core.windows.net/sunbird-content-dev/content/assets/do_11317053041892556811094/10-page-pdf.pdf?sv=2017-04-17&se=2020-12-12T14%3A52%3A44Z&sr=b&sp=w&sig=Tlt6uWI/6lMeupkEbsTAmGajmo1qzw8HeUHrVwOm6yk%3D\"\n  }\n}"
												},
												{
													"name": "BAD REQUEST. The 'Upload Url' operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) The Registered User ID to execute the API.",
																"key": "X-Authenticated-Userid",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"content\": {\n      \"fileName\": \"test.pdf\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/upload/url/:Content_Id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"upload",
																"url",
																":Content_Id"
															],
															"variable": [
																{
																	"key": "Content_Id",
																	"value": "ea laborum",
																	"description": "(Required) Please append a valid Content Id To the Request URL"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.content.upload.url\",\n  \"ver\": \"3.0\",\n  \"ts\": \"2020-12-11T23:54:07ZZ\",\n  \"params\": {\n    \"resmsgid\": \"4edde64d-3116-4271-bcc1-a8ba0ec2d56b\",\n    \"msgid\": null,\n    \"err\": \"ERR_CONTENT_BLANK_FILE_NAME\",\n    \"status\": \"failed\",\n    \"errmsg\": \"File name is blank\"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {\n    \"messages\": null\n  }\n}"
												},
												{
													"name": "RESOURCE NOT FOUND,**Content Id sent for generating upload url** operation failed !The possible reason for failure is that you may have provided wrong content id.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) The Registered User ID to execute the API.",
																"key": "X-Authenticated-Userid",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"content\": {\n      \"fileName\": \"test.pdf\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/upload/url/:Content_Id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"upload",
																"url",
																":Content_Id"
															],
															"variable": [
																{
																	"key": "Content_Id",
																	"value": "ea laborum",
																	"description": "(Required) Please append a valid Content Id To the Request URL"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.upload.url\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-11T23:48:26.694Z\",\n  \"params\": {\n    \"resmsgid\": \"5cf72660-3c0b-11eb-b0a2-8d5c9f561887\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"NOT_FOUND\",\n    \"errmsg\": \"Error! Node(s) doesn't Exists. | [Invalid Node Id.]: do_11254577204586086415\"\n  },\n  \"responseCode\": \"RESOURCE_NOT_FOUND\",\n  \"result\": {}\n}"
												},
												{
													"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) The Registered User ID to execute the API.",
																"key": "X-Authenticated-Userid",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"content\": {\n      \"fileName\": \"test.pdf\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/upload/url/:Content_Id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"upload",
																"url",
																":Content_Id"
															],
															"variable": [
																{
																	"key": "Content_Id",
																	"value": "ea laborum",
																	"description": "(Required) Please append a valid Content Id To the Request URL"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"result\": {},\n  \"id\": \"cupidatat reprehenderit dolor\",\n  \"ver\": \"minim anim commodo\",\n  \"ts\": \"commodo\",\n  \"params\": {\n    \"resmsgid\": \"pariatur repre\",\n    \"msgid\": \"irure\",\n    \"err\": \"consequat esse ea\",\n    \"status\": \"esse\",\n    \"errmsg\": \"aliqua laboris velit\"\n  },\n  \"responseCode\": \"reprehenderit dolor elit sunt dolore\"\n}"
												}
											]
										},
										{
											"name": "Upload file to the URL Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"var fullUrl= pm.collectionVariables.get(\"pre_signed_URL\");\r",
															"\r",
															"// Find the index of '?' to get the position of the query parameters\r",
															"var indexOfQuestionMark = fullUrl.indexOf('?');\r",
															"\r",
															"// Extract the partial URL without the query parameters\r",
															"var partialUrl = indexOfQuestionMark !== -1 ? fullUrl.slice(0, indexOfQuestionMark) : fullUrl;\r",
															"pm.collectionVariables.set(\"partial_URL\", partialUrl);\r",
															"// Log the partial URL to the console (you can remove this line if not needed)\r",
															"console.log(pm.collectionVariables.get(\"partial_URL\"));\r",
															"\r",
															"// Now you can use the 'partialUrl' variable in Postman as needed\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Ms-Blob-Type",
														"value": "BlockBlob"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"type": "file",
															"src": "/C:/Users/Qualitrix/Downloads/pdf_233.pdf"
														}
													]
												},
												"url": {
													"raw": "{{pre_signed_URL}}",
													"host": [
														"{{pre_signed_URL}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update the content with valid URL and mime type Copy",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Status code name has string OK\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"id should be api.content.upload\", function () {\r",
															"   pm.expect(jsonResponse.id).to.eql(\"api.content.upload\");\r",
															"});\r",
															"pm.test(\"ver should be 4.0\", function () {\r",
															"   pm.expect(jsonResponse.ver).to.eql(\"4.0\");\r",
															"});\r",
															"\r",
															"pm.test(\"Params has keys: resmsgid , msgid , err , status , errmsg \", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid', 'msgid','err','status','errmsg');\r",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.params.msgid).to.be.a('null');\r",
															"  pm.expect(jsonResponse.params.err).to.be.a('null');\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a('null');\r",
															"});\r",
															"\r",
															"pm.test(\"Status is successful\", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"successful\");\r",
															"});\r",
															"\r",
															"pm.test(\"ResponseCode is OK\", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test(\"Result has keys: identifier , artifactUrl , content_url , node_id , versionKey \", () => {\r",
															"  pm.expect(jsonResponse.result).to.have.all.keys('identifier', 'artifactUrl','content_url','node_id','versionKey');\r",
															"  pm.expect(jsonResponse.result.identifier).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.result.artifactUrl).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.result.content_url).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.result.node_id).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.result.versionKey).to.be.a(\"string\");\r",
															"});\r",
															"\r",
															"pm.test(`artifactUrl should be: ${pm.collectionVariables.get(\"partial_URL\")}`, function () {\r",
															"    pm.expect(jsonResponse.result.artifactUrl).to.be.equal(`${pm.collectionVariables.get(\"partial_URL\")}`);\r",
															"});\r",
															"\r",
															"pm.test(`content_url should be: ${pm.collectionVariables.get(\"partial_URL\")}`, function () {\r",
															"    pm.expect(jsonResponse.result.content_url).to.be.equal(`${pm.collectionVariables.get(\"partial_URL\")}`);\r",
															"});\r",
															"\r",
															"pm.test(`identifier should be: ${pm.collectionVariables.get(\"submit_content\")}`, function () {\r",
															"    pm.expect(jsonResponse.result.identifier).to.be.equal(`${pm.collectionVariables.get(\"submit_content\")}`);\r",
															"});\r",
															"\r",
															"pm.test(`node_id should be: ${pm.collectionVariables.get(\"submit_content\")}`, function () {\r",
															"    pm.expect(jsonResponse.result.node_id).to.be.equal(`${pm.collectionVariables.get(\"submit_content\")}`);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "user-id",
														"value": "mahesh"
													},
													{
														"key": "Cookie",
														"value": "connect.sid=s%3AnLNdCeYI27WUkZBIFdX1J5MKTM6ISEdJ.SFTq%2FeT2cVLh5TSEWmwZPCekWDSeNXILHPDyziKa26E"
													},
													{
														"key": "X-Channel-Id",
														"value": "0137541424673095687"
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6ImFjY2Vzc3YxX2tleTEifQ.eyJhdWQiOiJodHRwczovL2Rldi5zdW5iaXJkZWQub3JnL2F1dGgvcmVhbG1zL3N1bmJpcmQiLCJzdWIiOiJmOjVhOGEzZjJiLTM0MDktNDJlMC05MDAxLWY5MTNiYzBmZGUzMToxNTVjZTNjNS03MTNlLTQ3NDktYmMxYy05NWQwOWM2NDA5MTQiLCJyb2xlcyI6W3sicm9sZSI6IkNPTlRFTlRfQ1JFQVRPUiIsInNjb3BlIjpbeyJvcmdhbmlzYXRpb25JZCI6IjAxMzc1NDE0MjQ2NzMwOTU2ODcifV19LHsicm9sZSI6IkNPVVJTRV9NRU5UT1IiLCJzY29wZSI6W3sib3JnYW5pc2F0aW9uSWQiOiIwMTM3NTQxNDI0NjczMDk1Njg3In1dfSx7InJvbGUiOiJQVUJMSUMiLCJzY29wZSI6W119XSwiaXNzIjoiaHR0cHM6Ly9kZXYuc3VuYmlyZGVkLm9yZy9hdXRoL3JlYWxtcy9zdW5iaXJkIiwibmFtZSI6ImNvbnRlbnRDcmVhdG9yIiwidHlwIjoiQmVhcmVyIiwiZXhwIjoxNzAyMzI0NjU0LCJpYXQiOjE3MDIyODE0NTR9.MxiIhP6YJmI1XbozLNoJeQAbdQKs597f2mlNHWcJ-ZZIXvBx4BcX7T57B5xXGIT6LJ6YlS86saiG6SXHIG5ptgICphdefNysfVgkSUmqTsgzfzvjp2lzIw8Re7xi735Kd7B612y5Tkswm0ETP7NIeQ7-Tc_3h37GV04ISfx0LMD75UvgllxcDz91Bl6N3-WN4KwCeKIfJ-iZj-EJLwoBmJjGsgNCNTn5DTzF_joFcyett__WVc14Ex-BqRSq8Hr2fMVoHpNXze3QUJ7PcD4JRY2Ywg5R9VkHz3mkhY9kI1cWeHdQypeSsM8niQK1XCWJz_aTqsP35MshDnHkWhmDyg"
													},
													{
														"key": "Authorization",
														"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiIzZGNjMzY3OWIwYTE0NmU2YWYyZjlmZDA5NWU5NTlkNCJ9.0NZhX5sqUNy-GZUya90aQFkr5ZNiqfOuELYz_IvoyS8"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "fileUrl",
															"value": "{{partial_URL}}",
															"type": "text"
														},
														{
															"key": "mimeType",
															"value": "application/pdf",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{host}}/content/v4/upload/{{submit_content}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"content",
														"v4",
														"upload",
														"{{submit_content}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create content for negative scenario",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"\r",
															"pm.collectionVariables.set(\"submit_content_neg\", jsonResponse.result.identifier);\r",
															"console.log(pm.collectionVariables.get(\"submit_content_neg\"));\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}"
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}"
													},
													{
														"key": "X-Channel-Id",
														"value": "sunbird"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"video/mp4\",\n            \"primaryCategory\": \"Explanation Content\",\n            \"body\": \"{\\\"key\\\":\\\"value\\\"}\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/content/v4/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"content",
														"v4",
														"create"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Positive",
									"item": [
										{
											"name": "Submit for Review",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Status code name has string OK\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"id should be api.content.review\", function () {\r",
															"   pm.expect(jsonResponse.id).to.eql(\"api.content.review\");\r",
															"});\r",
															"pm.test(\"ver should be 4.0\", function () {\r",
															"   pm.expect(jsonResponse.ver).to.eql(\"4.0\");\r",
															"});\r",
															"\r",
															"pm.test(\"Params has keys: resmsgid , msgid , err , status , errmsg \", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid', 'msgid','err','status','errmsg');\r",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.params.msgid).to.be.a('null');\r",
															"  pm.expect(jsonResponse.params.err).to.be.a('null');\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a('null');\r",
															"});\r",
															"\r",
															"pm.test(\"Status is successful\", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"successful\");\r",
															"});\r",
															"\r",
															"pm.test(\"ResponseCode is OK\", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"OK\");\r",
															"});\r",
															"pm.test(\"Result has keys: identifier , versionKey\", () => {\r",
															"  pm.expect(jsonResponse.result).to.have.all.keys('identifier','versionKey');\r",
															"  pm.expect(jsonResponse.result.identifier).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.result.versionKey).to.be.a(\"string\");\r",
															"});\r",
															"\r",
															"pm.test(`identifier should be: ${pm.collectionVariables.get(\"submit_content\")}`, function () {\r",
															"    pm.expect(jsonResponse.result.identifier).to.be.equal(`${pm.collectionVariables.get(\"submit_content\")}`);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{auth_token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"description": "(Required) The Registered User ID to execute the API.",
														"key": "X-Authenticated-User-token",
														"value": "ea laborum"
													},
													{
														"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
														"key": "Authorization",
														"value": "ea laborum"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/content/v4/review/{{submit_content}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"content",
														"v4",
														"review",
														"{{submit_content}}"
													]
												},
												"description": ">- This API is associated with Submission of content for Review  on the Sunbird Platform .\n  - The**_/review/{content Id}_** endpoint executes \"Submit for Review\" request based on parameters provided as metadata in the request body.\n  - The endpoint for **Review Content** is `/content/v2/review`\n  - It points to knowledge-mw-service - `/v2/content/review`\n  - {...}refers to a section of review endpoint URL path that needs to be replaced by appropriate Id.\n  - You need to provide a valid content Id value in {Content Id} field of API URL.\n  - It is mandatory to provide values for parameters marked with *.\n  - Mandatory fields cannot be null or empty."
											},
											"response": [
												{
													"name": "OK ! Successful operation.Content sent for review operation was successfully executed.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) The Registered User ID to execute the API.",
																"key": "X-Authenticated-User-token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/review/:Content_Id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"review",
																":Content_Id"
															],
															"variable": [
																{
																	"key": "Content_Id",
																	"value": "ea laborum",
																	"description": "(Required) Please append a valid Content Id To the Request URL"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"ekstep.learning.content.review\",\n  \"ver\": \"3.0\",\n  \"ts\": \"2020-12-10T21:06:26ZZ\",\n  \"params\": {\n    \"resmsgid\": \"186cf9a9-8094-4cdd-926f-b77a030921d1\",\n    \"msgid\": null,\n    \"err\": null,\n    \"status\": \"successful\",\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"node_id\": \"do_1131697376667402241315\",\n    \"versionKey\": \"1607634386533\"\n  }\n}"
												},
												{
													"name": "RESOURCE NOT FOUND,**Content Send for Review** operation failed !The possible reason for failure is that you may have provided wrong content id.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) The Registered User ID to execute the API.",
																"key": "X-Authenticated-User-token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/review/:Content_Id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"review",
																":Content_Id"
															],
															"variable": [
																{
																	"key": "Content_Id",
																	"value": "ea laborum",
																	"description": "(Required) Please append a valid Content Id To the Request URL"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"ekstep.learning.content.review\",\n  \"ver\": \"3.0\",\n  \"ts\": \"2020-12-10T21:06:54ZZ\",\n  \"params\": {\n    \"resmsgid\": \"944ac944-78d9-43e2-bfd5-337ab52b6552\",\n    \"msgid\": null,\n    \"err\": \"ERR_TAXONOMY_INVALID_CONTENT\",\n    \"status\": \"failed\",\n    \"errmsg\": \"Error! While Fetching the Content for Operation | [Content Id: do_11316973766674022413151]\"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {}\n}"
												},
												{
													"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! We track these errors automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) The Registered User ID to execute the API.",
																"key": "X-Authenticated-User-token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/review/:Content_Id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"review",
																":Content_Id"
															],
															"variable": [
																{
																	"key": "Content_Id",
																	"value": "ea laborum",
																	"description": "(Required) Please append a valid Content Id To the Request URL"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"result\": {},\n  \"id\": \"cupidatat reprehenderit dolor\",\n  \"ver\": \"minim anim commodo\",\n  \"ts\": \"commodo\",\n  \"params\": {\n    \"resmsgid\": \"pariatur repre\",\n    \"msgid\": \"irure\",\n    \"err\": \"consequat esse ea\",\n    \"status\": \"esse\",\n    \"errmsg\": \"aliqua laboris velit\"\n  },\n  \"responseCode\": \"reprehenderit dolor elit sunt dolore\"\n}"
												}
											]
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Submit invalid content for review",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"//Verification\r",
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404)\r",
															"});\r",
															"pm.test(\"Params has keys: resmsgid , msgid , err , status , errmsg \", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid', 'msgid','err','status','errmsg');\r",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.params.msgid).to.be.a('null');\r",
															"  pm.expect(jsonResponse.params.err).to.be.a('string');\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a('string');\r",
															"});\r",
															"//code name contains a string\r",
															"tests[\"Status code name has string \\\"Not Found\\\"\"] = responseCode.name.has(\"Not Found\");\r",
															"\r",
															"pm.test(\"Test data type of the response and keys\", () => {\r",
															"  pm.expect(jsonResponse.result).to.be.an(\"object\");\r",
															"  pm.expect(jsonResponse.result).to.have.all.keys('messages');\r",
															"  pm.expect(jsonResponse.result.messages).to.be.null;\r",
															"});\r",
															"\r",
															"//Validation\r",
															"// Response body\r",
															"pm.test(\"id should be api.content.review\", () => {\r",
															"   pm.expect(jsonResponse.id).to.eql(\"api.content.review\");\r",
															"});\r",
															"pm.test(\"ver should be 4.0\", () => {\r",
															"   pm.expect(jsonResponse.ver).to.eql(\"4.0\");\r",
															"});\r",
															"pm.test(\"responseCode should be RESOURCE_NOT_FOUND\", () => {\r",
															"    pm.expect(jsonResponse.responseCode).to.eql(\"RESOURCE_NOT_FOUND\");\r",
															"});\r",
															"\r",
															"// Params\r",
															"pm.test(\"params.err should be \\\"NOT_FOUND\\\"\", () => {\r",
															"    pm.expect(jsonResponse.params.err).to.eql(\"NOT_FOUND\");\r",
															"});\r",
															"pm.test(\"params.status should be \\\"failed\\\"\", () => {\r",
															"    pm.expect(jsonResponse.params.status).to.eql(\"failed\");\r",
															"});\r",
															"pm.test(`Error! Node(s) doesn't Exists. | [Invalid Node Id.]: dummy`, () => {\r",
															"    pm.expect(jsonResponse.params.errmsg).to.eql(`Error! Node(s) doesn't Exists. | [Invalid Node Id.]: dummy`);\r",
															"});\r",
															"\r",
															"// Result\r",
															"pm.test(\"messages should be null\", () => {\r",
															"    pm.expect(jsonResponse.result.messages).to.eql(null);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "ea laborum"
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "ea laborum"
													},
													{
														"key": "Authorization",
														"value": "{{auth_token}}"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}"
												},
												"url": {
													"raw": "{{host}}/content/v4/review/dummy",
													"host": [
														"{{host}}"
													],
													"path": [
														"content",
														"v4",
														"review",
														"dummy"
													]
												}
											},
											"response": []
										},
										{
											"name": "Submit content for review without artifactr URL",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"//Verification\r",
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400)\r",
															"});\r",
															"pm.test(\"Params has keys: resmsgid , msgid , err , status , errmsg \", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid', 'msgid','err','status','errmsg');\r",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.params.msgid).to.be.a('null');\r",
															"  pm.expect(jsonResponse.params.err).to.be.a('string');\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a('string');\r",
															"});\r",
															"//code name contains a string\r",
															"tests[\"Status code name has string \\\"Bad Request\\\"\"] = responseCode.name.has(\"Bad Request\");\r",
															"\r",
															"pm.test(\"Test data type of the response and keys\", () => {\r",
															"  pm.expect(jsonResponse.result).to.be.an(\"object\");\r",
															"  pm.expect(jsonResponse.result).to.have.all.keys('messages');\r",
															"  pm.expect(jsonResponse.result.messages).to.be.null;\r",
															"});\r",
															"\r",
															"//Validation\r",
															"// Response body\r",
															"pm.test(\"id should be api.content.review\", () => {\r",
															"   pm.expect(jsonResponse.id).to.eql(\"api.content.review\");\r",
															"});\r",
															"pm.test(\"ver should be 4.0\", () => {\r",
															"   pm.expect(jsonResponse.ver).to.eql(\"4.0\");\r",
															"});\r",
															"pm.test(\"responseCode should be CLIENT_ERROR\", () => {\r",
															"    pm.expect(jsonResponse.responseCode).to.eql(\"CLIENT_ERROR\");\r",
															"});\r",
															"\r",
															"// Params\r",
															"pm.test(\"params.err should be \\\"VALIDATOR_ERROR\\\"\", () => {\r",
															"    pm.expect(jsonResponse.params.err).to.eql(\"VALIDATOR_ERROR\");\r",
															"});\r",
															"pm.test(\"params.status should be \\\"failed\\\"\", () => {\r",
															"    pm.expect(jsonResponse.params.status).to.eql(\"failed\");\r",
															"});\r",
															"pm.test(`Error! Missing One or More Required Fields in Object. | [Either artifactUrl is missing or invalid!]\"`, () => {\r",
															"    pm.expect(jsonResponse.params.errmsg).to.eql(`Error! Missing One or More Required Fields in Object. | [Either artifactUrl is missing or invalid!]`);\r",
															"});\r",
															"\r",
															"// Result\r",
															"pm.test(\"messages should be null\", () => {\r",
															"    pm.expect(jsonResponse.result.messages).to.eql(null);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "ea laborum"
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "ea laborum"
													},
													{
														"key": "Authorization",
														"value": "{{auth_token}}"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}"
												},
												"url": {
													"raw": "{{host}}/content/v4/review/{{submit_content_neg}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"content",
														"v4",
														"review",
														"{{submit_content_neg}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Publish Content",
							"item": [
								{
									"name": "Pre requisite",
									"item": [
										{
											"name": "Create Content",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"\r",
															"pm.collectionVariables.set(\"publish_content\", jsonResponse.result.identifier);\r",
															"console.log(pm.collectionVariables.get(\"publish_content\"));\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}"
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}"
													},
													{
														"key": "X-Channel-Id",
														"value": "sunbird"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"video/mp4\",\n            \"primaryCategory\": \"Explanation Content\",\n            \"body\": \"{\\\"key\\\":\\\"value\\\"}\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/content/v4/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"content",
														"v4",
														"create"
													]
												},
												"description": "This API is associated with creating content on the Sunbird Platform.\n  - The endpoint for **Create Content** is `/content/v2/create`\n  - It points to knowledge-mw-service - `/v2/content/create`\n  - It is mandatory to provide values for parameters marked with *.\n  - Mandatory fields cannot be null or empty."
											},
											"response": [
												{
													"name": "SUCCESS. The **Create Content** operation was successful!",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) Represents a physical location (e.g: state) uniquely to which the user belongs.",
																"key": "x-channel-id",
																"value": "ea laborum"
															},
															{
																"description": "(Required) Represents the authorized User ID to execute the API.",
																"key": "X-Authenticated-User-Token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"content\": {\n      \"name\": \"H5P Content\",\n      \"code\": \"h5pcontent\",\n      \"mimeType\": \"application/vnd.ekstep.h5p-archive\",\n      \"primaryCategory\": \"Resource\",\n      \"createdBy\": \"874ed8a5-782e-4f6c-8f36-e0288455901e\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"create"
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.content.create\",\n  \"ver\": \"3.0\",\n  \"ts\": \"2020-12-10T20:24:45ZZ\",\n  \"params\": {\n    \"resmsgid\": \"3be02c4b-3324-41a3-afd8-60f6be0584d2\",\n    \"msgid\": null,\n    \"err\": null,\n    \"status\": \"successful\",\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"identifier\": \"do_1131697204035993601314\",\n    \"node_id\": \"do_1131697204035993601314\",\n    \"versionKey\": \"1607631885207\"\n  }\n}"
												},
												{
													"name": "'BAD REQUEST. The **Create Content** operation failed. You may have missed input for a mandatory parameter.'",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) Represents a physical location (e.g: state) uniquely to which the user belongs.",
																"key": "x-channel-id",
																"value": "ea laborum"
															},
															{
																"description": "(Required) Represents the authorized User ID to execute the API.",
																"key": "X-Authenticated-User-Token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"content\": {\n      \"name\": \"H5P Content\",\n      \"code\": \"h5pcontent\",\n      \"mimeType\": \"application/vnd.ekstep.h5p-archive\",\n      \"primaryCategory\": \"Resource\",\n      \"createdBy\": \"874ed8a5-782e-4f6c-8f36-e0288455901e\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"create"
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.content.create\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-10T08:50:29.786Z\",\n  \"params\": {\n    \"resmsgid\": \"c169a7a0-3ac4-11eb-b0a2-8d5c9f561887\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"ERR_CONTENT_CREATE_FIELDS_MISSING\",\n    \"errmsg\": \"Required fields for create content are missing\"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {}\n}"
												},
												{
													"name": "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) Represents a physical location (e.g: state) uniquely to which the user belongs.",
																"key": "x-channel-id",
																"value": "ea laborum"
															},
															{
																"description": "(Required) Represents the authorized User ID to execute the API.",
																"key": "X-Authenticated-User-Token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"content\": {\n      \"name\": \"H5P Content\",\n      \"code\": \"h5pcontent\",\n      \"mimeType\": \"application/vnd.ekstep.h5p-archive\",\n      \"primaryCategory\": \"Resource\",\n      \"createdBy\": \"874ed8a5-782e-4f6c-8f36-e0288455901e\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"create"
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.content.create\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-10T08:51:51.647Z\",\n  \"params\": {\n    \"resmsgid\": \"f234a6f0-3ac4-11eb-b0a2-8d5c9f561887\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": null,\n    \"errmsg\": null\n  },\n  \"responseCode\": \"SERVER_ERROR\",\n  \"result\": {}\n}"
												}
											]
										},
										{
											"name": "Upload URL",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Status code name has string OK\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"id should be api.content.upload.url\", function () {\r",
															"   pm.expect(jsonResponse.id).to.eql(\"api.content.upload.url\");\r",
															"});\r",
															"pm.test(\"ver should be 4.0\", function () {\r",
															"   pm.expect(jsonResponse.ver).to.eql(\"4.0\");\r",
															"});\r",
															"\r",
															"pm.test(\"Params has keys: resmsgid , msgid , err , status , errmsg \", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid', 'msgid','err','status','errmsg');\r",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.params.msgid).to.be.a('null');\r",
															"  pm.expect(jsonResponse.params.err).to.be.a('null');\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a('null');\r",
															"});\r",
															"\r",
															"pm.test(\"Status is successful\", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"successful\");\r",
															"});\r",
															"\r",
															"pm.test(\"ResponseCode is OK\", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"OK\");\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.result).to.have.all.keys('identifier', 'url_expiry', 'pre_signed_url');\r",
															"});\r",
															"pm.collectionVariables.set(\"pre_signed_URL\",jsonResponse.result.pre_signed_url );\r",
															"console.log(pm.collectionVariables.get(\"pre_signed_URL\"));\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "value",
															"value": "<API Key>",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"description": "(Required) The Registered User ID to execute the API.",
														"key": "X-Authenticated-Userid",
														"value": "ea laborum"
													},
													{
														"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
														"key": "Authorization",
														"value": "ea laborum"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"fileName\":\"test.pdf\"\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/content/v4/upload/url/{{publish_content}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"content",
														"v4",
														"upload",
														"url",
														"{{publish_content}}"
													]
												},
												"description": "This API is associated with uploading content on the Sunbird Platform .\n   - The**_/upload/url/{content Id}_** endpoint executes \"Upload Content URL\" request based on parameters provided as metadata in the request body.\n   - The endpoint for **Upload Content URL** is `/content/v2/upload/url`\n  - It points to knowledge-mw-service - `/v2/content/upload/url`\n  - {...}refers to a section of upload endpoint URL path that needs to be replaced by appropriate Id.\n   - You need to provide a valid content Id value in {Content Id} field of API URL.\n   - On Success api returns pre-signed-url link with come configured ttl against which file can be uploaded.\n   - It is mandatory to provide values for parameters marked with *.\n   - Mandatory fields cannot be null or empty."
											},
											"response": [
												{
													"name": "OK ! Successful operation.\"Content upload\" operation was successfully executed.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) The Registered User ID to execute the API.",
																"key": "X-Authenticated-Userid",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"content\": {\n      \"fileName\": \"test.pdf\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/upload/url/:Content_Id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"upload",
																"url",
																":Content_Id"
															],
															"variable": [
																{
																	"key": "Content_Id",
																	"value": "ea laborum",
																	"description": "(Required) Please append a valid Content Id To the Request URL"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.content.upload.url\",\n  \"ver\": \"3.0\",\n  \"ts\": \"2020-12-11T23:52:44ZZ\",\n  \"params\": {\n    \"resmsgid\": \"81e308fa-3e36-45ff-b295-e28e8f757dc7\",\n    \"msgid\": null,\n    \"err\": null,\n    \"status\": \"successful\",\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"identifier\": \"do_11317053041892556811094\",\n    \"url_expiry\": \"54000\",\n    \"pre_signed_url\": \"https://sunbirddev.blob.core.windows.net/sunbird-content-dev/content/assets/do_11317053041892556811094/10-page-pdf.pdf?sv=2017-04-17&se=2020-12-12T14%3A52%3A44Z&sr=b&sp=w&sig=Tlt6uWI/6lMeupkEbsTAmGajmo1qzw8HeUHrVwOm6yk%3D\"\n  }\n}"
												},
												{
													"name": "BAD REQUEST. The 'Upload Url' operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) The Registered User ID to execute the API.",
																"key": "X-Authenticated-Userid",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"content\": {\n      \"fileName\": \"test.pdf\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/upload/url/:Content_Id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"upload",
																"url",
																":Content_Id"
															],
															"variable": [
																{
																	"key": "Content_Id",
																	"value": "ea laborum",
																	"description": "(Required) Please append a valid Content Id To the Request URL"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.content.upload.url\",\n  \"ver\": \"3.0\",\n  \"ts\": \"2020-12-11T23:54:07ZZ\",\n  \"params\": {\n    \"resmsgid\": \"4edde64d-3116-4271-bcc1-a8ba0ec2d56b\",\n    \"msgid\": null,\n    \"err\": \"ERR_CONTENT_BLANK_FILE_NAME\",\n    \"status\": \"failed\",\n    \"errmsg\": \"File name is blank\"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {\n    \"messages\": null\n  }\n}"
												},
												{
													"name": "RESOURCE NOT FOUND,**Content Id sent for generating upload url** operation failed !The possible reason for failure is that you may have provided wrong content id.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) The Registered User ID to execute the API.",
																"key": "X-Authenticated-Userid",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"content\": {\n      \"fileName\": \"test.pdf\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/upload/url/:Content_Id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"upload",
																"url",
																":Content_Id"
															],
															"variable": [
																{
																	"key": "Content_Id",
																	"value": "ea laborum",
																	"description": "(Required) Please append a valid Content Id To the Request URL"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.upload.url\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-11T23:48:26.694Z\",\n  \"params\": {\n    \"resmsgid\": \"5cf72660-3c0b-11eb-b0a2-8d5c9f561887\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"NOT_FOUND\",\n    \"errmsg\": \"Error! Node(s) doesn't Exists. | [Invalid Node Id.]: do_11254577204586086415\"\n  },\n  \"responseCode\": \"RESOURCE_NOT_FOUND\",\n  \"result\": {}\n}"
												},
												{
													"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) The Registered User ID to execute the API.",
																"key": "X-Authenticated-Userid",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"content\": {\n      \"fileName\": \"test.pdf\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/upload/url/:Content_Id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"upload",
																"url",
																":Content_Id"
															],
															"variable": [
																{
																	"key": "Content_Id",
																	"value": "ea laborum",
																	"description": "(Required) Please append a valid Content Id To the Request URL"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"result\": {},\n  \"id\": \"cupidatat reprehenderit dolor\",\n  \"ver\": \"minim anim commodo\",\n  \"ts\": \"commodo\",\n  \"params\": {\n    \"resmsgid\": \"pariatur repre\",\n    \"msgid\": \"irure\",\n    \"err\": \"consequat esse ea\",\n    \"status\": \"esse\",\n    \"errmsg\": \"aliqua laboris velit\"\n  },\n  \"responseCode\": \"reprehenderit dolor elit sunt dolore\"\n}"
												}
											]
										},
										{
											"name": "Upload file to the URL",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"var fullUrl= pm.collectionVariables.get(\"pre_signed_URL\");\r",
															"\r",
															"// Find the index of '?' to get the position of the query parameters\r",
															"var indexOfQuestionMark = fullUrl.indexOf('?');\r",
															"\r",
															"// Extract the partial URL without the query parameters\r",
															"var partialUrl = indexOfQuestionMark !== -1 ? fullUrl.slice(0, indexOfQuestionMark) : fullUrl;\r",
															"pm.collectionVariables.set(\"partial_URL\", partialUrl);\r",
															"// Log the partial URL to the console (you can remove this line if not needed)\r",
															"console.log(pm.collectionVariables.get(\"partial_URL\"));\r",
															"\r",
															"// Now you can use the 'partialUrl' variable in Postman as needed\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Ms-Blob-Type",
														"value": "BlockBlob"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"type": "file",
															"src": "/C:/Users/Qualitrix/Downloads/pdf_233.pdf"
														}
													]
												},
												"url": {
													"raw": "{{pre_signed_URL}}",
													"host": [
														"{{pre_signed_URL}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update the content with URL and mime type",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Status code name has string OK\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"id should be api.content.upload\", function () {\r",
															"   pm.expect(jsonResponse.id).to.eql(\"api.content.upload\");\r",
															"});\r",
															"pm.test(\"ver should be 4.0\", function () {\r",
															"   pm.expect(jsonResponse.ver).to.eql(\"4.0\");\r",
															"});\r",
															"\r",
															"pm.test(\"Params has keys: resmsgid , msgid , err , status , errmsg \", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid', 'msgid','err','status','errmsg');\r",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.params.msgid).to.be.a('null');\r",
															"  pm.expect(jsonResponse.params.err).to.be.a('null');\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a('null');\r",
															"});\r",
															"\r",
															"pm.test(\"Status is successful\", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"successful\");\r",
															"});\r",
															"\r",
															"pm.test(\"ResponseCode is OK\", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test(\"Result has keys: identifier , artifactUrl , content_url , node_id , versionKey \", () => {\r",
															"  pm.expect(jsonResponse.result).to.have.all.keys('identifier', 'artifactUrl','content_url','node_id','versionKey');\r",
															"  pm.expect(jsonResponse.result.identifier).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.result.artifactUrl).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.result.content_url).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.result.node_id).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.result.versionKey).to.be.a(\"string\");\r",
															"});\r",
															"\r",
															"pm.test(`artifactUrl should be: ${pm.collectionVariables.get(\"partial_URL\")}`, function () {\r",
															"    pm.expect(jsonResponse.result.artifactUrl).to.be.equal(`${pm.collectionVariables.get(\"partial_URL\")}`);\r",
															"});\r",
															"\r",
															"pm.test(`content_url should be: ${pm.collectionVariables.get(\"partial_URL\")}`, function () {\r",
															"    pm.expect(jsonResponse.result.content_url).to.be.equal(`${pm.collectionVariables.get(\"partial_URL\")}`);\r",
															"});\r",
															"\r",
															"pm.test(`identifier should be: ${pm.collectionVariables.get(\"publish_content\")}`, function () {\r",
															"    pm.expect(jsonResponse.result.identifier).to.be.equal(`${pm.collectionVariables.get(\"publish_content\")}`);\r",
															"});\r",
															"\r",
															"pm.test(`node_id should be: ${pm.collectionVariables.get(\"publish_content\")}`, function () {\r",
															"    pm.expect(jsonResponse.result.node_id).to.be.equal(`${pm.collectionVariables.get(\"publish_content\")}`);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "user-id",
														"value": "mahesh"
													},
													{
														"key": "Cookie",
														"value": "connect.sid=s%3AnLNdCeYI27WUkZBIFdX1J5MKTM6ISEdJ.SFTq%2FeT2cVLh5TSEWmwZPCekWDSeNXILHPDyziKa26E"
													},
													{
														"key": "X-Channel-Id",
														"value": "0137541424673095687"
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6ImFjY2Vzc3YxX2tleTEifQ.eyJhdWQiOiJodHRwczovL2Rldi5zdW5iaXJkZWQub3JnL2F1dGgvcmVhbG1zL3N1bmJpcmQiLCJzdWIiOiJmOjVhOGEzZjJiLTM0MDktNDJlMC05MDAxLWY5MTNiYzBmZGUzMToxNTVjZTNjNS03MTNlLTQ3NDktYmMxYy05NWQwOWM2NDA5MTQiLCJyb2xlcyI6W3sicm9sZSI6IkNPTlRFTlRfQ1JFQVRPUiIsInNjb3BlIjpbeyJvcmdhbmlzYXRpb25JZCI6IjAxMzc1NDE0MjQ2NzMwOTU2ODcifV19LHsicm9sZSI6IkNPVVJTRV9NRU5UT1IiLCJzY29wZSI6W3sib3JnYW5pc2F0aW9uSWQiOiIwMTM3NTQxNDI0NjczMDk1Njg3In1dfSx7InJvbGUiOiJQVUJMSUMiLCJzY29wZSI6W119XSwiaXNzIjoiaHR0cHM6Ly9kZXYuc3VuYmlyZGVkLm9yZy9hdXRoL3JlYWxtcy9zdW5iaXJkIiwibmFtZSI6ImNvbnRlbnRDcmVhdG9yIiwidHlwIjoiQmVhcmVyIiwiZXhwIjoxNzAyMzI0NjU0LCJpYXQiOjE3MDIyODE0NTR9.MxiIhP6YJmI1XbozLNoJeQAbdQKs597f2mlNHWcJ-ZZIXvBx4BcX7T57B5xXGIT6LJ6YlS86saiG6SXHIG5ptgICphdefNysfVgkSUmqTsgzfzvjp2lzIw8Re7xi735Kd7B612y5Tkswm0ETP7NIeQ7-Tc_3h37GV04ISfx0LMD75UvgllxcDz91Bl6N3-WN4KwCeKIfJ-iZj-EJLwoBmJjGsgNCNTn5DTzF_joFcyett__WVc14Ex-BqRSq8Hr2fMVoHpNXze3QUJ7PcD4JRY2Ywg5R9VkHz3mkhY9kI1cWeHdQypeSsM8niQK1XCWJz_aTqsP35MshDnHkWhmDyg"
													},
													{
														"key": "Authorization",
														"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiIzZGNjMzY3OWIwYTE0NmU2YWYyZjlmZDA5NWU5NTlkNCJ9.0NZhX5sqUNy-GZUya90aQFkr5ZNiqfOuELYz_IvoyS8"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "fileUrl",
															"value": "{{partial_URL}}",
															"type": "text"
														},
														{
															"key": "mimeType",
															"value": "application/pdf",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{host}}/content/v4/upload/{{publish_content}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"content",
														"v4",
														"upload",
														"{{publish_content}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Submit for Review",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Status code name has string OK\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"id should be api.content.review\", function () {\r",
															"   pm.expect(jsonResponse.id).to.eql(\"api.content.review\");\r",
															"});\r",
															"pm.test(\"ver should be 4.0\", function () {\r",
															"   pm.expect(jsonResponse.ver).to.eql(\"4.0\");\r",
															"});\r",
															"\r",
															"pm.test(\"Params has keys: resmsgid , msgid , err , status , errmsg \", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid', 'msgid','err','status','errmsg');\r",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.params.msgid).to.be.a('null');\r",
															"  pm.expect(jsonResponse.params.err).to.be.a('null');\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a('null');\r",
															"});\r",
															"\r",
															"pm.test(\"Status is successful\", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"successful\");\r",
															"});\r",
															"\r",
															"pm.test(\"ResponseCode is OK\", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"OK\");\r",
															"});\r",
															"pm.test(\"Result has keys: identifier , versionKey\", () => {\r",
															"  pm.expect(jsonResponse.result).to.have.all.keys('identifier','versionKey');\r",
															"  pm.expect(jsonResponse.result.identifier).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.result.versionKey).to.be.a(\"string\");\r",
															"});\r",
															"\r",
															"pm.test(`identifier should be: ${pm.collectionVariables.get(\"publish_content\")}`, function () {\r",
															"    pm.expect(jsonResponse.result.identifier).to.be.equal(`${pm.collectionVariables.get(\"publish_content\")}`);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{auth_token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"description": "(Required) The Registered User ID to execute the API.",
														"key": "X-Authenticated-User-token",
														"value": "ea laborum"
													},
													{
														"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
														"key": "Authorization",
														"value": "ea laborum"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/content/v4/review/{{publish_content}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"content",
														"v4",
														"review",
														"{{publish_content}}"
													]
												},
												"description": ">- This API is associated with Submission of content for Review  on the Sunbird Platform .\n  - The**_/review/{content Id}_** endpoint executes \"Submit for Review\" request based on parameters provided as metadata in the request body.\n  - The endpoint for **Review Content** is `/content/v2/review`\n  - It points to knowledge-mw-service - `/v2/content/review`\n  - {...}refers to a section of review endpoint URL path that needs to be replaced by appropriate Id.\n  - You need to provide a valid content Id value in {Content Id} field of API URL.\n  - It is mandatory to provide values for parameters marked with *.\n  - Mandatory fields cannot be null or empty."
											},
											"response": [
												{
													"name": "OK ! Successful operation.Content sent for review operation was successfully executed.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) The Registered User ID to execute the API.",
																"key": "X-Authenticated-User-token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/review/:Content_Id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"review",
																":Content_Id"
															],
															"variable": [
																{
																	"key": "Content_Id",
																	"value": "ea laborum",
																	"description": "(Required) Please append a valid Content Id To the Request URL"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"ekstep.learning.content.review\",\n  \"ver\": \"3.0\",\n  \"ts\": \"2020-12-10T21:06:26ZZ\",\n  \"params\": {\n    \"resmsgid\": \"186cf9a9-8094-4cdd-926f-b77a030921d1\",\n    \"msgid\": null,\n    \"err\": null,\n    \"status\": \"successful\",\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"node_id\": \"do_1131697376667402241315\",\n    \"versionKey\": \"1607634386533\"\n  }\n}"
												},
												{
													"name": "RESOURCE NOT FOUND,**Content Send for Review** operation failed !The possible reason for failure is that you may have provided wrong content id.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) The Registered User ID to execute the API.",
																"key": "X-Authenticated-User-token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/review/:Content_Id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"review",
																":Content_Id"
															],
															"variable": [
																{
																	"key": "Content_Id",
																	"value": "ea laborum",
																	"description": "(Required) Please append a valid Content Id To the Request URL"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"ekstep.learning.content.review\",\n  \"ver\": \"3.0\",\n  \"ts\": \"2020-12-10T21:06:54ZZ\",\n  \"params\": {\n    \"resmsgid\": \"944ac944-78d9-43e2-bfd5-337ab52b6552\",\n    \"msgid\": null,\n    \"err\": \"ERR_TAXONOMY_INVALID_CONTENT\",\n    \"status\": \"failed\",\n    \"errmsg\": \"Error! While Fetching the Content for Operation | [Content Id: do_11316973766674022413151]\"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {}\n}"
												},
												{
													"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! We track these errors automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) The Registered User ID to execute the API.",
																"key": "X-Authenticated-User-token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/review/:Content_Id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"review",
																":Content_Id"
															],
															"variable": [
																{
																	"key": "Content_Id",
																	"value": "ea laborum",
																	"description": "(Required) Please append a valid Content Id To the Request URL"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"result\": {},\n  \"id\": \"cupidatat reprehenderit dolor\",\n  \"ver\": \"minim anim commodo\",\n  \"ts\": \"commodo\",\n  \"params\": {\n    \"resmsgid\": \"pariatur repre\",\n    \"msgid\": \"irure\",\n    \"err\": \"consequat esse ea\",\n    \"status\": \"esse\",\n    \"errmsg\": \"aliqua laboris velit\"\n  },\n  \"responseCode\": \"reprehenderit dolor elit sunt dolore\"\n}"
												}
											]
										},
										{
											"name": "Create content for negative scenario",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"\r",
															"pm.collectionVariables.set(\"content_wo_url\", jsonResponse.result.identifier);\r",
															"console.log(pm.collectionVariables.get(\"content_wo_url\"));\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}"
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}"
													},
													{
														"key": "X-Channel-Id",
														"value": "sunbird"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"video/mp4\",\n            \"primaryCategory\": \"Explanation Content\",\n            \"body\": \"{\\\"key\\\":\\\"value\\\"}\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/content/v4/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"content",
														"v4",
														"create"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Positive",
									"item": [
										{
											"name": "Publish Content",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"id has string - api.content.publish.public \", function () {\r",
															"    pm.expect(jsonResponse.id).to.be.equal(\"api.content.publish.public\");\r",
															"});\r",
															"\r",
															"pm.test(\"Version is 4.0 \", function () {\r",
															"    pm.expect(jsonResponse.ver).to.be.equal(\"4.0\");\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','status', 'err','errmsg');\r",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.params.msgid).to.be.a(\"null\"); \r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"null\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status is successful \", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"successful\");\r",
															"});\r",
															"\r",
															"pm.test(\"ResponseCode is OK \", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.result).to.have.all.keys('publishStatus','node_id');\r",
															"  pm.expect(jsonResponse.result.publishStatus).to.be.a('String');\r",
															"  pm.expect(jsonResponse.result.node_id).to.be.a('String');\r",
															"});\r",
															"\r",
															"pm.test(\"node should be equal to \" + pm.collectionVariables.get(\"publish_content\"), () => {\r",
															"    pm.expect(jsonResponse.result.node_id).to.eql(pm.collectionVariables.get(\"publish_content\"));\r",
															"});\r",
															"pm.test(`publishStatus should be equal to Publish Event for Content Id ${pm.collectionVariables.get(\"publish_content\")} is pushed Successfully!`, () => {\r",
															"    pm.expect(jsonResponse.result.publishStatus).to.eql(`Publish Event for Content Id '${pm.collectionVariables.get(\"publish_content\")}' is pushed Successfully!`);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "value",
															"value": "<API Key>",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json\n  - Multipart/form-data\n  - Application/x-www-form-urlencoded",
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"description": "(Required) User Registered ID , which is used for logging In",
														"key": "X-Authenticated-User-token",
														"value": "ea laborum"
													},
													{
														"description": "(Required) Authorizing user in order to grant access.",
														"key": "Authorization",
														"value": "ea laborum"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"request\": {\n    \"content\": {\n        \"Publisher\": \"sunbird.publisher.create\",\n      \"lastPublishedBy\": \"Ekstep\"\n    }\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/content/v4/publish/{{publish_content}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"content",
														"v4",
														"publish",
														"{{publish_content}}"
													]
												},
												"description": "This API is associated with publishing content on the Sunbird Platform .\n  - **_/publish/_** endpoint executes the \"Publish Content\" request based on parameters provided as metadata in the request body.\n  - The endpoint for **Publish Content** is `/content/v1/publish`\n  - It points to knowledge-mw-service - `/v2/content/publish`\n  -  {...}refers to a section of review endpoint URL path that needs to be replaced by appropriate Id.\n  - It is mandatory to provide values for parameters marked with *.\n  - Mandatory fields cannot be null or empty."
											},
											"response": [
												{
													"name": "OK ! Successful operation.**Content publish operation was successfully executed.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json\n  - Multipart/form-data\n  - Application/x-www-form-urlencoded",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) User Registered ID , which is used for logging In",
																"key": "X-Authenticated-User-token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) Authorizing user in order to grant access.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"content\": {\n      \"lastPublishedBy\": \"Ekstep\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v1/publish/:Content_Id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v1",
																"publish",
																":Content_Id"
															],
															"variable": [
																{
																	"key": "Content_Id",
																	"value": "ea laborum",
																	"description": "(Required) Content Id to be published"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.v3.publish\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-10T21:41:23.491Z\",\n  \"params\": {\n    \"resmsgid\": \"72c4ef30-3b30-11eb-b0a2-8d5c9f561887\",\n    \"msgid\": \"72979da0-3b30-11eb-b0a2-8d5c9f561887\",\n    \"status\": \"successful\",\n    \"err\": null,\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"content_id\": \"do_21316975736724684813479\",\n    \"publishStatus\": \"Publish Operation for Content Id 'do_21316975736724684813479' Started Successfully!\"\n  }\n}"
												},
												{
													"name": "RESOURCE NOT FOUND,**Content Send for Review** operation failed !The possible reason for failure is that you may have provided wrong content id.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json\n  - Multipart/form-data\n  - Application/x-www-form-urlencoded",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) User Registered ID , which is used for logging In",
																"key": "X-Authenticated-User-token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) Authorizing user in order to grant access.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"content\": {\n      \"lastPublishedBy\": \"Ekstep\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v1/publish/:Content_Id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v1",
																"publish",
																":Content_Id"
															],
															"variable": [
																{
																	"key": "Content_Id",
																	"value": "ea laborum",
																	"description": "(Required) Content Id to be published"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.v3.publish\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-10T21:51:39.870Z\",\n  \"params\": {\n    \"resmsgid\": \"e228e7e0-3b31-11eb-b0a2-8d5c9f561887\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"NOT_FOUND\",\n    \"errmsg\": \"Error! Node(s) doesn't Exists. | [Invalid Node Id.]: do_213169757367246848134791\"\n  },\n  \"responseCode\": \"RESOURCE_NOT_FOUND\",\n  \"result\": {}\n}"
												},
												{
													"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! We track these errors automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json\n  - Multipart/form-data\n  - Application/x-www-form-urlencoded",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) User Registered ID , which is used for logging In",
																"key": "X-Authenticated-User-token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) Authorizing user in order to grant access.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"content\": {\n      \"lastPublishedBy\": \"Ekstep\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v1/publish/:Content_Id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v1",
																"publish",
																":Content_Id"
															],
															"variable": [
																{
																	"key": "Content_Id",
																	"value": "ea laborum",
																	"description": "(Required) Content Id to be published"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"result\": {},\n  \"id\": \"cupidatat reprehenderit dolor\",\n  \"ver\": \"minim anim commodo\",\n  \"ts\": \"commodo\",\n  \"params\": {\n    \"resmsgid\": \"pariatur repre\",\n    \"msgid\": \"irure\",\n    \"err\": \"consequat esse ea\",\n    \"status\": \"esse\",\n    \"errmsg\": \"aliqua laboris velit\"\n  },\n  \"responseCode\": \"reprehenderit dolor elit sunt dolore\"\n}"
												}
											]
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Publish content without artifact URL",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"//Verification\r",
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400)\r",
															"});\r",
															"pm.test(\"Params has keys: resmsgid , msgid , err , status , errmsg \", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid', 'msgid','err','status','errmsg');\r",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.params.msgid).to.be.a('null');\r",
															"  pm.expect(jsonResponse.params.err).to.be.a('string');\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a('string');\r",
															"});\r",
															"//code name contains a string\r",
															"tests[\"Status code name has string \\\"Bad Request\\\"\"] = responseCode.name.has(\"Bad Request\");\r",
															"\r",
															"pm.test(\"Test data type of the response and keys\", () => {\r",
															"  pm.expect(jsonResponse.result).to.be.an(\"object\");\r",
															"  pm.expect(jsonResponse.result).to.have.all.keys('messages');\r",
															"  pm.expect(jsonResponse.result.messages).to.be.null;\r",
															"});\r",
															"\r",
															"//Validation\r",
															"// Response body\r",
															"pm.test(\"id should be api.content.publish.public\", () => {\r",
															"   pm.expect(jsonResponse.id).to.eql(\"api.content.publish.public\");\r",
															"});\r",
															"pm.test(\"ver should be 4.0\", () => {\r",
															"   pm.expect(jsonResponse.ver).to.eql(\"4.0\");\r",
															"});\r",
															"pm.test(\"responseCode should be CLIENT_ERROR\", () => {\r",
															"    pm.expect(jsonResponse.responseCode).to.eql(\"CLIENT_ERROR\");\r",
															"});\r",
															"\r",
															"// Params\r",
															"pm.test(\"params.err should be \\\"VALIDATOR_ERROR\\\"\", () => {\r",
															"    pm.expect(jsonResponse.params.err).to.eql(\"VALIDATOR_ERROR\");\r",
															"});\r",
															"pm.test(\"params.status should be \\\"failed\\\"\", () => {\r",
															"    pm.expect(jsonResponse.params.status).to.eql(\"failed\");\r",
															"});\r",
															"pm.test(`Error! Missing One or More Required Fields in Object. | [Either artifactUrl is missing or invalid!]\"`, () => {\r",
															"    pm.expect(jsonResponse.params.errmsg).to.eql(`Error! Missing One or More Required Fields in Object. | [Either artifactUrl is missing or invalid!]`);\r",
															"});\r",
															"\r",
															"// Result\r",
															"pm.test(\"messages should be null\", () => {\r",
															"    pm.expect(jsonResponse.result.messages).to.eql(null);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "ea laborum"
													},
													{
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"request\": {\n    \"content\": {\n      \"lastPublishedBy\": \"Ekstep\"\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{host}}/content/v4/publish/{{content_wo_url}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"content",
														"v4",
														"publish",
														"{{content_wo_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Publish invalid content",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"//Verification\r",
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404)\r",
															"});\r",
															"pm.test(\"Params has keys: resmsgid , msgid , err , status , errmsg \", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid', 'msgid','err','status','errmsg');\r",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.params.msgid).to.be.a('null');\r",
															"  pm.expect(jsonResponse.params.err).to.be.a('string');\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a('string');\r",
															"});\r",
															"//code name contains a string\r",
															"tests[\"Status code name has string \\\"Not Found\\\"\"] = responseCode.name.has(\"Not Found\");\r",
															"\r",
															"pm.test(\"Test data type of the response and keys\", () => {\r",
															"  pm.expect(jsonResponse.result).to.be.an(\"object\");\r",
															"  pm.expect(jsonResponse.result).to.have.all.keys('messages');\r",
															"  pm.expect(jsonResponse.result.messages).to.be.null;\r",
															"});\r",
															"\r",
															"//Validation\r",
															"// Response body\r",
															"pm.test(\"id should be api.content.publish.public\", () => {\r",
															"   pm.expect(jsonResponse.id).to.eql(\"api.content.publish.public\");\r",
															"});\r",
															"pm.test(\"ver should be 4.0\", () => {\r",
															"   pm.expect(jsonResponse.ver).to.eql(\"4.0\");\r",
															"});\r",
															"pm.test(\"responseCode should be RESOURCE_NOT_FOUND\", () => {\r",
															"    pm.expect(jsonResponse.responseCode).to.eql(\"RESOURCE_NOT_FOUND\");\r",
															"});\r",
															"\r",
															"// Params\r",
															"pm.test(\"params.err should be \\\"NOT_FOUND\\\"\", () => {\r",
															"    pm.expect(jsonResponse.params.err).to.eql(\"NOT_FOUND\");\r",
															"});\r",
															"pm.test(\"params.status should be \\\"failed\\\"\", () => {\r",
															"    pm.expect(jsonResponse.params.status).to.eql(\"failed\");\r",
															"});\r",
															"pm.test(`Error! Node(s) doesn't Exists. | [Invalid Node Id.]: dummy`, () => {\r",
															"    pm.expect(jsonResponse.params.errmsg).to.eql(`Error! Node(s) doesn't Exists. | [Invalid Node Id.]: dummy`);\r",
															"});\r",
															"\r",
															"// Result\r",
															"pm.test(\"messages should be null\", () => {\r",
															"    pm.expect(jsonResponse.result.messages).to.eql(null);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "ea laborum"
													},
													{
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"request\": {\n    \"content\": {\n      \"lastPublishedBy\": \"Ekstep\"\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{host}}/content/v4/publish/dummy",
													"host": [
														"{{host}}"
													],
													"path": [
														"content",
														"v4",
														"publish",
														"dummy"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Reject content",
							"item": [
								{
									"name": "Pre requisite Copy",
									"item": [
										{
											"name": "Create Content",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"\r",
															"pm.collectionVariables.set(\"reject_content\", jsonResponse.result.identifier);\r",
															"console.log(pm.collectionVariables.get(\"reject_content\"));\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}"
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}"
													},
													{
														"key": "X-Channel-Id",
														"value": "sunbird"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"video/mp4\",\n            \"primaryCategory\": \"Explanation Content\",\n            \"body\": \"{\\\"key\\\":\\\"value\\\"}\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/content/v4/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"content",
														"v4",
														"create"
													]
												},
												"description": "This API is associated with creating content on the Sunbird Platform.\n  - The endpoint for **Create Content** is `/content/v2/create`\n  - It points to knowledge-mw-service - `/v2/content/create`\n  - It is mandatory to provide values for parameters marked with *.\n  - Mandatory fields cannot be null or empty."
											},
											"response": [
												{
													"name": "SUCCESS. The **Create Content** operation was successful!",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) Represents a physical location (e.g: state) uniquely to which the user belongs.",
																"key": "x-channel-id",
																"value": "ea laborum"
															},
															{
																"description": "(Required) Represents the authorized User ID to execute the API.",
																"key": "X-Authenticated-User-Token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"content\": {\n      \"name\": \"H5P Content\",\n      \"code\": \"h5pcontent\",\n      \"mimeType\": \"application/vnd.ekstep.h5p-archive\",\n      \"primaryCategory\": \"Resource\",\n      \"createdBy\": \"874ed8a5-782e-4f6c-8f36-e0288455901e\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"create"
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.content.create\",\n  \"ver\": \"3.0\",\n  \"ts\": \"2020-12-10T20:24:45ZZ\",\n  \"params\": {\n    \"resmsgid\": \"3be02c4b-3324-41a3-afd8-60f6be0584d2\",\n    \"msgid\": null,\n    \"err\": null,\n    \"status\": \"successful\",\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"identifier\": \"do_1131697204035993601314\",\n    \"node_id\": \"do_1131697204035993601314\",\n    \"versionKey\": \"1607631885207\"\n  }\n}"
												},
												{
													"name": "'BAD REQUEST. The **Create Content** operation failed. You may have missed input for a mandatory parameter.'",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) Represents a physical location (e.g: state) uniquely to which the user belongs.",
																"key": "x-channel-id",
																"value": "ea laborum"
															},
															{
																"description": "(Required) Represents the authorized User ID to execute the API.",
																"key": "X-Authenticated-User-Token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"content\": {\n      \"name\": \"H5P Content\",\n      \"code\": \"h5pcontent\",\n      \"mimeType\": \"application/vnd.ekstep.h5p-archive\",\n      \"primaryCategory\": \"Resource\",\n      \"createdBy\": \"874ed8a5-782e-4f6c-8f36-e0288455901e\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"create"
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.content.create\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-10T08:50:29.786Z\",\n  \"params\": {\n    \"resmsgid\": \"c169a7a0-3ac4-11eb-b0a2-8d5c9f561887\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"ERR_CONTENT_CREATE_FIELDS_MISSING\",\n    \"errmsg\": \"Required fields for create content are missing\"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {}\n}"
												},
												{
													"name": "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) Represents a physical location (e.g: state) uniquely to which the user belongs.",
																"key": "x-channel-id",
																"value": "ea laborum"
															},
															{
																"description": "(Required) Represents the authorized User ID to execute the API.",
																"key": "X-Authenticated-User-Token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"content\": {\n      \"name\": \"H5P Content\",\n      \"code\": \"h5pcontent\",\n      \"mimeType\": \"application/vnd.ekstep.h5p-archive\",\n      \"primaryCategory\": \"Resource\",\n      \"createdBy\": \"874ed8a5-782e-4f6c-8f36-e0288455901e\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"create"
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.content.create\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-10T08:51:51.647Z\",\n  \"params\": {\n    \"resmsgid\": \"f234a6f0-3ac4-11eb-b0a2-8d5c9f561887\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": null,\n    \"errmsg\": null\n  },\n  \"responseCode\": \"SERVER_ERROR\",\n  \"result\": {}\n}"
												}
											]
										},
										{
											"name": "Upload URL",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Status code name has string OK\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"id should be api.content.upload.url\", function () {\r",
															"   pm.expect(jsonResponse.id).to.eql(\"api.content.upload.url\");\r",
															"});\r",
															"pm.test(\"ver should be 4.0\", function () {\r",
															"   pm.expect(jsonResponse.ver).to.eql(\"4.0\");\r",
															"});\r",
															"\r",
															"pm.test(\"Params has keys: resmsgid , msgid , err , status , errmsg \", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid', 'msgid','err','status','errmsg');\r",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.params.msgid).to.be.a('null');\r",
															"  pm.expect(jsonResponse.params.err).to.be.a('null');\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a('null');\r",
															"});\r",
															"\r",
															"pm.test(\"Status is successful\", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"successful\");\r",
															"});\r",
															"\r",
															"pm.test(\"ResponseCode is OK\", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"OK\");\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.result).to.have.all.keys('identifier', 'url_expiry', 'pre_signed_url');\r",
															"});\r",
															"pm.collectionVariables.set(\"pre_signed_URL\",jsonResponse.result.pre_signed_url );\r",
															"console.log(pm.collectionVariables.get(\"pre_signed_URL\"));\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "value",
															"value": "<API Key>",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"description": "(Required) The Registered User ID to execute the API.",
														"key": "X-Authenticated-Userid",
														"value": "ea laborum"
													},
													{
														"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
														"key": "Authorization",
														"value": "ea laborum"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"fileName\":\"test.pdf\"\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/content/v4/upload/url/{{reject_content}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"content",
														"v4",
														"upload",
														"url",
														"{{reject_content}}"
													]
												},
												"description": "This API is associated with uploading content on the Sunbird Platform .\n   - The**_/upload/url/{content Id}_** endpoint executes \"Upload Content URL\" request based on parameters provided as metadata in the request body.\n   - The endpoint for **Upload Content URL** is `/content/v2/upload/url`\n  - It points to knowledge-mw-service - `/v2/content/upload/url`\n  - {...}refers to a section of upload endpoint URL path that needs to be replaced by appropriate Id.\n   - You need to provide a valid content Id value in {Content Id} field of API URL.\n   - On Success api returns pre-signed-url link with come configured ttl against which file can be uploaded.\n   - It is mandatory to provide values for parameters marked with *.\n   - Mandatory fields cannot be null or empty."
											},
											"response": [
												{
													"name": "OK ! Successful operation.\"Content upload\" operation was successfully executed.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) The Registered User ID to execute the API.",
																"key": "X-Authenticated-Userid",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"content\": {\n      \"fileName\": \"test.pdf\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/upload/url/:Content_Id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"upload",
																"url",
																":Content_Id"
															],
															"variable": [
																{
																	"key": "Content_Id",
																	"value": "ea laborum",
																	"description": "(Required) Please append a valid Content Id To the Request URL"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.content.upload.url\",\n  \"ver\": \"3.0\",\n  \"ts\": \"2020-12-11T23:52:44ZZ\",\n  \"params\": {\n    \"resmsgid\": \"81e308fa-3e36-45ff-b295-e28e8f757dc7\",\n    \"msgid\": null,\n    \"err\": null,\n    \"status\": \"successful\",\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"identifier\": \"do_11317053041892556811094\",\n    \"url_expiry\": \"54000\",\n    \"pre_signed_url\": \"https://sunbirddev.blob.core.windows.net/sunbird-content-dev/content/assets/do_11317053041892556811094/10-page-pdf.pdf?sv=2017-04-17&se=2020-12-12T14%3A52%3A44Z&sr=b&sp=w&sig=Tlt6uWI/6lMeupkEbsTAmGajmo1qzw8HeUHrVwOm6yk%3D\"\n  }\n}"
												},
												{
													"name": "BAD REQUEST. The 'Upload Url' operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) The Registered User ID to execute the API.",
																"key": "X-Authenticated-Userid",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"content\": {\n      \"fileName\": \"test.pdf\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/upload/url/:Content_Id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"upload",
																"url",
																":Content_Id"
															],
															"variable": [
																{
																	"key": "Content_Id",
																	"value": "ea laborum",
																	"description": "(Required) Please append a valid Content Id To the Request URL"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.content.upload.url\",\n  \"ver\": \"3.0\",\n  \"ts\": \"2020-12-11T23:54:07ZZ\",\n  \"params\": {\n    \"resmsgid\": \"4edde64d-3116-4271-bcc1-a8ba0ec2d56b\",\n    \"msgid\": null,\n    \"err\": \"ERR_CONTENT_BLANK_FILE_NAME\",\n    \"status\": \"failed\",\n    \"errmsg\": \"File name is blank\"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {\n    \"messages\": null\n  }\n}"
												},
												{
													"name": "RESOURCE NOT FOUND,**Content Id sent for generating upload url** operation failed !The possible reason for failure is that you may have provided wrong content id.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) The Registered User ID to execute the API.",
																"key": "X-Authenticated-Userid",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"content\": {\n      \"fileName\": \"test.pdf\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/upload/url/:Content_Id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"upload",
																"url",
																":Content_Id"
															],
															"variable": [
																{
																	"key": "Content_Id",
																	"value": "ea laborum",
																	"description": "(Required) Please append a valid Content Id To the Request URL"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.upload.url\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-11T23:48:26.694Z\",\n  \"params\": {\n    \"resmsgid\": \"5cf72660-3c0b-11eb-b0a2-8d5c9f561887\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"NOT_FOUND\",\n    \"errmsg\": \"Error! Node(s) doesn't Exists. | [Invalid Node Id.]: do_11254577204586086415\"\n  },\n  \"responseCode\": \"RESOURCE_NOT_FOUND\",\n  \"result\": {}\n}"
												},
												{
													"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) The Registered User ID to execute the API.",
																"key": "X-Authenticated-Userid",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"content\": {\n      \"fileName\": \"test.pdf\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/upload/url/:Content_Id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"upload",
																"url",
																":Content_Id"
															],
															"variable": [
																{
																	"key": "Content_Id",
																	"value": "ea laborum",
																	"description": "(Required) Please append a valid Content Id To the Request URL"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"result\": {},\n  \"id\": \"cupidatat reprehenderit dolor\",\n  \"ver\": \"minim anim commodo\",\n  \"ts\": \"commodo\",\n  \"params\": {\n    \"resmsgid\": \"pariatur repre\",\n    \"msgid\": \"irure\",\n    \"err\": \"consequat esse ea\",\n    \"status\": \"esse\",\n    \"errmsg\": \"aliqua laboris velit\"\n  },\n  \"responseCode\": \"reprehenderit dolor elit sunt dolore\"\n}"
												}
											]
										},
										{
											"name": "Upload file to the URL",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"var fullUrl= pm.collectionVariables.get(\"pre_signed_URL\");\r",
															"\r",
															"// Find the index of '?' to get the position of the query parameters\r",
															"var indexOfQuestionMark = fullUrl.indexOf('?');\r",
															"\r",
															"// Extract the partial URL without the query parameters\r",
															"var partialUrl = indexOfQuestionMark !== -1 ? fullUrl.slice(0, indexOfQuestionMark) : fullUrl;\r",
															"pm.collectionVariables.set(\"partial_URL\", partialUrl);\r",
															"// Log the partial URL to the console (you can remove this line if not needed)\r",
															"console.log(pm.collectionVariables.get(\"partial_URL\"));\r",
															"\r",
															"// Now you can use the 'partialUrl' variable in Postman as needed\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Ms-Blob-Type",
														"value": "BlockBlob"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"type": "file",
															"src": "/C:/Users/Qualitrix/Downloads/pdf_233.pdf"
														}
													]
												},
												"url": {
													"raw": "{{pre_signed_URL}}",
													"host": [
														"{{pre_signed_URL}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update the content with URL and mime type",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Status code name has string OK\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"id should be api.content.upload\", function () {\r",
															"   pm.expect(jsonResponse.id).to.eql(\"api.content.upload\");\r",
															"});\r",
															"pm.test(\"ver should be 4.0\", function () {\r",
															"   pm.expect(jsonResponse.ver).to.eql(\"4.0\");\r",
															"});\r",
															"\r",
															"pm.test(\"Params has keys: resmsgid , msgid , err , status , errmsg \", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid', 'msgid','err','status','errmsg');\r",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.params.msgid).to.be.a('null');\r",
															"  pm.expect(jsonResponse.params.err).to.be.a('null');\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a('null');\r",
															"});\r",
															"\r",
															"pm.test(\"Status is successful\", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"successful\");\r",
															"});\r",
															"\r",
															"pm.test(\"ResponseCode is OK\", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test(\"Result has keys: identifier , artifactUrl , content_url , node_id , versionKey \", () => {\r",
															"  pm.expect(jsonResponse.result).to.have.all.keys('identifier', 'artifactUrl','content_url','node_id','versionKey');\r",
															"  pm.expect(jsonResponse.result.identifier).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.result.artifactUrl).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.result.content_url).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.result.node_id).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.result.versionKey).to.be.a(\"string\");\r",
															"});\r",
															"\r",
															"pm.test(`artifactUrl should be: ${pm.collectionVariables.get(\"partial_URL\")}`, function () {\r",
															"    pm.expect(jsonResponse.result.artifactUrl).to.be.equal(`${pm.collectionVariables.get(\"partial_URL\")}`);\r",
															"});\r",
															"\r",
															"pm.test(`content_url should be: ${pm.collectionVariables.get(\"partial_URL\")}`, function () {\r",
															"    pm.expect(jsonResponse.result.content_url).to.be.equal(`${pm.collectionVariables.get(\"partial_URL\")}`);\r",
															"});\r",
															"\r",
															"pm.test(`identifier should be: ${pm.collectionVariables.get(\"reject_content\")}`, function () {\r",
															"    pm.expect(jsonResponse.result.identifier).to.be.equal(`${pm.collectionVariables.get(\"reject_content\")}`);\r",
															"});\r",
															"\r",
															"pm.test(`node_id should be: ${pm.collectionVariables.get(\"reject_content\")}`, function () {\r",
															"    pm.expect(jsonResponse.result.node_id).to.be.equal(`${pm.collectionVariables.get(\"reject_content\")}`);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "user-id",
														"value": "mahesh"
													},
													{
														"key": "Cookie",
														"value": "connect.sid=s%3AnLNdCeYI27WUkZBIFdX1J5MKTM6ISEdJ.SFTq%2FeT2cVLh5TSEWmwZPCekWDSeNXILHPDyziKa26E"
													},
													{
														"key": "X-Channel-Id",
														"value": "0137541424673095687"
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6ImFjY2Vzc3YxX2tleTEifQ.eyJhdWQiOiJodHRwczovL2Rldi5zdW5iaXJkZWQub3JnL2F1dGgvcmVhbG1zL3N1bmJpcmQiLCJzdWIiOiJmOjVhOGEzZjJiLTM0MDktNDJlMC05MDAxLWY5MTNiYzBmZGUzMToxNTVjZTNjNS03MTNlLTQ3NDktYmMxYy05NWQwOWM2NDA5MTQiLCJyb2xlcyI6W3sicm9sZSI6IkNPTlRFTlRfQ1JFQVRPUiIsInNjb3BlIjpbeyJvcmdhbmlzYXRpb25JZCI6IjAxMzc1NDE0MjQ2NzMwOTU2ODcifV19LHsicm9sZSI6IkNPVVJTRV9NRU5UT1IiLCJzY29wZSI6W3sib3JnYW5pc2F0aW9uSWQiOiIwMTM3NTQxNDI0NjczMDk1Njg3In1dfSx7InJvbGUiOiJQVUJMSUMiLCJzY29wZSI6W119XSwiaXNzIjoiaHR0cHM6Ly9kZXYuc3VuYmlyZGVkLm9yZy9hdXRoL3JlYWxtcy9zdW5iaXJkIiwibmFtZSI6ImNvbnRlbnRDcmVhdG9yIiwidHlwIjoiQmVhcmVyIiwiZXhwIjoxNzAyMzI0NjU0LCJpYXQiOjE3MDIyODE0NTR9.MxiIhP6YJmI1XbozLNoJeQAbdQKs597f2mlNHWcJ-ZZIXvBx4BcX7T57B5xXGIT6LJ6YlS86saiG6SXHIG5ptgICphdefNysfVgkSUmqTsgzfzvjp2lzIw8Re7xi735Kd7B612y5Tkswm0ETP7NIeQ7-Tc_3h37GV04ISfx0LMD75UvgllxcDz91Bl6N3-WN4KwCeKIfJ-iZj-EJLwoBmJjGsgNCNTn5DTzF_joFcyett__WVc14Ex-BqRSq8Hr2fMVoHpNXze3QUJ7PcD4JRY2Ywg5R9VkHz3mkhY9kI1cWeHdQypeSsM8niQK1XCWJz_aTqsP35MshDnHkWhmDyg"
													},
													{
														"key": "Authorization",
														"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiIzZGNjMzY3OWIwYTE0NmU2YWYyZjlmZDA5NWU5NTlkNCJ9.0NZhX5sqUNy-GZUya90aQFkr5ZNiqfOuELYz_IvoyS8"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "fileUrl",
															"value": "{{partial_URL}}",
															"type": "text"
														},
														{
															"key": "mimeType",
															"value": "application/pdf",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{host}}/content/v4/upload/{{reject_content}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"content",
														"v4",
														"upload",
														"{{reject_content}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Submit for Review Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Status code name has string OK\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"id should be api.content.review\", function () {\r",
															"   pm.expect(jsonResponse.id).to.eql(\"api.content.review\");\r",
															"});\r",
															"pm.test(\"ver should be 4.0\", function () {\r",
															"   pm.expect(jsonResponse.ver).to.eql(\"4.0\");\r",
															"});\r",
															"\r",
															"pm.test(\"Params has keys: resmsgid , msgid , err , status , errmsg \", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid', 'msgid','err','status','errmsg');\r",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.params.msgid).to.be.a('null');\r",
															"  pm.expect(jsonResponse.params.err).to.be.a('null');\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a('null');\r",
															"});\r",
															"\r",
															"pm.test(\"Status is successful\", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"successful\");\r",
															"});\r",
															"\r",
															"pm.test(\"ResponseCode is OK\", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"OK\");\r",
															"});\r",
															"pm.test(\"Result has keys: identifier , versionKey\", () => {\r",
															"  pm.expect(jsonResponse.result).to.have.all.keys('identifier','versionKey');\r",
															"  pm.expect(jsonResponse.result.identifier).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.result.versionKey).to.be.a(\"string\");\r",
															"});\r",
															"\r",
															"pm.test(`identifier should be: ${pm.collectionVariables.get(\"reject_content\")}`, function () {\r",
															"    pm.expect(jsonResponse.result.identifier).to.be.equal(`${pm.collectionVariables.get(\"reject_content\")}`);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{auth_token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"description": "(Required) The Registered User ID to execute the API.",
														"key": "X-Authenticated-User-token",
														"value": "ea laborum"
													},
													{
														"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
														"key": "Authorization",
														"value": "ea laborum"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/content/v4/review/{{reject_content}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"content",
														"v4",
														"review",
														"{{reject_content}}"
													]
												},
												"description": ">- This API is associated with Submission of content for Review  on the Sunbird Platform .\n  - The**_/review/{content Id}_** endpoint executes \"Submit for Review\" request based on parameters provided as metadata in the request body.\n  - The endpoint for **Review Content** is `/content/v2/review`\n  - It points to knowledge-mw-service - `/v2/content/review`\n  - {...}refers to a section of review endpoint URL path that needs to be replaced by appropriate Id.\n  - You need to provide a valid content Id value in {Content Id} field of API URL.\n  - It is mandatory to provide values for parameters marked with *.\n  - Mandatory fields cannot be null or empty."
											},
											"response": [
												{
													"name": "OK ! Successful operation.Content sent for review operation was successfully executed.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) The Registered User ID to execute the API.",
																"key": "X-Authenticated-User-token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/review/:Content_Id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"review",
																":Content_Id"
															],
															"variable": [
																{
																	"key": "Content_Id",
																	"value": "ea laborum",
																	"description": "(Required) Please append a valid Content Id To the Request URL"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"ekstep.learning.content.review\",\n  \"ver\": \"3.0\",\n  \"ts\": \"2020-12-10T21:06:26ZZ\",\n  \"params\": {\n    \"resmsgid\": \"186cf9a9-8094-4cdd-926f-b77a030921d1\",\n    \"msgid\": null,\n    \"err\": null,\n    \"status\": \"successful\",\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"node_id\": \"do_1131697376667402241315\",\n    \"versionKey\": \"1607634386533\"\n  }\n}"
												},
												{
													"name": "RESOURCE NOT FOUND,**Content Send for Review** operation failed !The possible reason for failure is that you may have provided wrong content id.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) The Registered User ID to execute the API.",
																"key": "X-Authenticated-User-token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/review/:Content_Id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"review",
																":Content_Id"
															],
															"variable": [
																{
																	"key": "Content_Id",
																	"value": "ea laborum",
																	"description": "(Required) Please append a valid Content Id To the Request URL"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"ekstep.learning.content.review\",\n  \"ver\": \"3.0\",\n  \"ts\": \"2020-12-10T21:06:54ZZ\",\n  \"params\": {\n    \"resmsgid\": \"944ac944-78d9-43e2-bfd5-337ab52b6552\",\n    \"msgid\": null,\n    \"err\": \"ERR_TAXONOMY_INVALID_CONTENT\",\n    \"status\": \"failed\",\n    \"errmsg\": \"Error! While Fetching the Content for Operation | [Content Id: do_11316973766674022413151]\"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {}\n}"
												},
												{
													"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! We track these errors automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) The Registered User ID to execute the API.",
																"key": "X-Authenticated-User-token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/review/:Content_Id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"review",
																":Content_Id"
															],
															"variable": [
																{
																	"key": "Content_Id",
																	"value": "ea laborum",
																	"description": "(Required) Please append a valid Content Id To the Request URL"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"result\": {},\n  \"id\": \"cupidatat reprehenderit dolor\",\n  \"ver\": \"minim anim commodo\",\n  \"ts\": \"commodo\",\n  \"params\": {\n    \"resmsgid\": \"pariatur repre\",\n    \"msgid\": \"irure\",\n    \"err\": \"consequat esse ea\",\n    \"status\": \"esse\",\n    \"errmsg\": \"aliqua laboris velit\"\n  },\n  \"responseCode\": \"reprehenderit dolor elit sunt dolore\"\n}"
												}
											]
										}
									]
								},
								{
									"name": "Positive",
									"item": [
										{
											"name": "Reject Valid Content during review",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Status code name has string OK\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"id should be api.content.review.reject\", function () {\r",
															"   pm.expect(jsonResponse.id).to.eql(\"api.content.review.reject\");\r",
															"});\r",
															"pm.test(\"ver should be 4.0\", function () {\r",
															"   pm.expect(jsonResponse.ver).to.eql(\"4.0\");\r",
															"});\r",
															"\r",
															"pm.test(\"Params has keys: resmsgid , msgid , err , status , errmsg \", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid', 'msgid','err','status','errmsg');\r",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.params.msgid).to.be.a('null');\r",
															"  pm.expect(jsonResponse.params.err).to.be.a('null');\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a('null');\r",
															"});\r",
															"\r",
															"pm.test(\"Status is successful\", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"successful\");\r",
															"});\r",
															"\r",
															"pm.test(\"ResponseCode is OK\", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"OK\");\r",
															"});\r",
															"pm.test(\"Result has keys: identifier , node_id \", () => {\r",
															"  pm.expect(jsonResponse.result).to.have.all.keys('identifier', 'node_id');\r",
															"  pm.expect(jsonResponse.result.identifier).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.result.node_id).to.be.a(\"string\");\r",
															"});\r",
															"\r",
															"pm.test(`identifier should be: ${pm.collectionVariables.get(\"reject_content\")}`, function () {\r",
															"    pm.expect(jsonResponse.result.identifier).to.be.equal(`${pm.collectionVariables.get(\"reject_content\")}`);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "value",
															"value": "<API Key>",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"description": "(Required) The Registered User ID to execute the API.",
														"key": "X-Authenticated-User-Token",
														"value": "ea laborum"
													},
													{
														"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
														"key": "Authorization",
														"value": "ea laborum"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/content/v4/reject/{{reject_content}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"content",
														"v4",
														"reject",
														"{{reject_content}}"
													]
												},
												"description": "This API is associated with rejecting content under review.\n  - The **_/reject/{contentId}_** endpoint executes request for rejecting content which is under review.\n  - The endpoint for **Reject Content** is `/content/v2/reject`\n  - It points to knowledge-mw-service - `/v2/content/reject`\n  - {...}refers to a section of reject endpoint URL path that needs to be replaced by appropriate Id.\n  - You need to provide a valid content Id value in {Content Id} field of API URL.\n  - It is mandatory to provide values for parameters marked with *.\n  - Mandatory fields cannot be null or empty."
											},
											"response": [
												{
													"name": "OK ! Successful operation.\"Content reject\" operation was successfully executed.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) The Registered User ID to execute the API.",
																"key": "X-Authenticated-User-Token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/reject/:Content_Id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"reject",
																":Content_Id"
															],
															"variable": [
																{
																	"key": "Content_Id",
																	"value": "ea laborum",
																	"description": "(Required) Please append a valid Content Id To the Request URL"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.v3.reject\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-11T08:09:46.451Z\",\n  \"params\": {\n    \"resmsgid\": \"3b7c1230-3b88-11eb-b0a2-8d5c9f561887\",\n    \"msgid\": \"3b692670-3b88-11eb-b0a2-8d5c9f561887\",\n    \"status\": \"successful\",\n    \"err\": null,\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"node_id\": \"do_213168073757138944196\",\n    \"versionKey\": \"1607674186357\"\n  }\n}"
												},
												{
													"name": "ERROR CONTENT NOT IN REVIEW STATUS ! Looks like contentId provided is not in review status.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) The Registered User ID to execute the API.",
																"key": "X-Authenticated-User-Token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/reject/:Content_Id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"reject",
																":Content_Id"
															],
															"variable": [
																{
																	"key": "Content_Id",
																	"value": "ea laborum",
																	"description": "(Required) Please append a valid Content Id To the Request URL"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.v3.reject\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-11T08:03:51.807Z\",\n  \"params\": {\n    \"resmsgid\": \"6819b0f0-3b87-11eb-b0a2-8d5c9f561887\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"ERR_CONTENT_NOT_IN_REVIEW\",\n    \"errmsg\": \"Content is not in review state for identifier: do_2131680942619115521243\"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {}\n}"
												},
												{
													"name": "RESOURCE NOT FOUND ! Looks like contentId provided is not a valid content.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) The Registered User ID to execute the API.",
																"key": "X-Authenticated-User-Token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/reject/:Content_Id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"reject",
																":Content_Id"
															],
															"variable": [
																{
																	"key": "Content_Id",
																	"value": "ea laborum",
																	"description": "(Required) Please append a valid Content Id To the Request URL"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.v3.reject\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-11T08:08:30.454Z\",\n  \"params\": {\n    \"resmsgid\": \"0e2fd960-3b88-11eb-b0a2-8d5c9f561887\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"NOT_FOUND\",\n    \"errmsg\": \"Error! Node(s) doesn't Exists. | [Invalid Node Id.]: do_2123462720305561601147\"\n  },\n  \"responseCode\": \"RESOURCE_NOT_FOUND\",\n  \"result\": {}\n}"
												},
												{
													"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) The Registered User ID to execute the API.",
																"key": "X-Authenticated-User-Token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/reject/:Content_Id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"reject",
																":Content_Id"
															],
															"variable": [
																{
																	"key": "Content_Id",
																	"value": "ea laborum",
																	"description": "(Required) Please append a valid Content Id To the Request URL"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"result\": {},\n  \"id\": \"cupidatat reprehenderit dolor\",\n  \"ver\": \"minim anim commodo\",\n  \"ts\": \"commodo\",\n  \"params\": {\n    \"resmsgid\": \"pariatur repre\",\n    \"msgid\": \"irure\",\n    \"err\": \"consequat esse ea\",\n    \"status\": \"esse\",\n    \"errmsg\": \"aliqua laboris velit\"\n  },\n  \"responseCode\": \"reprehenderit dolor elit sunt dolore\"\n}"
												}
											]
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Reject invalid Content during review",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"//Verification\r",
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404)\r",
															"});\r",
															"pm.test(\"Params has keys: resmsgid , msgid , err , status , errmsg \", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid', 'msgid','err','status','errmsg');\r",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.params.msgid).to.be.a('null');\r",
															"  pm.expect(jsonResponse.params.err).to.be.a('string');\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a('string');\r",
															"});\r",
															"//code name contains a string\r",
															"tests[\"Status code name has string \\\"Not Found\\\"\"] = responseCode.name.has(\"Not Found\");\r",
															"\r",
															"pm.test(\"Test data type of the response and keys\", () => {\r",
															"  pm.expect(jsonResponse.result).to.be.an(\"object\");\r",
															"  pm.expect(jsonResponse.result).to.have.all.keys('messages');\r",
															"  pm.expect(jsonResponse.result.messages).to.be.null;\r",
															"});\r",
															"\r",
															"//Validation\r",
															"// Response body\r",
															"pm.test(\"id should be api.content.review.reject\", () => {\r",
															"   pm.expect(jsonResponse.id).to.eql(\"api.content.review.reject\");\r",
															"});\r",
															"pm.test(\"ver should be 4.0\", () => {\r",
															"   pm.expect(jsonResponse.ver).to.eql(\"4.0\");\r",
															"});\r",
															"pm.test(\"responseCode should be RESOURCE_NOT_FOUND\", () => {\r",
															"    pm.expect(jsonResponse.responseCode).to.eql(\"RESOURCE_NOT_FOUND\");\r",
															"});\r",
															"\r",
															"// Params\r",
															"pm.test(\"params.err should be \\\"NOT_FOUND\\\"\", () => {\r",
															"    pm.expect(jsonResponse.params.err).to.eql(\"NOT_FOUND\");\r",
															"});\r",
															"pm.test(\"params.status should be \\\"failed\\\"\", () => {\r",
															"    pm.expect(jsonResponse.params.status).to.eql(\"failed\");\r",
															"});\r",
															"pm.test(`Error! Node(s) doesn't Exists. | [Invalid Node Id.]: dummy`, () => {\r",
															"    pm.expect(jsonResponse.params.errmsg).to.eql(`Error! Node(s) doesn't Exists. | [Invalid Node Id.]: dummy`);\r",
															"});\r",
															"// Result\r",
															"pm.test(\"messages should be null\", () => {\r",
															"    pm.expect(jsonResponse.result.messages).to.eql(null);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "value",
															"value": "<API Key>",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"description": "(Required) The Registered User ID to execute the API.",
														"key": "X-Authenticated-User-Token",
														"value": "ea laborum"
													},
													{
														"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
														"key": "Authorization",
														"value": "ea laborum"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/content/v4/reject/dummy",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"content",
														"v4",
														"reject",
														"dummy"
													]
												},
												"description": "This API is associated with rejecting content under review.\n  - The **_/reject/{contentId}_** endpoint executes request for rejecting content which is under review.\n  - The endpoint for **Reject Content** is `/content/v2/reject`\n  - It points to knowledge-mw-service - `/v2/content/reject`\n  - {...}refers to a section of reject endpoint URL path that needs to be replaced by appropriate Id.\n  - You need to provide a valid content Id value in {Content Id} field of API URL.\n  - It is mandatory to provide values for parameters marked with *.\n  - Mandatory fields cannot be null or empty."
											},
											"response": [
												{
													"name": "OK ! Successful operation.\"Content reject\" operation was successfully executed.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) The Registered User ID to execute the API.",
																"key": "X-Authenticated-User-Token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/reject/:Content_Id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"reject",
																":Content_Id"
															],
															"variable": [
																{
																	"key": "Content_Id",
																	"value": "ea laborum",
																	"description": "(Required) Please append a valid Content Id To the Request URL"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.v3.reject\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-11T08:09:46.451Z\",\n  \"params\": {\n    \"resmsgid\": \"3b7c1230-3b88-11eb-b0a2-8d5c9f561887\",\n    \"msgid\": \"3b692670-3b88-11eb-b0a2-8d5c9f561887\",\n    \"status\": \"successful\",\n    \"err\": null,\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"node_id\": \"do_213168073757138944196\",\n    \"versionKey\": \"1607674186357\"\n  }\n}"
												},
												{
													"name": "ERROR CONTENT NOT IN REVIEW STATUS ! Looks like contentId provided is not in review status.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) The Registered User ID to execute the API.",
																"key": "X-Authenticated-User-Token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/reject/:Content_Id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"reject",
																":Content_Id"
															],
															"variable": [
																{
																	"key": "Content_Id",
																	"value": "ea laborum",
																	"description": "(Required) Please append a valid Content Id To the Request URL"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.v3.reject\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-11T08:03:51.807Z\",\n  \"params\": {\n    \"resmsgid\": \"6819b0f0-3b87-11eb-b0a2-8d5c9f561887\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"ERR_CONTENT_NOT_IN_REVIEW\",\n    \"errmsg\": \"Content is not in review state for identifier: do_2131680942619115521243\"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {}\n}"
												},
												{
													"name": "RESOURCE NOT FOUND ! Looks like contentId provided is not a valid content.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) The Registered User ID to execute the API.",
																"key": "X-Authenticated-User-Token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/reject/:Content_Id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"reject",
																":Content_Id"
															],
															"variable": [
																{
																	"key": "Content_Id",
																	"value": "ea laborum",
																	"description": "(Required) Please append a valid Content Id To the Request URL"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.v3.reject\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-11T08:08:30.454Z\",\n  \"params\": {\n    \"resmsgid\": \"0e2fd960-3b88-11eb-b0a2-8d5c9f561887\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"NOT_FOUND\",\n    \"errmsg\": \"Error! Node(s) doesn't Exists. | [Invalid Node Id.]: do_2123462720305561601147\"\n  },\n  \"responseCode\": \"RESOURCE_NOT_FOUND\",\n  \"result\": {}\n}"
												},
												{
													"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) The Registered User ID to execute the API.",
																"key": "X-Authenticated-User-Token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/reject/:Content_Id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"reject",
																":Content_Id"
															],
															"variable": [
																{
																	"key": "Content_Id",
																	"value": "ea laborum",
																	"description": "(Required) Please append a valid Content Id To the Request URL"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"result\": {},\n  \"id\": \"cupidatat reprehenderit dolor\",\n  \"ver\": \"minim anim commodo\",\n  \"ts\": \"commodo\",\n  \"params\": {\n    \"resmsgid\": \"pariatur repre\",\n    \"msgid\": \"irure\",\n    \"err\": \"consequat esse ea\",\n    \"status\": \"esse\",\n    \"errmsg\": \"aliqua laboris velit\"\n  },\n  \"responseCode\": \"reprehenderit dolor elit sunt dolore\"\n}"
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "Retire Content",
							"item": [
								{
									"name": "Pre requisite",
									"item": [
										{
											"name": "Create Content",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"\r",
															"pm.collectionVariables.set(\"retire_content\", jsonResponse.result.identifier);\r",
															"console.log(pm.collectionVariables.get(\"retire_content\"));\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}"
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}"
													},
													{
														"key": "X-Channel-Id",
														"value": "sunbird"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"video/mp4\",\n            \"primaryCategory\": \"Explanation Content\",\n            \"body\": \"{\\\"key\\\":\\\"value\\\"}\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/content/v4/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"content",
														"v4",
														"create"
													]
												},
												"description": "This API is associated with creating content on the Sunbird Platform.\n  - The endpoint for **Create Content** is `/content/v2/create`\n  - It points to knowledge-mw-service - `/v2/content/create`\n  - It is mandatory to provide values for parameters marked with *.\n  - Mandatory fields cannot be null or empty."
											},
											"response": [
												{
													"name": "SUCCESS. The **Create Content** operation was successful!",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) Represents a physical location (e.g: state) uniquely to which the user belongs.",
																"key": "x-channel-id",
																"value": "ea laborum"
															},
															{
																"description": "(Required) Represents the authorized User ID to execute the API.",
																"key": "X-Authenticated-User-Token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"content\": {\n      \"name\": \"H5P Content\",\n      \"code\": \"h5pcontent\",\n      \"mimeType\": \"application/vnd.ekstep.h5p-archive\",\n      \"primaryCategory\": \"Resource\",\n      \"createdBy\": \"874ed8a5-782e-4f6c-8f36-e0288455901e\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"create"
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.content.create\",\n  \"ver\": \"3.0\",\n  \"ts\": \"2020-12-10T20:24:45ZZ\",\n  \"params\": {\n    \"resmsgid\": \"3be02c4b-3324-41a3-afd8-60f6be0584d2\",\n    \"msgid\": null,\n    \"err\": null,\n    \"status\": \"successful\",\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"identifier\": \"do_1131697204035993601314\",\n    \"node_id\": \"do_1131697204035993601314\",\n    \"versionKey\": \"1607631885207\"\n  }\n}"
												},
												{
													"name": "'BAD REQUEST. The **Create Content** operation failed. You may have missed input for a mandatory parameter.'",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) Represents a physical location (e.g: state) uniquely to which the user belongs.",
																"key": "x-channel-id",
																"value": "ea laborum"
															},
															{
																"description": "(Required) Represents the authorized User ID to execute the API.",
																"key": "X-Authenticated-User-Token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"content\": {\n      \"name\": \"H5P Content\",\n      \"code\": \"h5pcontent\",\n      \"mimeType\": \"application/vnd.ekstep.h5p-archive\",\n      \"primaryCategory\": \"Resource\",\n      \"createdBy\": \"874ed8a5-782e-4f6c-8f36-e0288455901e\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"create"
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.content.create\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-10T08:50:29.786Z\",\n  \"params\": {\n    \"resmsgid\": \"c169a7a0-3ac4-11eb-b0a2-8d5c9f561887\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"ERR_CONTENT_CREATE_FIELDS_MISSING\",\n    \"errmsg\": \"Required fields for create content are missing\"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {}\n}"
												},
												{
													"name": "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) Represents a physical location (e.g: state) uniquely to which the user belongs.",
																"key": "x-channel-id",
																"value": "ea laborum"
															},
															{
																"description": "(Required) Represents the authorized User ID to execute the API.",
																"key": "X-Authenticated-User-Token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"content\": {\n      \"name\": \"H5P Content\",\n      \"code\": \"h5pcontent\",\n      \"mimeType\": \"application/vnd.ekstep.h5p-archive\",\n      \"primaryCategory\": \"Resource\",\n      \"createdBy\": \"874ed8a5-782e-4f6c-8f36-e0288455901e\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"create"
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.content.create\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-10T08:51:51.647Z\",\n  \"params\": {\n    \"resmsgid\": \"f234a6f0-3ac4-11eb-b0a2-8d5c9f561887\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": null,\n    \"errmsg\": null\n  },\n  \"responseCode\": \"SERVER_ERROR\",\n  \"result\": {}\n}"
												}
											]
										},
										{
											"name": "Upload URL",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Status code name has string OK\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"id should be api.content.upload.url\", function () {\r",
															"   pm.expect(jsonResponse.id).to.eql(\"api.content.upload.url\");\r",
															"});\r",
															"pm.test(\"ver should be 4.0\", function () {\r",
															"   pm.expect(jsonResponse.ver).to.eql(\"4.0\");\r",
															"});\r",
															"\r",
															"pm.test(\"Params has keys: resmsgid , msgid , err , status , errmsg \", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid', 'msgid','err','status','errmsg');\r",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.params.msgid).to.be.a('null');\r",
															"  pm.expect(jsonResponse.params.err).to.be.a('null');\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a('null');\r",
															"});\r",
															"\r",
															"pm.test(\"Status is successful\", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"successful\");\r",
															"});\r",
															"\r",
															"pm.test(\"ResponseCode is OK\", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"OK\");\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.result).to.have.all.keys('identifier', 'url_expiry', 'pre_signed_url');\r",
															"});\r",
															"pm.collectionVariables.set(\"pre_signed_URL\",jsonResponse.result.pre_signed_url );\r",
															"console.log(pm.collectionVariables.get(\"pre_signed_URL\"));\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "value",
															"value": "<API Key>",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"description": "(Required) The Registered User ID to execute the API.",
														"key": "X-Authenticated-Userid",
														"value": "ea laborum"
													},
													{
														"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
														"key": "Authorization",
														"value": "ea laborum"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"fileName\":\"test.pdf\"\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/content/v4/upload/url/{{retire_content}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"content",
														"v4",
														"upload",
														"url",
														"{{retire_content}}"
													]
												},
												"description": "This API is associated with uploading content on the Sunbird Platform .\n   - The**_/upload/url/{content Id}_** endpoint executes \"Upload Content URL\" request based on parameters provided as metadata in the request body.\n   - The endpoint for **Upload Content URL** is `/content/v2/upload/url`\n  - It points to knowledge-mw-service - `/v2/content/upload/url`\n  - {...}refers to a section of upload endpoint URL path that needs to be replaced by appropriate Id.\n   - You need to provide a valid content Id value in {Content Id} field of API URL.\n   - On Success api returns pre-signed-url link with come configured ttl against which file can be uploaded.\n   - It is mandatory to provide values for parameters marked with *.\n   - Mandatory fields cannot be null or empty."
											},
											"response": [
												{
													"name": "OK ! Successful operation.\"Content upload\" operation was successfully executed.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) The Registered User ID to execute the API.",
																"key": "X-Authenticated-Userid",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"content\": {\n      \"fileName\": \"test.pdf\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/upload/url/:Content_Id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"upload",
																"url",
																":Content_Id"
															],
															"variable": [
																{
																	"key": "Content_Id",
																	"value": "ea laborum",
																	"description": "(Required) Please append a valid Content Id To the Request URL"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.content.upload.url\",\n  \"ver\": \"3.0\",\n  \"ts\": \"2020-12-11T23:52:44ZZ\",\n  \"params\": {\n    \"resmsgid\": \"81e308fa-3e36-45ff-b295-e28e8f757dc7\",\n    \"msgid\": null,\n    \"err\": null,\n    \"status\": \"successful\",\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"identifier\": \"do_11317053041892556811094\",\n    \"url_expiry\": \"54000\",\n    \"pre_signed_url\": \"https://sunbirddev.blob.core.windows.net/sunbird-content-dev/content/assets/do_11317053041892556811094/10-page-pdf.pdf?sv=2017-04-17&se=2020-12-12T14%3A52%3A44Z&sr=b&sp=w&sig=Tlt6uWI/6lMeupkEbsTAmGajmo1qzw8HeUHrVwOm6yk%3D\"\n  }\n}"
												},
												{
													"name": "BAD REQUEST. The 'Upload Url' operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) The Registered User ID to execute the API.",
																"key": "X-Authenticated-Userid",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"content\": {\n      \"fileName\": \"test.pdf\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/upload/url/:Content_Id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"upload",
																"url",
																":Content_Id"
															],
															"variable": [
																{
																	"key": "Content_Id",
																	"value": "ea laborum",
																	"description": "(Required) Please append a valid Content Id To the Request URL"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.content.upload.url\",\n  \"ver\": \"3.0\",\n  \"ts\": \"2020-12-11T23:54:07ZZ\",\n  \"params\": {\n    \"resmsgid\": \"4edde64d-3116-4271-bcc1-a8ba0ec2d56b\",\n    \"msgid\": null,\n    \"err\": \"ERR_CONTENT_BLANK_FILE_NAME\",\n    \"status\": \"failed\",\n    \"errmsg\": \"File name is blank\"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {\n    \"messages\": null\n  }\n}"
												},
												{
													"name": "RESOURCE NOT FOUND,**Content Id sent for generating upload url** operation failed !The possible reason for failure is that you may have provided wrong content id.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) The Registered User ID to execute the API.",
																"key": "X-Authenticated-Userid",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"content\": {\n      \"fileName\": \"test.pdf\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/upload/url/:Content_Id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"upload",
																"url",
																":Content_Id"
															],
															"variable": [
																{
																	"key": "Content_Id",
																	"value": "ea laborum",
																	"description": "(Required) Please append a valid Content Id To the Request URL"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.upload.url\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-11T23:48:26.694Z\",\n  \"params\": {\n    \"resmsgid\": \"5cf72660-3c0b-11eb-b0a2-8d5c9f561887\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"NOT_FOUND\",\n    \"errmsg\": \"Error! Node(s) doesn't Exists. | [Invalid Node Id.]: do_11254577204586086415\"\n  },\n  \"responseCode\": \"RESOURCE_NOT_FOUND\",\n  \"result\": {}\n}"
												},
												{
													"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) The Registered User ID to execute the API.",
																"key": "X-Authenticated-Userid",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"content\": {\n      \"fileName\": \"test.pdf\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/upload/url/:Content_Id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"upload",
																"url",
																":Content_Id"
															],
															"variable": [
																{
																	"key": "Content_Id",
																	"value": "ea laborum",
																	"description": "(Required) Please append a valid Content Id To the Request URL"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"result\": {},\n  \"id\": \"cupidatat reprehenderit dolor\",\n  \"ver\": \"minim anim commodo\",\n  \"ts\": \"commodo\",\n  \"params\": {\n    \"resmsgid\": \"pariatur repre\",\n    \"msgid\": \"irure\",\n    \"err\": \"consequat esse ea\",\n    \"status\": \"esse\",\n    \"errmsg\": \"aliqua laboris velit\"\n  },\n  \"responseCode\": \"reprehenderit dolor elit sunt dolore\"\n}"
												}
											]
										},
										{
											"name": "Upload file to the URL",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"var fullUrl= pm.collectionVariables.get(\"pre_signed_URL\");\r",
															"\r",
															"// Find the index of '?' to get the position of the query parameters\r",
															"var indexOfQuestionMark = fullUrl.indexOf('?');\r",
															"\r",
															"// Extract the partial URL without the query parameters\r",
															"var partialUrl = indexOfQuestionMark !== -1 ? fullUrl.slice(0, indexOfQuestionMark) : fullUrl;\r",
															"pm.collectionVariables.set(\"partial_URL\", partialUrl);\r",
															"// Log the partial URL to the console (you can remove this line if not needed)\r",
															"console.log(pm.collectionVariables.get(\"partial_URL\"));\r",
															"\r",
															"// Now you can use the 'partialUrl' variable in Postman as needed\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Ms-Blob-Type",
														"value": "BlockBlob"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"type": "file",
															"src": "/C:/Users/Qualitrix/Downloads/pdf_233.pdf"
														}
													]
												},
												"url": {
													"raw": "{{pre_signed_URL}}",
													"host": [
														"{{pre_signed_URL}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update the content with URL and mime type",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Status code name has string OK\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"id should be api.content.upload\", function () {\r",
															"   pm.expect(jsonResponse.id).to.eql(\"api.content.upload\");\r",
															"});\r",
															"pm.test(\"ver should be 4.0\", function () {\r",
															"   pm.expect(jsonResponse.ver).to.eql(\"4.0\");\r",
															"});\r",
															"\r",
															"pm.test(\"Params has keys: resmsgid , msgid , err , status , errmsg \", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid', 'msgid','err','status','errmsg');\r",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.params.msgid).to.be.a('null');\r",
															"  pm.expect(jsonResponse.params.err).to.be.a('null');\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a('null');\r",
															"});\r",
															"\r",
															"pm.test(\"Status is successful\", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"successful\");\r",
															"});\r",
															"\r",
															"pm.test(\"ResponseCode is OK\", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test(\"Result has keys: identifier , artifactUrl , content_url , node_id , versionKey \", () => {\r",
															"  pm.expect(jsonResponse.result).to.have.all.keys('identifier', 'artifactUrl','content_url','node_id','versionKey');\r",
															"  pm.expect(jsonResponse.result.identifier).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.result.artifactUrl).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.result.content_url).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.result.node_id).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.result.versionKey).to.be.a(\"string\");\r",
															"});\r",
															"\r",
															"pm.test(`artifactUrl should be: ${pm.collectionVariables.get(\"partial_URL\")}`, function () {\r",
															"    pm.expect(jsonResponse.result.artifactUrl).to.be.equal(`${pm.collectionVariables.get(\"partial_URL\")}`);\r",
															"});\r",
															"\r",
															"pm.test(`content_url should be: ${pm.collectionVariables.get(\"partial_URL\")}`, function () {\r",
															"    pm.expect(jsonResponse.result.content_url).to.be.equal(`${pm.collectionVariables.get(\"partial_URL\")}`);\r",
															"});\r",
															"\r",
															"pm.test(`identifier should be: ${pm.collectionVariables.get(\"retire_content\")}`, function () {\r",
															"    pm.expect(jsonResponse.result.identifier).to.be.equal(`${pm.collectionVariables.get(\"retire_content\")}`);\r",
															"});\r",
															"\r",
															"pm.test(`node_id should be: ${pm.collectionVariables.get(\"retire_content\")}`, function () {\r",
															"    pm.expect(jsonResponse.result.node_id).to.be.equal(`${pm.collectionVariables.get(\"retire_content\")}`);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "user-id",
														"value": "mahesh"
													},
													{
														"key": "Cookie",
														"value": "connect.sid=s%3AnLNdCeYI27WUkZBIFdX1J5MKTM6ISEdJ.SFTq%2FeT2cVLh5TSEWmwZPCekWDSeNXILHPDyziKa26E"
													},
													{
														"key": "X-Channel-Id",
														"value": "0137541424673095687"
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6ImFjY2Vzc3YxX2tleTEifQ.eyJhdWQiOiJodHRwczovL2Rldi5zdW5iaXJkZWQub3JnL2F1dGgvcmVhbG1zL3N1bmJpcmQiLCJzdWIiOiJmOjVhOGEzZjJiLTM0MDktNDJlMC05MDAxLWY5MTNiYzBmZGUzMToxNTVjZTNjNS03MTNlLTQ3NDktYmMxYy05NWQwOWM2NDA5MTQiLCJyb2xlcyI6W3sicm9sZSI6IkNPTlRFTlRfQ1JFQVRPUiIsInNjb3BlIjpbeyJvcmdhbmlzYXRpb25JZCI6IjAxMzc1NDE0MjQ2NzMwOTU2ODcifV19LHsicm9sZSI6IkNPVVJTRV9NRU5UT1IiLCJzY29wZSI6W3sib3JnYW5pc2F0aW9uSWQiOiIwMTM3NTQxNDI0NjczMDk1Njg3In1dfSx7InJvbGUiOiJQVUJMSUMiLCJzY29wZSI6W119XSwiaXNzIjoiaHR0cHM6Ly9kZXYuc3VuYmlyZGVkLm9yZy9hdXRoL3JlYWxtcy9zdW5iaXJkIiwibmFtZSI6ImNvbnRlbnRDcmVhdG9yIiwidHlwIjoiQmVhcmVyIiwiZXhwIjoxNzAyMzI0NjU0LCJpYXQiOjE3MDIyODE0NTR9.MxiIhP6YJmI1XbozLNoJeQAbdQKs597f2mlNHWcJ-ZZIXvBx4BcX7T57B5xXGIT6LJ6YlS86saiG6SXHIG5ptgICphdefNysfVgkSUmqTsgzfzvjp2lzIw8Re7xi735Kd7B612y5Tkswm0ETP7NIeQ7-Tc_3h37GV04ISfx0LMD75UvgllxcDz91Bl6N3-WN4KwCeKIfJ-iZj-EJLwoBmJjGsgNCNTn5DTzF_joFcyett__WVc14Ex-BqRSq8Hr2fMVoHpNXze3QUJ7PcD4JRY2Ywg5R9VkHz3mkhY9kI1cWeHdQypeSsM8niQK1XCWJz_aTqsP35MshDnHkWhmDyg"
													},
													{
														"key": "Authorization",
														"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiIzZGNjMzY3OWIwYTE0NmU2YWYyZjlmZDA5NWU5NTlkNCJ9.0NZhX5sqUNy-GZUya90aQFkr5ZNiqfOuELYz_IvoyS8"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "fileUrl",
															"value": "{{partial_URL}}",
															"type": "text"
														},
														{
															"key": "mimeType",
															"value": "application/pdf",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{host}}/content/v4/upload/{{retire_content}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"content",
														"v4",
														"upload",
														"{{retire_content}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Submit for Review",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Status code name has string OK\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"id should be api.content.review\", function () {\r",
															"   pm.expect(jsonResponse.id).to.eql(\"api.content.review\");\r",
															"});\r",
															"pm.test(\"ver should be 4.0\", function () {\r",
															"   pm.expect(jsonResponse.ver).to.eql(\"4.0\");\r",
															"});\r",
															"\r",
															"pm.test(\"Params has keys: resmsgid , msgid , err , status , errmsg \", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid', 'msgid','err','status','errmsg');\r",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.params.msgid).to.be.a('null');\r",
															"  pm.expect(jsonResponse.params.err).to.be.a('null');\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a('null');\r",
															"});\r",
															"\r",
															"pm.test(\"Status is successful\", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"successful\");\r",
															"});\r",
															"\r",
															"pm.test(\"ResponseCode is OK\", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"OK\");\r",
															"});\r",
															"pm.test(\"Result has keys: identifier , versionKey\", () => {\r",
															"  pm.expect(jsonResponse.result).to.have.all.keys('identifier','versionKey');\r",
															"  pm.expect(jsonResponse.result.identifier).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.result.versionKey).to.be.a(\"string\");\r",
															"});\r",
															"\r",
															"pm.test(`identifier should be: ${pm.collectionVariables.get(\"retire_content\")}`, function () {\r",
															"    pm.expect(jsonResponse.result.identifier).to.be.equal(`${pm.collectionVariables.get(\"retire_content\")}`);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{auth_token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"description": "(Required) The Registered User ID to execute the API.",
														"key": "X-Authenticated-User-token",
														"value": "ea laborum"
													},
													{
														"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
														"key": "Authorization",
														"value": "ea laborum"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/content/v4/review/{{retire_content}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"content",
														"v4",
														"review",
														"{{retire_content}}"
													]
												},
												"description": ">- This API is associated with Submission of content for Review  on the Sunbird Platform .\n  - The**_/review/{content Id}_** endpoint executes \"Submit for Review\" request based on parameters provided as metadata in the request body.\n  - The endpoint for **Review Content** is `/content/v2/review`\n  - It points to knowledge-mw-service - `/v2/content/review`\n  - {...}refers to a section of review endpoint URL path that needs to be replaced by appropriate Id.\n  - You need to provide a valid content Id value in {Content Id} field of API URL.\n  - It is mandatory to provide values for parameters marked with *.\n  - Mandatory fields cannot be null or empty."
											},
											"response": [
												{
													"name": "OK ! Successful operation.Content sent for review operation was successfully executed.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) The Registered User ID to execute the API.",
																"key": "X-Authenticated-User-token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/review/:Content_Id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"review",
																":Content_Id"
															],
															"variable": [
																{
																	"key": "Content_Id",
																	"value": "ea laborum",
																	"description": "(Required) Please append a valid Content Id To the Request URL"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"ekstep.learning.content.review\",\n  \"ver\": \"3.0\",\n  \"ts\": \"2020-12-10T21:06:26ZZ\",\n  \"params\": {\n    \"resmsgid\": \"186cf9a9-8094-4cdd-926f-b77a030921d1\",\n    \"msgid\": null,\n    \"err\": null,\n    \"status\": \"successful\",\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"node_id\": \"do_1131697376667402241315\",\n    \"versionKey\": \"1607634386533\"\n  }\n}"
												},
												{
													"name": "RESOURCE NOT FOUND,**Content Send for Review** operation failed !The possible reason for failure is that you may have provided wrong content id.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) The Registered User ID to execute the API.",
																"key": "X-Authenticated-User-token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/review/:Content_Id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"review",
																":Content_Id"
															],
															"variable": [
																{
																	"key": "Content_Id",
																	"value": "ea laborum",
																	"description": "(Required) Please append a valid Content Id To the Request URL"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"ekstep.learning.content.review\",\n  \"ver\": \"3.0\",\n  \"ts\": \"2020-12-10T21:06:54ZZ\",\n  \"params\": {\n    \"resmsgid\": \"944ac944-78d9-43e2-bfd5-337ab52b6552\",\n    \"msgid\": null,\n    \"err\": \"ERR_TAXONOMY_INVALID_CONTENT\",\n    \"status\": \"failed\",\n    \"errmsg\": \"Error! While Fetching the Content for Operation | [Content Id: do_11316973766674022413151]\"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {}\n}"
												},
												{
													"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! We track these errors automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) The Registered User ID to execute the API.",
																"key": "X-Authenticated-User-token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/review/:Content_Id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"review",
																":Content_Id"
															],
															"variable": [
																{
																	"key": "Content_Id",
																	"value": "ea laborum",
																	"description": "(Required) Please append a valid Content Id To the Request URL"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"result\": {},\n  \"id\": \"cupidatat reprehenderit dolor\",\n  \"ver\": \"minim anim commodo\",\n  \"ts\": \"commodo\",\n  \"params\": {\n    \"resmsgid\": \"pariatur repre\",\n    \"msgid\": \"irure\",\n    \"err\": \"consequat esse ea\",\n    \"status\": \"esse\",\n    \"errmsg\": \"aliqua laboris velit\"\n  },\n  \"responseCode\": \"reprehenderit dolor elit sunt dolore\"\n}"
												}
											]
										},
										{
											"name": "Publish Content",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"id has string - api.content.publish.public \", function () {\r",
															"    pm.expect(jsonResponse.id).to.be.equal(\"api.content.publish.public\");\r",
															"});\r",
															"\r",
															"pm.test(\"Version is 4.0 \", function () {\r",
															"    pm.expect(jsonResponse.ver).to.be.equal(\"4.0\");\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','status', 'err','errmsg');\r",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.params.msgid).to.be.a(\"null\"); \r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"null\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status is successful \", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"successful\");\r",
															"});\r",
															"\r",
															"pm.test(\"ResponseCode is OK \", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.result).to.have.all.keys('publishStatus','node_id');\r",
															"  pm.expect(jsonResponse.result.publishStatus).to.be.a('String');\r",
															"  pm.expect(jsonResponse.result.node_id).to.be.a('String');\r",
															"});\r",
															"\r",
															"pm.test(\"node should be equal to \" + pm.collectionVariables.get(\"retire_content\"), () => {\r",
															"    pm.expect(jsonResponse.result.node_id).to.eql(pm.collectionVariables.get(\"retire_content\"));\r",
															"});\r",
															"pm.test(`publishStatus should be equal to Publish Event for Content Id ${pm.collectionVariables.get(\"retire_content\")} is pushed Successfully!`, () => {\r",
															"    pm.expect(jsonResponse.result.publishStatus).to.eql(`Publish Event for Content Id '${pm.collectionVariables.get(\"retire_content\")}' is pushed Successfully!`);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "value",
															"value": "<API Key>",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json\n  - Multipart/form-data\n  - Application/x-www-form-urlencoded",
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"description": "(Required) User Registered ID , which is used for logging In",
														"key": "X-Authenticated-User-token",
														"value": "ea laborum"
													},
													{
														"description": "(Required) Authorizing user in order to grant access.",
														"key": "Authorization",
														"value": "ea laborum"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"request\": {\n    \"content\": {\n        \"Publisher\": \"sunbird.publisher.create\",\n      \"lastPublishedBy\": \"Ekstep\"\n    }\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/content/v4/publish/{{retire_content}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"content",
														"v4",
														"publish",
														"{{retire_content}}"
													]
												},
												"description": "This API is associated with publishing content on the Sunbird Platform .\n  - **_/publish/_** endpoint executes the \"Publish Content\" request based on parameters provided as metadata in the request body.\n  - The endpoint for **Publish Content** is `/content/v1/publish`\n  - It points to knowledge-mw-service - `/v2/content/publish`\n  -  {...}refers to a section of review endpoint URL path that needs to be replaced by appropriate Id.\n  - It is mandatory to provide values for parameters marked with *.\n  - Mandatory fields cannot be null or empty."
											},
											"response": [
												{
													"name": "OK ! Successful operation.**Content publish operation was successfully executed.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json\n  - Multipart/form-data\n  - Application/x-www-form-urlencoded",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) User Registered ID , which is used for logging In",
																"key": "X-Authenticated-User-token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) Authorizing user in order to grant access.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"content\": {\n      \"lastPublishedBy\": \"Ekstep\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v1/publish/:Content_Id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v1",
																"publish",
																":Content_Id"
															],
															"variable": [
																{
																	"key": "Content_Id",
																	"value": "ea laborum",
																	"description": "(Required) Content Id to be published"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.v3.publish\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-10T21:41:23.491Z\",\n  \"params\": {\n    \"resmsgid\": \"72c4ef30-3b30-11eb-b0a2-8d5c9f561887\",\n    \"msgid\": \"72979da0-3b30-11eb-b0a2-8d5c9f561887\",\n    \"status\": \"successful\",\n    \"err\": null,\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"content_id\": \"do_21316975736724684813479\",\n    \"publishStatus\": \"Publish Operation for Content Id 'do_21316975736724684813479' Started Successfully!\"\n  }\n}"
												},
												{
													"name": "RESOURCE NOT FOUND,**Content Send for Review** operation failed !The possible reason for failure is that you may have provided wrong content id.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json\n  - Multipart/form-data\n  - Application/x-www-form-urlencoded",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) User Registered ID , which is used for logging In",
																"key": "X-Authenticated-User-token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) Authorizing user in order to grant access.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"content\": {\n      \"lastPublishedBy\": \"Ekstep\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v1/publish/:Content_Id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v1",
																"publish",
																":Content_Id"
															],
															"variable": [
																{
																	"key": "Content_Id",
																	"value": "ea laborum",
																	"description": "(Required) Content Id to be published"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.v3.publish\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-10T21:51:39.870Z\",\n  \"params\": {\n    \"resmsgid\": \"e228e7e0-3b31-11eb-b0a2-8d5c9f561887\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"NOT_FOUND\",\n    \"errmsg\": \"Error! Node(s) doesn't Exists. | [Invalid Node Id.]: do_213169757367246848134791\"\n  },\n  \"responseCode\": \"RESOURCE_NOT_FOUND\",\n  \"result\": {}\n}"
												},
												{
													"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! We track these errors automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json\n  - Multipart/form-data\n  - Application/x-www-form-urlencoded",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) User Registered ID , which is used for logging In",
																"key": "X-Authenticated-User-token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) Authorizing user in order to grant access.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"content\": {\n      \"lastPublishedBy\": \"Ekstep\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v1/publish/:Content_Id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v1",
																"publish",
																":Content_Id"
															],
															"variable": [
																{
																	"key": "Content_Id",
																	"value": "ea laborum",
																	"description": "(Required) Content Id to be published"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"result\": {},\n  \"id\": \"cupidatat reprehenderit dolor\",\n  \"ver\": \"minim anim commodo\",\n  \"ts\": \"commodo\",\n  \"params\": {\n    \"resmsgid\": \"pariatur repre\",\n    \"msgid\": \"irure\",\n    \"err\": \"consequat esse ea\",\n    \"status\": \"esse\",\n    \"errmsg\": \"aliqua laboris velit\"\n  },\n  \"responseCode\": \"reprehenderit dolor elit sunt dolore\"\n}"
												}
											]
										},
										{
											"name": "Create content for negative scenario",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"\r",
															"pm.collectionVariables.set(\"retire_draft\", jsonResponse.result.identifier);\r",
															"console.log(pm.collectionVariables.get(\"retire_draft\"));\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}"
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}"
													},
													{
														"key": "X-Channel-Id",
														"value": "sunbird"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"video/mp4\",\n            \"primaryCategory\": \"Explanation Content\",\n            \"body\": \"{\\\"key\\\":\\\"value\\\"}\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/content/v4/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"content",
														"v4",
														"create"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Positive",
									"item": [
										{
											"name": "Retire a Live Content",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Status code name has string OK\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"id should be api.content.retire\", function () {\r",
															"   pm.expect(jsonResponse.id).to.eql(\"api.content.retire\");\r",
															"});\r",
															"pm.test(\"ver should be 4.0\", function () {\r",
															"   pm.expect(jsonResponse.ver).to.eql(\"4.0\");\r",
															"});\r",
															"\r",
															"pm.test(\"Params has keys: resmsgid , msgid , err , status , errmsg \", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid', 'msgid','err','status','errmsg');\r",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.params.msgid).to.be.a('null');\r",
															"  pm.expect(jsonResponse.params.err).to.be.a('null');\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a('null');\r",
															"});\r",
															"\r",
															"pm.test(\"Status is successful\", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"successful\");\r",
															"});\r",
															"\r",
															"pm.test(\"ResponseCode is OK\", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"OK\");\r",
															"});\r",
															"pm.test(\"Result has keys: identifier , node_id \", () => {\r",
															"  pm.expect(jsonResponse.result).to.have.all.keys('identifier', 'node_id');\r",
															"  pm.expect(jsonResponse.result.identifier).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.result.node_id).to.be.a(\"string\");\r",
															"});\r",
															"\r",
															"pm.test(`identifier should be: ${pm.collectionVariables.get(\"retire_content\")}`, function () {\r",
															"    pm.expect(jsonResponse.result.identifier).to.be.equal(`${pm.collectionVariables.get(\"retire_content\")}`);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "value",
															"value": "<API Key>",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [
													{
														"description": "(Required) The Registered User ID to execute the API.",
														"key": "X-Authenticated-User-token",
														"value": "ea laborum"
													},
													{
														"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
														"key": "Authorization",
														"value": "ea laborum"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/content/v4/retire/{{retire_content}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"content",
														"v4",
														"retire",
														"{{retire_content}}"
													]
												},
												"description": "This API is associated with retiring content on the Sunbird Platform .\n  - The **_/retire/{contentId}_** endpoint executes  \"Retire Content\" request based on content Id to delete the specific content.'\n  - The endpoint for **Retire Content** is `/content/v2/retire`\n  - It points to knowledge-mw-service - `/v2/content/retire`\n  - {...}refers to a section of review endpoint URL path that needs to be replaced by appropriate Id.\n  - It is mandatory to provide values for parameters.\n  - Mandatory fields cannot be null or empty."
											},
											"response": [
												{
													"name": "OK ! Successful operation.**Content deletion operation was successfully executed.",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Registered User ID to execute the API.",
																"key": "X-Authenticated-User-token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/content/v2/retire/:Content_Id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"retire",
																":Content_Id"
															],
															"variable": [
																{
																	"key": "Content_Id",
																	"value": "ea laborum",
																	"description": "(Required) Please append a valid Content Id To the Request URL"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.content.retire\",\n  \"ver\": \"3.0\",\n  \"ts\": \"2020-12-11T12:05:52ZZ\",\n  \"params\": {\n    \"resmsgid\": \"ebd2655a-a69a-460c-9bcf-0f45f5938fac\",\n    \"msgid\": null,\n    \"err\": null,\n    \"status\": \"successful\",\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"identifier\": \"do_11283183576849612818\",\n    \"node_id\": \"do_11283183576849612818\"\n  }\n}"
												},
												{
													"name": "ERR CONTENT RETIRE! Content is already retired.",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Registered User ID to execute the API.",
																"key": "X-Authenticated-User-token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/content/v2/retire/:Content_Id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"retire",
																":Content_Id"
															],
															"variable": [
																{
																	"key": "Content_Id",
																	"value": "ea laborum",
																	"description": "(Required) Please append a valid Content Id To the Request URL"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.content.retire\",\n  \"ver\": \"3.0\",\n  \"ts\": \"2020-12-11T12:01:24ZZ\",\n  \"params\": {\n    \"resmsgid\": \"ec20ec05-581c-4559-988a-449f3c5ae698\",\n    \"msgid\": null,\n    \"err\": \"ERR_CONTENT_RETIRE\",\n    \"status\": \"failed\",\n    \"errmsg\": \"Content with Identifier do_11316298360130764811 is already Retired.\"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {\n    \"messages\": null\n  }\n}"
												},
												{
													"name": "RESOURCE NOT FOUND,**Content Send for Flag Accept** operation failed !The possible reason for failure is that you may have provided wrong content id.",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Registered User ID to execute the API.",
																"key": "X-Authenticated-User-token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/content/v2/retire/:Content_Id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"retire",
																":Content_Id"
															],
															"variable": [
																{
																	"key": "Content_Id",
																	"value": "ea laborum",
																	"description": "(Required) Please append a valid Content Id To the Request URL"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.content.retire\",\n  \"ver\": \"3.0\",\n  \"ts\": \"2020-12-11T11:56:35ZZ\",\n  \"params\": {\n    \"resmsgid\": \"d826e808-2866-4603-9b60-0a3130a37128\",\n    \"msgid\": null,\n    \"err\": \"NOT_FOUND\",\n    \"status\": \"failed\",\n    \"errmsg\": \"Error! Node(s) doesn't Exists. | [Invalid Node Id.]: do_213143334457982976144\"\n  },\n  \"responseCode\": \"RESOURCE_NOT_FOUND\",\n  \"result\": {\n    \"messages\": null\n  }\n}"
												},
												{
													"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Registered User ID to execute the API.",
																"key": "X-Authenticated-User-token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/content/v2/retire/:Content_Id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"retire",
																":Content_Id"
															],
															"variable": [
																{
																	"key": "Content_Id",
																	"value": "ea laborum",
																	"description": "(Required) Please append a valid Content Id To the Request URL"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"result\": {},\n  \"id\": \"cupidatat reprehenderit dolor\",\n  \"ver\": \"minim anim commodo\",\n  \"ts\": \"commodo\",\n  \"params\": {\n    \"resmsgid\": \"pariatur repre\",\n    \"msgid\": \"irure\",\n    \"err\": \"consequat esse ea\",\n    \"status\": \"esse\",\n    \"errmsg\": \"aliqua laboris velit\"\n  },\n  \"responseCode\": \"reprehenderit dolor elit sunt dolore\"\n}"
												}
											]
										},
										{
											"name": "Retire a draft Content",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Status code name has string OK\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"id should be api.content.retire\", function () {\r",
															"   pm.expect(jsonResponse.id).to.eql(\"api.content.retire\");\r",
															"});\r",
															"pm.test(\"ver should be 4.0\", function () {\r",
															"   pm.expect(jsonResponse.ver).to.eql(\"4.0\");\r",
															"});\r",
															"\r",
															"pm.test(\"Params has keys: resmsgid , msgid , err , status , errmsg \", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid', 'msgid','err','status','errmsg');\r",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.params.msgid).to.be.a('null');\r",
															"  pm.expect(jsonResponse.params.err).to.be.a('null');\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a('null');\r",
															"});\r",
															"\r",
															"pm.test(\"Status is successful\", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"successful\");\r",
															"});\r",
															"\r",
															"pm.test(\"ResponseCode is OK\", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"OK\");\r",
															"});\r",
															"pm.test(\"Result has keys: identifier , node_id \", () => {\r",
															"  pm.expect(jsonResponse.result).to.have.all.keys('identifier', 'node_id');\r",
															"  pm.expect(jsonResponse.result.identifier).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.result.node_id).to.be.a(\"string\");\r",
															"});\r",
															"\r",
															"pm.test(`identifier should be: ${pm.collectionVariables.get(\"retire_draft\")}`, function () {\r",
															"    pm.expect(jsonResponse.result.identifier).to.be.equal(`${pm.collectionVariables.get(\"retire_draft\")}`);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "value",
															"value": "<API Key>",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [
													{
														"description": "(Required) The Registered User ID to execute the API.",
														"key": "X-Authenticated-User-token",
														"value": "ea laborum"
													},
													{
														"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
														"key": "Authorization",
														"value": "ea laborum"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/content/v4/retire/{{retire_draft}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"content",
														"v4",
														"retire",
														"{{retire_draft}}"
													]
												},
												"description": "This API is associated with retiring content on the Sunbird Platform .\n  - The **_/retire/{contentId}_** endpoint executes  \"Retire Content\" request based on content Id to delete the specific content.'\n  - The endpoint for **Retire Content** is `/content/v2/retire`\n  - It points to knowledge-mw-service - `/v2/content/retire`\n  - {...}refers to a section of review endpoint URL path that needs to be replaced by appropriate Id.\n  - It is mandatory to provide values for parameters.\n  - Mandatory fields cannot be null or empty."
											},
											"response": [
												{
													"name": "OK ! Successful operation.**Content deletion operation was successfully executed.",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Registered User ID to execute the API.",
																"key": "X-Authenticated-User-token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/content/v2/retire/:Content_Id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"retire",
																":Content_Id"
															],
															"variable": [
																{
																	"key": "Content_Id",
																	"value": "ea laborum",
																	"description": "(Required) Please append a valid Content Id To the Request URL"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.content.retire\",\n  \"ver\": \"3.0\",\n  \"ts\": \"2020-12-11T12:05:52ZZ\",\n  \"params\": {\n    \"resmsgid\": \"ebd2655a-a69a-460c-9bcf-0f45f5938fac\",\n    \"msgid\": null,\n    \"err\": null,\n    \"status\": \"successful\",\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"identifier\": \"do_11283183576849612818\",\n    \"node_id\": \"do_11283183576849612818\"\n  }\n}"
												},
												{
													"name": "ERR CONTENT RETIRE! Content is already retired.",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Registered User ID to execute the API.",
																"key": "X-Authenticated-User-token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/content/v2/retire/:Content_Id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"retire",
																":Content_Id"
															],
															"variable": [
																{
																	"key": "Content_Id",
																	"value": "ea laborum",
																	"description": "(Required) Please append a valid Content Id To the Request URL"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.content.retire\",\n  \"ver\": \"3.0\",\n  \"ts\": \"2020-12-11T12:01:24ZZ\",\n  \"params\": {\n    \"resmsgid\": \"ec20ec05-581c-4559-988a-449f3c5ae698\",\n    \"msgid\": null,\n    \"err\": \"ERR_CONTENT_RETIRE\",\n    \"status\": \"failed\",\n    \"errmsg\": \"Content with Identifier do_11316298360130764811 is already Retired.\"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {\n    \"messages\": null\n  }\n}"
												},
												{
													"name": "RESOURCE NOT FOUND,**Content Send for Flag Accept** operation failed !The possible reason for failure is that you may have provided wrong content id.",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Registered User ID to execute the API.",
																"key": "X-Authenticated-User-token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/content/v2/retire/:Content_Id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"retire",
																":Content_Id"
															],
															"variable": [
																{
																	"key": "Content_Id",
																	"value": "ea laborum",
																	"description": "(Required) Please append a valid Content Id To the Request URL"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.content.retire\",\n  \"ver\": \"3.0\",\n  \"ts\": \"2020-12-11T11:56:35ZZ\",\n  \"params\": {\n    \"resmsgid\": \"d826e808-2866-4603-9b60-0a3130a37128\",\n    \"msgid\": null,\n    \"err\": \"NOT_FOUND\",\n    \"status\": \"failed\",\n    \"errmsg\": \"Error! Node(s) doesn't Exists. | [Invalid Node Id.]: do_213143334457982976144\"\n  },\n  \"responseCode\": \"RESOURCE_NOT_FOUND\",\n  \"result\": {\n    \"messages\": null\n  }\n}"
												},
												{
													"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Registered User ID to execute the API.",
																"key": "X-Authenticated-User-token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/content/v2/retire/:Content_Id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"retire",
																":Content_Id"
															],
															"variable": [
																{
																	"key": "Content_Id",
																	"value": "ea laborum",
																	"description": "(Required) Please append a valid Content Id To the Request URL"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"result\": {},\n  \"id\": \"cupidatat reprehenderit dolor\",\n  \"ver\": \"minim anim commodo\",\n  \"ts\": \"commodo\",\n  \"params\": {\n    \"resmsgid\": \"pariatur repre\",\n    \"msgid\": \"irure\",\n    \"err\": \"consequat esse ea\",\n    \"status\": \"esse\",\n    \"errmsg\": \"aliqua laboris velit\"\n  },\n  \"responseCode\": \"reprehenderit dolor elit sunt dolore\"\n}"
												}
											]
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Retire Content which is already retired",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"//Verification\r",
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400)\r",
															"});\r",
															"pm.test(\"Params has keys: resmsgid , msgid , err , status , errmsg \", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid', 'msgid','err','status','errmsg');\r",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.params.msgid).to.be.a('null');\r",
															"  pm.expect(jsonResponse.params.err).to.be.a('string');\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a('string');\r",
															"});\r",
															"//code name contains a string\r",
															"tests[\"Status code name has string \\\"Bad Request\\\"\"] = responseCode.name.has(\"Bad Request\");\r",
															"\r",
															"pm.test(\"Test data type of the response and keys\", () => {\r",
															"  pm.expect(jsonResponse.result).to.be.an(\"object\");\r",
															"  pm.expect(jsonResponse.result).to.have.all.keys('messages');\r",
															"  pm.expect(jsonResponse.result.messages).to.be.null;\r",
															"});\r",
															"\r",
															"//Validation\r",
															"// Response body\r",
															"pm.test(\"id should be api.content.retire\", function () {\r",
															"   pm.expect(jsonResponse.id).to.eql(\"api.content.retire\");\r",
															"});\r",
															"pm.test(\"ver should be 4.0\", () => {\r",
															"   pm.expect(jsonResponse.ver).to.eql(\"4.0\");\r",
															"});\r",
															"pm.test(\"responseCode should be CLIENT_ERROR\", () => {\r",
															"    pm.expect(jsonResponse.responseCode).to.eql(\"CLIENT_ERROR\");\r",
															"});\r",
															"\r",
															"// Params\r",
															"pm.test(\"params.err should be \\\"ERR_CONTENT_RETIRE\\\"\", () => {\r",
															"    pm.expect(jsonResponse.params.err).to.eql(\"ERR_CONTENT_RETIRE\");\r",
															"});\r",
															"pm.test(\"params.status should be \\\"failed\\\"\", () => {\r",
															"    pm.expect(jsonResponse.params.status).to.eql(\"failed\");\r",
															"});\r",
															"pm.test(`errmsg: Content with Identifier ${pm.collectionVariables.get(\"retire_content\")} is already Retired.`, () => {\r",
															"    pm.expect(jsonResponse.params.errmsg).to.eql(`Content with Identifier ${pm.collectionVariables.get(\"retire_content\")} is already Retired.`);\r",
															"});\r",
															"\r",
															"// Result\r",
															"pm.test(\"messages should be null\", () => {\r",
															"    pm.expect(jsonResponse.result.messages).to.eql(null);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "value",
															"value": "<API Key>",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [
													{
														"description": "(Required) The Registered User ID to execute the API.",
														"key": "X-Authenticated-User-token",
														"value": "ea laborum"
													},
													{
														"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
														"key": "Authorization",
														"value": "ea laborum"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/content/v4/retire/{{retire_content}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"content",
														"v4",
														"retire",
														"{{retire_content}}"
													]
												},
												"description": "This API is associated with retiring content on the Sunbird Platform .\n  - The **_/retire/{contentId}_** endpoint executes  \"Retire Content\" request based on content Id to delete the specific content.'\n  - The endpoint for **Retire Content** is `/content/v2/retire`\n  - It points to knowledge-mw-service - `/v2/content/retire`\n  - {...}refers to a section of review endpoint URL path that needs to be replaced by appropriate Id.\n  - It is mandatory to provide values for parameters.\n  - Mandatory fields cannot be null or empty."
											},
											"response": [
												{
													"name": "OK ! Successful operation.**Content deletion operation was successfully executed.",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Registered User ID to execute the API.",
																"key": "X-Authenticated-User-token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/content/v2/retire/:Content_Id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"retire",
																":Content_Id"
															],
															"variable": [
																{
																	"key": "Content_Id",
																	"value": "ea laborum",
																	"description": "(Required) Please append a valid Content Id To the Request URL"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.content.retire\",\n  \"ver\": \"3.0\",\n  \"ts\": \"2020-12-11T12:05:52ZZ\",\n  \"params\": {\n    \"resmsgid\": \"ebd2655a-a69a-460c-9bcf-0f45f5938fac\",\n    \"msgid\": null,\n    \"err\": null,\n    \"status\": \"successful\",\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"identifier\": \"do_11283183576849612818\",\n    \"node_id\": \"do_11283183576849612818\"\n  }\n}"
												},
												{
													"name": "ERR CONTENT RETIRE! Content is already retired.",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Registered User ID to execute the API.",
																"key": "X-Authenticated-User-token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/content/v2/retire/:Content_Id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"retire",
																":Content_Id"
															],
															"variable": [
																{
																	"key": "Content_Id",
																	"value": "ea laborum",
																	"description": "(Required) Please append a valid Content Id To the Request URL"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.content.retire\",\n  \"ver\": \"3.0\",\n  \"ts\": \"2020-12-11T12:01:24ZZ\",\n  \"params\": {\n    \"resmsgid\": \"ec20ec05-581c-4559-988a-449f3c5ae698\",\n    \"msgid\": null,\n    \"err\": \"ERR_CONTENT_RETIRE\",\n    \"status\": \"failed\",\n    \"errmsg\": \"Content with Identifier do_11316298360130764811 is already Retired.\"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {\n    \"messages\": null\n  }\n}"
												},
												{
													"name": "RESOURCE NOT FOUND,**Content Send for Flag Accept** operation failed !The possible reason for failure is that you may have provided wrong content id.",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Registered User ID to execute the API.",
																"key": "X-Authenticated-User-token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/content/v2/retire/:Content_Id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"retire",
																":Content_Id"
															],
															"variable": [
																{
																	"key": "Content_Id",
																	"value": "ea laborum",
																	"description": "(Required) Please append a valid Content Id To the Request URL"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.content.retire\",\n  \"ver\": \"3.0\",\n  \"ts\": \"2020-12-11T11:56:35ZZ\",\n  \"params\": {\n    \"resmsgid\": \"d826e808-2866-4603-9b60-0a3130a37128\",\n    \"msgid\": null,\n    \"err\": \"NOT_FOUND\",\n    \"status\": \"failed\",\n    \"errmsg\": \"Error! Node(s) doesn't Exists. | [Invalid Node Id.]: do_213143334457982976144\"\n  },\n  \"responseCode\": \"RESOURCE_NOT_FOUND\",\n  \"result\": {\n    \"messages\": null\n  }\n}"
												},
												{
													"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Registered User ID to execute the API.",
																"key": "X-Authenticated-User-token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/content/v2/retire/:Content_Id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"retire",
																":Content_Id"
															],
															"variable": [
																{
																	"key": "Content_Id",
																	"value": "ea laborum",
																	"description": "(Required) Please append a valid Content Id To the Request URL"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"result\": {},\n  \"id\": \"cupidatat reprehenderit dolor\",\n  \"ver\": \"minim anim commodo\",\n  \"ts\": \"commodo\",\n  \"params\": {\n    \"resmsgid\": \"pariatur repre\",\n    \"msgid\": \"irure\",\n    \"err\": \"consequat esse ea\",\n    \"status\": \"esse\",\n    \"errmsg\": \"aliqua laboris velit\"\n  },\n  \"responseCode\": \"reprehenderit dolor elit sunt dolore\"\n}"
												}
											]
										},
										{
											"name": "Retire an invalid content",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"//Verification\r",
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404)\r",
															"});\r",
															"pm.test(\"Params has keys: resmsgid , msgid , err , status , errmsg \", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid', 'msgid','err','status','errmsg');\r",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.params.msgid).to.be.a('null');\r",
															"  pm.expect(jsonResponse.params.err).to.be.a('string');\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a('string');\r",
															"});\r",
															"//code name contains a string\r",
															"tests[\"Status code name has string \\\"Not Found\\\"\"] = responseCode.name.has(\"Not Found\");\r",
															"\r",
															"pm.test(\"Test data type of the response and keys\", () => {\r",
															"  pm.expect(jsonResponse.result).to.be.an(\"object\");\r",
															"  pm.expect(jsonResponse.result).to.have.all.keys('messages');\r",
															"  pm.expect(jsonResponse.result.messages).to.be.null;\r",
															"});\r",
															"\r",
															"//Validation\r",
															"// Response body\r",
															"pm.test(\"id should be api.content.retire\", () => {\r",
															"   pm.expect(jsonResponse.id).to.eql(\"api.content.retire\");\r",
															"});\r",
															"pm.test(\"ver should be 4.0\", () => {\r",
															"   pm.expect(jsonResponse.ver).to.eql(\"4.0\");\r",
															"});\r",
															"pm.test(\"responseCode should be RESOURCE_NOT_FOUND\", () => {\r",
															"    pm.expect(jsonResponse.responseCode).to.eql(\"RESOURCE_NOT_FOUND\");\r",
															"});\r",
															"\r",
															"// Params\r",
															"pm.test(\"params.err should be \\\"NOT_FOUND\\\"\", () => {\r",
															"    pm.expect(jsonResponse.params.err).to.eql(\"NOT_FOUND\");\r",
															"});\r",
															"pm.test(\"params.status should be \\\"failed\\\"\", () => {\r",
															"    pm.expect(jsonResponse.params.status).to.eql(\"failed\");\r",
															"});\r",
															"pm.test(`Error! Node(s) doesn't Exists. | [Invalid Node Id.]: dummy`, () => {\r",
															"    pm.expect(jsonResponse.params.errmsg).to.eql(`Error! Node(s) doesn't Exists. | [Invalid Node Id.]: dummy`);\r",
															"});\r",
															"\r",
															"// Result\r",
															"pm.test(\"messages should be null\", () => {\r",
															"    pm.expect(jsonResponse.result.messages).to.eql(null);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "value",
															"value": "<API Key>",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [
													{
														"description": "(Required) The Registered User ID to execute the API.",
														"key": "X-Authenticated-User-token",
														"value": "ea laborum"
													},
													{
														"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
														"key": "Authorization",
														"value": "ea laborum"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/content/v4/retire/dummy",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"content",
														"v4",
														"retire",
														"dummy"
													]
												},
												"description": "This API is associated with retiring content on the Sunbird Platform .\n  - The **_/retire/{contentId}_** endpoint executes  \"Retire Content\" request based on content Id to delete the specific content.'\n  - The endpoint for **Retire Content** is `/content/v2/retire`\n  - It points to knowledge-mw-service - `/v2/content/retire`\n  - {...}refers to a section of review endpoint URL path that needs to be replaced by appropriate Id.\n  - It is mandatory to provide values for parameters.\n  - Mandatory fields cannot be null or empty."
											},
											"response": [
												{
													"name": "OK ! Successful operation.**Content deletion operation was successfully executed.",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Registered User ID to execute the API.",
																"key": "X-Authenticated-User-token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/content/v2/retire/:Content_Id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"retire",
																":Content_Id"
															],
															"variable": [
																{
																	"key": "Content_Id",
																	"value": "ea laborum",
																	"description": "(Required) Please append a valid Content Id To the Request URL"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.content.retire\",\n  \"ver\": \"3.0\",\n  \"ts\": \"2020-12-11T12:05:52ZZ\",\n  \"params\": {\n    \"resmsgid\": \"ebd2655a-a69a-460c-9bcf-0f45f5938fac\",\n    \"msgid\": null,\n    \"err\": null,\n    \"status\": \"successful\",\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"identifier\": \"do_11283183576849612818\",\n    \"node_id\": \"do_11283183576849612818\"\n  }\n}"
												},
												{
													"name": "ERR CONTENT RETIRE! Content is already retired.",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Registered User ID to execute the API.",
																"key": "X-Authenticated-User-token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/content/v2/retire/:Content_Id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"retire",
																":Content_Id"
															],
															"variable": [
																{
																	"key": "Content_Id",
																	"value": "ea laborum",
																	"description": "(Required) Please append a valid Content Id To the Request URL"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.content.retire\",\n  \"ver\": \"3.0\",\n  \"ts\": \"2020-12-11T12:01:24ZZ\",\n  \"params\": {\n    \"resmsgid\": \"ec20ec05-581c-4559-988a-449f3c5ae698\",\n    \"msgid\": null,\n    \"err\": \"ERR_CONTENT_RETIRE\",\n    \"status\": \"failed\",\n    \"errmsg\": \"Content with Identifier do_11316298360130764811 is already Retired.\"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {\n    \"messages\": null\n  }\n}"
												},
												{
													"name": "RESOURCE NOT FOUND,**Content Send for Flag Accept** operation failed !The possible reason for failure is that you may have provided wrong content id.",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Registered User ID to execute the API.",
																"key": "X-Authenticated-User-token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/content/v2/retire/:Content_Id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"retire",
																":Content_Id"
															],
															"variable": [
																{
																	"key": "Content_Id",
																	"value": "ea laborum",
																	"description": "(Required) Please append a valid Content Id To the Request URL"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.content.retire\",\n  \"ver\": \"3.0\",\n  \"ts\": \"2020-12-11T11:56:35ZZ\",\n  \"params\": {\n    \"resmsgid\": \"d826e808-2866-4603-9b60-0a3130a37128\",\n    \"msgid\": null,\n    \"err\": \"NOT_FOUND\",\n    \"status\": \"failed\",\n    \"errmsg\": \"Error! Node(s) doesn't Exists. | [Invalid Node Id.]: do_213143334457982976144\"\n  },\n  \"responseCode\": \"RESOURCE_NOT_FOUND\",\n  \"result\": {\n    \"messages\": null\n  }\n}"
												},
												{
													"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Registered User ID to execute the API.",
																"key": "X-Authenticated-User-token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/content/v2/retire/:Content_Id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"retire",
																":Content_Id"
															],
															"variable": [
																{
																	"key": "Content_Id",
																	"value": "ea laborum",
																	"description": "(Required) Please append a valid Content Id To the Request URL"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"result\": {},\n  \"id\": \"cupidatat reprehenderit dolor\",\n  \"ver\": \"minim anim commodo\",\n  \"ts\": \"commodo\",\n  \"params\": {\n    \"resmsgid\": \"pariatur repre\",\n    \"msgid\": \"irure\",\n    \"err\": \"consequat esse ea\",\n    \"status\": \"esse\",\n    \"errmsg\": \"aliqua laboris velit\"\n  },\n  \"responseCode\": \"reprehenderit dolor elit sunt dolore\"\n}"
												}
											]
										}
									]
								},
								{
									"name": "Discard content",
									"item": [
										{
											"name": "Pre requisite",
											"item": [
												{
													"name": "Create draft content",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let jsonResponse = pm.response.json();\r",
																	"\r",
																	"pm.collectionVariables.set(\"discard_content\", jsonResponse.result.identifier);\r",
																	"console.log(pm.collectionVariables.get(\"discard_content\"));\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-Authenticated-User-token",
																"value": "{{keycloak_access_token}}"
															},
															{
																"key": "Authorization",
																"value": "{{kong_api_key}}"
															},
															{
																"key": "X-Channel-Id",
																"value": "sunbird"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"video/mp4\",\n            \"primaryCategory\": \"Explanation Content\",\n            \"body\": \"{\\\"key\\\":\\\"value\\\"}\"\n        }\n    }\n}"
														},
														"url": {
															"raw": "{{host}}/content/v4/create",
															"host": [
																"{{host}}"
															],
															"path": [
																"content",
																"v4",
																"create"
															]
														}
													},
													"response": []
												},
												{
													"name": "Create Content",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let jsonResponse = pm.response.json();\r",
																	"\r",
																	"pm.collectionVariables.set(\"discard_livecontent\", jsonResponse.result.identifier);\r",
																	"console.log(pm.collectionVariables.get(\"discard_livecontent\"));\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-Authenticated-User-token",
																"value": "{{keycloak_access_token}}"
															},
															{
																"key": "Authorization",
																"value": "{{kong_api_key}}"
															},
															{
																"key": "X-Channel-Id",
																"value": "sunbird"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"video/mp4\",\n            \"primaryCategory\": \"Explanation Content\",\n            \"body\": \"{\\\"key\\\":\\\"value\\\"}\"\n        }\n    }\n}"
														},
														"url": {
															"raw": "{{host}}/content/v4/create",
															"host": [
																"{{host}}"
															],
															"path": [
																"content",
																"v4",
																"create"
															]
														},
														"description": "This API is associated with creating content on the Sunbird Platform.\n  - The endpoint for **Create Content** is `/content/v2/create`\n  - It points to knowledge-mw-service - `/v2/content/create`\n  - It is mandatory to provide values for parameters marked with *.\n  - Mandatory fields cannot be null or empty."
													},
													"response": [
														{
															"name": "SUCCESS. The **Create Content** operation was successful!",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																		"key": "Content-Type",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) Represents a physical location (e.g: state) uniquely to which the user belongs.",
																		"key": "x-channel-id",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) Represents the authorized User ID to execute the API.",
																		"key": "X-Authenticated-User-Token",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																		"key": "Authorization",
																		"value": "ea laborum"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"request\": {\n    \"content\": {\n      \"name\": \"H5P Content\",\n      \"code\": \"h5pcontent\",\n      \"mimeType\": \"application/vnd.ekstep.h5p-archive\",\n      \"primaryCategory\": \"Resource\",\n      \"createdBy\": \"874ed8a5-782e-4f6c-8f36-e0288455901e\"\n    }\n  }\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/content/v2/create",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"content",
																		"v2",
																		"create"
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"id\": \"api.content.create\",\n  \"ver\": \"3.0\",\n  \"ts\": \"2020-12-10T20:24:45ZZ\",\n  \"params\": {\n    \"resmsgid\": \"3be02c4b-3324-41a3-afd8-60f6be0584d2\",\n    \"msgid\": null,\n    \"err\": null,\n    \"status\": \"successful\",\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"identifier\": \"do_1131697204035993601314\",\n    \"node_id\": \"do_1131697204035993601314\",\n    \"versionKey\": \"1607631885207\"\n  }\n}"
														},
														{
															"name": "'BAD REQUEST. The **Create Content** operation failed. You may have missed input for a mandatory parameter.'",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																		"key": "Content-Type",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) Represents a physical location (e.g: state) uniquely to which the user belongs.",
																		"key": "x-channel-id",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) Represents the authorized User ID to execute the API.",
																		"key": "X-Authenticated-User-Token",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																		"key": "Authorization",
																		"value": "ea laborum"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"request\": {\n    \"content\": {\n      \"name\": \"H5P Content\",\n      \"code\": \"h5pcontent\",\n      \"mimeType\": \"application/vnd.ekstep.h5p-archive\",\n      \"primaryCategory\": \"Resource\",\n      \"createdBy\": \"874ed8a5-782e-4f6c-8f36-e0288455901e\"\n    }\n  }\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/content/v2/create",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"content",
																		"v2",
																		"create"
																	]
																}
															},
															"status": "Bad Request",
															"code": 400,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"id\": \"api.content.create\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-10T08:50:29.786Z\",\n  \"params\": {\n    \"resmsgid\": \"c169a7a0-3ac4-11eb-b0a2-8d5c9f561887\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"ERR_CONTENT_CREATE_FIELDS_MISSING\",\n    \"errmsg\": \"Required fields for create content are missing\"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {}\n}"
														},
														{
															"name": "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																		"key": "Content-Type",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) Represents a physical location (e.g: state) uniquely to which the user belongs.",
																		"key": "x-channel-id",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) Represents the authorized User ID to execute the API.",
																		"key": "X-Authenticated-User-Token",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																		"key": "Authorization",
																		"value": "ea laborum"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"request\": {\n    \"content\": {\n      \"name\": \"H5P Content\",\n      \"code\": \"h5pcontent\",\n      \"mimeType\": \"application/vnd.ekstep.h5p-archive\",\n      \"primaryCategory\": \"Resource\",\n      \"createdBy\": \"874ed8a5-782e-4f6c-8f36-e0288455901e\"\n    }\n  }\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/content/v2/create",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"content",
																		"v2",
																		"create"
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"id\": \"api.content.create\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-10T08:51:51.647Z\",\n  \"params\": {\n    \"resmsgid\": \"f234a6f0-3ac4-11eb-b0a2-8d5c9f561887\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": null,\n    \"errmsg\": null\n  },\n  \"responseCode\": \"SERVER_ERROR\",\n  \"result\": {}\n}"
														}
													]
												},
												{
													"name": "Upload URL",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let jsonResponse = pm.response.json();\r",
																	"\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Status code name has string OK\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"pm.test(\"id should be api.content.upload.url\", function () {\r",
																	"   pm.expect(jsonResponse.id).to.eql(\"api.content.upload.url\");\r",
																	"});\r",
																	"pm.test(\"ver should be 4.0\", function () {\r",
																	"   pm.expect(jsonResponse.ver).to.eql(\"4.0\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Params has keys: resmsgid , msgid , err , status , errmsg \", () => {\r",
																	"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid', 'msgid','err','status','errmsg');\r",
																	"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");\r",
																	"  pm.expect(jsonResponse.params.msgid).to.be.a('null');\r",
																	"  pm.expect(jsonResponse.params.err).to.be.a('null');\r",
																	"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");\r",
																	"  pm.expect(jsonResponse.params.errmsg).to.be.a('null');\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status is successful\", function () {\r",
																	"    pm.expect(jsonResponse.params.status).to.be.equal(\"successful\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"ResponseCode is OK\", function () {\r",
																	"    pm.expect(jsonResponse.responseCode).to.be.equal(\"OK\");\r",
																	"});\r",
																	"\r",
																	"\r",
																	"pm.test(\"Verify keys and data type of the response result\", () => {\r",
																	"  pm.expect(jsonResponse.result).to.have.all.keys('identifier', 'url_expiry', 'pre_signed_url');\r",
																	"});\r",
																	"pm.collectionVariables.set(\"pre_signed_URL\",jsonResponse.result.pre_signed_url );\r",
																	"console.log(pm.collectionVariables.get(\"pre_signed_URL\"));\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "apikey",
															"apikey": [
																{
																	"key": "key",
																	"value": "Authorization",
																	"type": "string"
																},
																{
																	"key": "value",
																	"value": "<API Key>",
																	"type": "string"
																},
																{
																	"key": "in",
																	"value": "header",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"description": "(Required) The Registered User ID to execute the API.",
																"key": "X-Authenticated-Userid",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"request\": {\n        \"content\": {\n            \"fileName\":\"test.pdf\"\n        }\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v4/upload/url/{{discard_livecontent}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v4",
																"upload",
																"url",
																"{{discard_livecontent}}"
															]
														},
														"description": "This API is associated with uploading content on the Sunbird Platform .\n   - The**_/upload/url/{content Id}_** endpoint executes \"Upload Content URL\" request based on parameters provided as metadata in the request body.\n   - The endpoint for **Upload Content URL** is `/content/v2/upload/url`\n  - It points to knowledge-mw-service - `/v2/content/upload/url`\n  - {...}refers to a section of upload endpoint URL path that needs to be replaced by appropriate Id.\n   - You need to provide a valid content Id value in {Content Id} field of API URL.\n   - On Success api returns pre-signed-url link with come configured ttl against which file can be uploaded.\n   - It is mandatory to provide values for parameters marked with *.\n   - Mandatory fields cannot be null or empty."
													},
													"response": [
														{
															"name": "OK ! Successful operation.\"Content upload\" operation was successfully executed.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																		"key": "Content-Type",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) The Registered User ID to execute the API.",
																		"key": "X-Authenticated-Userid",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																		"key": "Authorization",
																		"value": "ea laborum"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"request\": {\n    \"content\": {\n      \"fileName\": \"test.pdf\"\n    }\n  }\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/content/v2/upload/url/:Content_Id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"content",
																		"v2",
																		"upload",
																		"url",
																		":Content_Id"
																	],
																	"variable": [
																		{
																			"key": "Content_Id",
																			"value": "ea laborum",
																			"description": "(Required) Please append a valid Content Id To the Request URL"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"id\": \"api.content.upload.url\",\n  \"ver\": \"3.0\",\n  \"ts\": \"2020-12-11T23:52:44ZZ\",\n  \"params\": {\n    \"resmsgid\": \"81e308fa-3e36-45ff-b295-e28e8f757dc7\",\n    \"msgid\": null,\n    \"err\": null,\n    \"status\": \"successful\",\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"identifier\": \"do_11317053041892556811094\",\n    \"url_expiry\": \"54000\",\n    \"pre_signed_url\": \"https://sunbirddev.blob.core.windows.net/sunbird-content-dev/content/assets/do_11317053041892556811094/10-page-pdf.pdf?sv=2017-04-17&se=2020-12-12T14%3A52%3A44Z&sr=b&sp=w&sig=Tlt6uWI/6lMeupkEbsTAmGajmo1qzw8HeUHrVwOm6yk%3D\"\n  }\n}"
														},
														{
															"name": "BAD REQUEST. The 'Upload Url' operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																		"key": "Content-Type",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) The Registered User ID to execute the API.",
																		"key": "X-Authenticated-Userid",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																		"key": "Authorization",
																		"value": "ea laborum"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"request\": {\n    \"content\": {\n      \"fileName\": \"test.pdf\"\n    }\n  }\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/content/v2/upload/url/:Content_Id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"content",
																		"v2",
																		"upload",
																		"url",
																		":Content_Id"
																	],
																	"variable": [
																		{
																			"key": "Content_Id",
																			"value": "ea laborum",
																			"description": "(Required) Please append a valid Content Id To the Request URL"
																		}
																	]
																}
															},
															"status": "Bad Request",
															"code": 400,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"id\": \"api.content.upload.url\",\n  \"ver\": \"3.0\",\n  \"ts\": \"2020-12-11T23:54:07ZZ\",\n  \"params\": {\n    \"resmsgid\": \"4edde64d-3116-4271-bcc1-a8ba0ec2d56b\",\n    \"msgid\": null,\n    \"err\": \"ERR_CONTENT_BLANK_FILE_NAME\",\n    \"status\": \"failed\",\n    \"errmsg\": \"File name is blank\"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {\n    \"messages\": null\n  }\n}"
														},
														{
															"name": "RESOURCE NOT FOUND,**Content Id sent for generating upload url** operation failed !The possible reason for failure is that you may have provided wrong content id.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																		"key": "Content-Type",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) The Registered User ID to execute the API.",
																		"key": "X-Authenticated-Userid",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																		"key": "Authorization",
																		"value": "ea laborum"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"request\": {\n    \"content\": {\n      \"fileName\": \"test.pdf\"\n    }\n  }\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/content/v2/upload/url/:Content_Id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"content",
																		"v2",
																		"upload",
																		"url",
																		":Content_Id"
																	],
																	"variable": [
																		{
																			"key": "Content_Id",
																			"value": "ea laborum",
																			"description": "(Required) Please append a valid Content Id To the Request URL"
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"id\": \"api.upload.url\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-11T23:48:26.694Z\",\n  \"params\": {\n    \"resmsgid\": \"5cf72660-3c0b-11eb-b0a2-8d5c9f561887\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"NOT_FOUND\",\n    \"errmsg\": \"Error! Node(s) doesn't Exists. | [Invalid Node Id.]: do_11254577204586086415\"\n  },\n  \"responseCode\": \"RESOURCE_NOT_FOUND\",\n  \"result\": {}\n}"
														},
														{
															"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																		"key": "Content-Type",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) The Registered User ID to execute the API.",
																		"key": "X-Authenticated-Userid",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																		"key": "Authorization",
																		"value": "ea laborum"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"request\": {\n    \"content\": {\n      \"fileName\": \"test.pdf\"\n    }\n  }\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/content/v2/upload/url/:Content_Id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"content",
																		"v2",
																		"upload",
																		"url",
																		":Content_Id"
																	],
																	"variable": [
																		{
																			"key": "Content_Id",
																			"value": "ea laborum",
																			"description": "(Required) Please append a valid Content Id To the Request URL"
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"result\": {},\n  \"id\": \"cupidatat reprehenderit dolor\",\n  \"ver\": \"minim anim commodo\",\n  \"ts\": \"commodo\",\n  \"params\": {\n    \"resmsgid\": \"pariatur repre\",\n    \"msgid\": \"irure\",\n    \"err\": \"consequat esse ea\",\n    \"status\": \"esse\",\n    \"errmsg\": \"aliqua laboris velit\"\n  },\n  \"responseCode\": \"reprehenderit dolor elit sunt dolore\"\n}"
														}
													]
												},
												{
													"name": "Upload file to the URL",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"var fullUrl= pm.collectionVariables.get(\"pre_signed_URL\");\r",
																	"\r",
																	"// Find the index of '?' to get the position of the query parameters\r",
																	"var indexOfQuestionMark = fullUrl.indexOf('?');\r",
																	"\r",
																	"// Extract the partial URL without the query parameters\r",
																	"var partialUrl = indexOfQuestionMark !== -1 ? fullUrl.slice(0, indexOfQuestionMark) : fullUrl;\r",
																	"pm.collectionVariables.set(\"partial_URL\", partialUrl);\r",
																	"// Log the partial URL to the console (you can remove this line if not needed)\r",
																	"console.log(pm.collectionVariables.get(\"partial_URL\"));\r",
																	"\r",
																	"// Now you can use the 'partialUrl' variable in Postman as needed\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-Ms-Blob-Type",
																"value": "BlockBlob"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "file",
																	"type": "file",
																	"src": "/C:/Users/Qualitrix/Downloads/pdf_233.pdf"
																}
															]
														},
														"url": {
															"raw": "{{pre_signed_URL}}",
															"host": [
																"{{pre_signed_URL}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Update the content with URL and mime type",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let jsonResponse = pm.response.json();\r",
																	"\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Status code name has string OK\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"pm.test(\"id should be api.content.upload\", function () {\r",
																	"   pm.expect(jsonResponse.id).to.eql(\"api.content.upload\");\r",
																	"});\r",
																	"pm.test(\"ver should be 4.0\", function () {\r",
																	"   pm.expect(jsonResponse.ver).to.eql(\"4.0\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Params has keys: resmsgid , msgid , err , status , errmsg \", () => {\r",
																	"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid', 'msgid','err','status','errmsg');\r",
																	"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");\r",
																	"  pm.expect(jsonResponse.params.msgid).to.be.a('null');\r",
																	"  pm.expect(jsonResponse.params.err).to.be.a('null');\r",
																	"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");\r",
																	"  pm.expect(jsonResponse.params.errmsg).to.be.a('null');\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status is successful\", function () {\r",
																	"    pm.expect(jsonResponse.params.status).to.be.equal(\"successful\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"ResponseCode is OK\", function () {\r",
																	"    pm.expect(jsonResponse.responseCode).to.be.equal(\"OK\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Result has keys: identifier , artifactUrl , content_url , node_id , versionKey \", () => {\r",
																	"  pm.expect(jsonResponse.result).to.have.all.keys('identifier', 'artifactUrl','content_url','node_id','versionKey');\r",
																	"  pm.expect(jsonResponse.result.identifier).to.be.a(\"string\");\r",
																	"  pm.expect(jsonResponse.result.artifactUrl).to.be.a(\"string\");\r",
																	"  pm.expect(jsonResponse.result.content_url).to.be.a(\"string\");\r",
																	"  pm.expect(jsonResponse.result.node_id).to.be.a(\"string\");\r",
																	"  pm.expect(jsonResponse.result.versionKey).to.be.a(\"string\");\r",
																	"});\r",
																	"\r",
																	"pm.test(`artifactUrl should be: ${pm.collectionVariables.get(\"partial_URL\")}`, function () {\r",
																	"    pm.expect(jsonResponse.result.artifactUrl).to.be.equal(`${pm.collectionVariables.get(\"partial_URL\")}`);\r",
																	"});\r",
																	"\r",
																	"pm.test(`content_url should be: ${pm.collectionVariables.get(\"partial_URL\")}`, function () {\r",
																	"    pm.expect(jsonResponse.result.content_url).to.be.equal(`${pm.collectionVariables.get(\"partial_URL\")}`);\r",
																	"});\r",
																	"\r",
																	"pm.test(`identifier should be: ${pm.collectionVariables.get(\"discard_livecontent\")}`, function () {\r",
																	"    pm.expect(jsonResponse.result.identifier).to.be.equal(`${pm.collectionVariables.get(\"discard_livecontent\")}`);\r",
																	"});\r",
																	"\r",
																	"pm.test(`node_id should be: ${pm.collectionVariables.get(\"discard_livecontent\")}`, function () {\r",
																	"    pm.expect(jsonResponse.result.node_id).to.be.equal(`${pm.collectionVariables.get(\"discard_livecontent\")}`);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "user-id",
																"value": "mahesh"
															},
															{
																"key": "Cookie",
																"value": "connect.sid=s%3AnLNdCeYI27WUkZBIFdX1J5MKTM6ISEdJ.SFTq%2FeT2cVLh5TSEWmwZPCekWDSeNXILHPDyziKa26E"
															},
															{
																"key": "X-Channel-Id",
																"value": "0137541424673095687"
															},
															{
																"key": "X-Authenticated-User-token",
																"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6ImFjY2Vzc3YxX2tleTEifQ.eyJhdWQiOiJodHRwczovL2Rldi5zdW5iaXJkZWQub3JnL2F1dGgvcmVhbG1zL3N1bmJpcmQiLCJzdWIiOiJmOjVhOGEzZjJiLTM0MDktNDJlMC05MDAxLWY5MTNiYzBmZGUzMToxNTVjZTNjNS03MTNlLTQ3NDktYmMxYy05NWQwOWM2NDA5MTQiLCJyb2xlcyI6W3sicm9sZSI6IkNPTlRFTlRfQ1JFQVRPUiIsInNjb3BlIjpbeyJvcmdhbmlzYXRpb25JZCI6IjAxMzc1NDE0MjQ2NzMwOTU2ODcifV19LHsicm9sZSI6IkNPVVJTRV9NRU5UT1IiLCJzY29wZSI6W3sib3JnYW5pc2F0aW9uSWQiOiIwMTM3NTQxNDI0NjczMDk1Njg3In1dfSx7InJvbGUiOiJQVUJMSUMiLCJzY29wZSI6W119XSwiaXNzIjoiaHR0cHM6Ly9kZXYuc3VuYmlyZGVkLm9yZy9hdXRoL3JlYWxtcy9zdW5iaXJkIiwibmFtZSI6ImNvbnRlbnRDcmVhdG9yIiwidHlwIjoiQmVhcmVyIiwiZXhwIjoxNzAyMzI0NjU0LCJpYXQiOjE3MDIyODE0NTR9.MxiIhP6YJmI1XbozLNoJeQAbdQKs597f2mlNHWcJ-ZZIXvBx4BcX7T57B5xXGIT6LJ6YlS86saiG6SXHIG5ptgICphdefNysfVgkSUmqTsgzfzvjp2lzIw8Re7xi735Kd7B612y5Tkswm0ETP7NIeQ7-Tc_3h37GV04ISfx0LMD75UvgllxcDz91Bl6N3-WN4KwCeKIfJ-iZj-EJLwoBmJjGsgNCNTn5DTzF_joFcyett__WVc14Ex-BqRSq8Hr2fMVoHpNXze3QUJ7PcD4JRY2Ywg5R9VkHz3mkhY9kI1cWeHdQypeSsM8niQK1XCWJz_aTqsP35MshDnHkWhmDyg"
															},
															{
																"key": "Authorization",
																"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiIzZGNjMzY3OWIwYTE0NmU2YWYyZjlmZDA5NWU5NTlkNCJ9.0NZhX5sqUNy-GZUya90aQFkr5ZNiqfOuELYz_IvoyS8"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "fileUrl",
																	"value": "{{partial_URL}}",
																	"type": "text"
																},
																{
																	"key": "mimeType",
																	"value": "application/pdf",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{host}}/content/v4/upload/{{discard_livecontent}}",
															"host": [
																"{{host}}"
															],
															"path": [
																"content",
																"v4",
																"upload",
																"{{discard_livecontent}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Submit for Review",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let jsonResponse = pm.response.json();\r",
																	"\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Status code name has string OK\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"pm.test(\"id should be api.content.review\", function () {\r",
																	"   pm.expect(jsonResponse.id).to.eql(\"api.content.review\");\r",
																	"});\r",
																	"pm.test(\"ver should be 4.0\", function () {\r",
																	"   pm.expect(jsonResponse.ver).to.eql(\"4.0\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Params has keys: resmsgid , msgid , err , status , errmsg \", () => {\r",
																	"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid', 'msgid','err','status','errmsg');\r",
																	"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");\r",
																	"  pm.expect(jsonResponse.params.msgid).to.be.a('null');\r",
																	"  pm.expect(jsonResponse.params.err).to.be.a('null');\r",
																	"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");\r",
																	"  pm.expect(jsonResponse.params.errmsg).to.be.a('null');\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status is successful\", function () {\r",
																	"    pm.expect(jsonResponse.params.status).to.be.equal(\"successful\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"ResponseCode is OK\", function () {\r",
																	"    pm.expect(jsonResponse.responseCode).to.be.equal(\"OK\");\r",
																	"});\r",
																	"pm.test(\"Result has keys: identifier , versionKey\", () => {\r",
																	"  pm.expect(jsonResponse.result).to.have.all.keys('identifier','versionKey');\r",
																	"  pm.expect(jsonResponse.result.identifier).to.be.a(\"string\");\r",
																	"  pm.expect(jsonResponse.result.versionKey).to.be.a(\"string\");\r",
																	"});\r",
																	"\r",
																	"pm.test(`identifier should be: ${pm.collectionVariables.get(\"discard_livecontent\")}`, function () {\r",
																	"    pm.expect(jsonResponse.result.identifier).to.be.equal(`${pm.collectionVariables.get(\"discard_livecontent\")}`);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "apikey",
															"apikey": [
																{
																	"key": "value",
																	"value": "{{auth_token}}",
																	"type": "string"
																},
																{
																	"key": "key",
																	"value": "Authorization",
																	"type": "string"
																},
																{
																	"key": "in",
																	"value": "header",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"description": "(Required) The Registered User ID to execute the API.",
																"key": "X-Authenticated-User-token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v4/review/{{discard_livecontent}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v4",
																"review",
																"{{discard_livecontent}}"
															]
														},
														"description": ">- This API is associated with Submission of content for Review  on the Sunbird Platform .\n  - The**_/review/{content Id}_** endpoint executes \"Submit for Review\" request based on parameters provided as metadata in the request body.\n  - The endpoint for **Review Content** is `/content/v2/review`\n  - It points to knowledge-mw-service - `/v2/content/review`\n  - {...}refers to a section of review endpoint URL path that needs to be replaced by appropriate Id.\n  - You need to provide a valid content Id value in {Content Id} field of API URL.\n  - It is mandatory to provide values for parameters marked with *.\n  - Mandatory fields cannot be null or empty."
													},
													"response": [
														{
															"name": "OK ! Successful operation.Content sent for review operation was successfully executed.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																		"key": "Content-Type",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) The Registered User ID to execute the API.",
																		"key": "X-Authenticated-User-token",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																		"key": "Authorization",
																		"value": "ea laborum"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/content/v2/review/:Content_Id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"content",
																		"v2",
																		"review",
																		":Content_Id"
																	],
																	"variable": [
																		{
																			"key": "Content_Id",
																			"value": "ea laborum",
																			"description": "(Required) Please append a valid Content Id To the Request URL"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"id\": \"ekstep.learning.content.review\",\n  \"ver\": \"3.0\",\n  \"ts\": \"2020-12-10T21:06:26ZZ\",\n  \"params\": {\n    \"resmsgid\": \"186cf9a9-8094-4cdd-926f-b77a030921d1\",\n    \"msgid\": null,\n    \"err\": null,\n    \"status\": \"successful\",\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"node_id\": \"do_1131697376667402241315\",\n    \"versionKey\": \"1607634386533\"\n  }\n}"
														},
														{
															"name": "RESOURCE NOT FOUND,**Content Send for Review** operation failed !The possible reason for failure is that you may have provided wrong content id.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																		"key": "Content-Type",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) The Registered User ID to execute the API.",
																		"key": "X-Authenticated-User-token",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																		"key": "Authorization",
																		"value": "ea laborum"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/content/v2/review/:Content_Id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"content",
																		"v2",
																		"review",
																		":Content_Id"
																	],
																	"variable": [
																		{
																			"key": "Content_Id",
																			"value": "ea laborum",
																			"description": "(Required) Please append a valid Content Id To the Request URL"
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"id\": \"ekstep.learning.content.review\",\n  \"ver\": \"3.0\",\n  \"ts\": \"2020-12-10T21:06:54ZZ\",\n  \"params\": {\n    \"resmsgid\": \"944ac944-78d9-43e2-bfd5-337ab52b6552\",\n    \"msgid\": null,\n    \"err\": \"ERR_TAXONOMY_INVALID_CONTENT\",\n    \"status\": \"failed\",\n    \"errmsg\": \"Error! While Fetching the Content for Operation | [Content Id: do_11316973766674022413151]\"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {}\n}"
														},
														{
															"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! We track these errors automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																		"key": "Content-Type",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) The Registered User ID to execute the API.",
																		"key": "X-Authenticated-User-token",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																		"key": "Authorization",
																		"value": "ea laborum"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/content/v2/review/:Content_Id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"content",
																		"v2",
																		"review",
																		":Content_Id"
																	],
																	"variable": [
																		{
																			"key": "Content_Id",
																			"value": "ea laborum",
																			"description": "(Required) Please append a valid Content Id To the Request URL"
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"result\": {},\n  \"id\": \"cupidatat reprehenderit dolor\",\n  \"ver\": \"minim anim commodo\",\n  \"ts\": \"commodo\",\n  \"params\": {\n    \"resmsgid\": \"pariatur repre\",\n    \"msgid\": \"irure\",\n    \"err\": \"consequat esse ea\",\n    \"status\": \"esse\",\n    \"errmsg\": \"aliqua laboris velit\"\n  },\n  \"responseCode\": \"reprehenderit dolor elit sunt dolore\"\n}"
														}
													]
												},
												{
													"name": "Publish Content",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let jsonResponse = pm.response.json()\r",
																	"\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"id has string - api.content.publish.public \", function () {\r",
																	"    pm.expect(jsonResponse.id).to.be.equal(\"api.content.publish.public\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Version is 4.0 \", function () {\r",
																	"    pm.expect(jsonResponse.ver).to.be.equal(\"4.0\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Verify keys and data type of the response result\", () => {\r",
																	"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','status', 'err','errmsg');\r",
																	"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");\r",
																	"  pm.expect(jsonResponse.params.msgid).to.be.a(\"null\"); \r",
																	"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");\r",
																	"  pm.expect(jsonResponse.params.err).to.be.a(\"null\");\r",
																	"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"null\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status is successful \", function () {\r",
																	"    pm.expect(jsonResponse.params.status).to.be.equal(\"successful\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"ResponseCode is OK \", function () {\r",
																	"    pm.expect(jsonResponse.responseCode).to.be.equal(\"OK\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Verify keys and data type of the response result\", () => {\r",
																	"  pm.expect(jsonResponse.result).to.have.all.keys('publishStatus','node_id');\r",
																	"  pm.expect(jsonResponse.result.publishStatus).to.be.a('String');\r",
																	"  pm.expect(jsonResponse.result.node_id).to.be.a('String');\r",
																	"});\r",
																	"\r",
																	"pm.test(\"node should be equal to \" + pm.collectionVariables.get(\"discard_livecontent\"), () => {\r",
																	"    pm.expect(jsonResponse.result.node_id).to.eql(pm.collectionVariables.get(\"discard_livecontent\"));\r",
																	"});\r",
																	"pm.test(`publishStatus should be equal to Publish Event for Content Id ${pm.collectionVariables.get(\"discard_livecontent\")} is pushed Successfully!`, () => {\r",
																	"    pm.expect(jsonResponse.result.publishStatus).to.eql(`Publish Event for Content Id '${pm.collectionVariables.get(\"discard_livecontent\")}' is pushed Successfully!`);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "apikey",
															"apikey": [
																{
																	"key": "key",
																	"value": "Authorization",
																	"type": "string"
																},
																{
																	"key": "value",
																	"value": "<API Key>",
																	"type": "string"
																},
																{
																	"key": "in",
																	"value": "header",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json\n  - Multipart/form-data\n  - Application/x-www-form-urlencoded",
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"description": "(Required) User Registered ID , which is used for logging In",
																"key": "X-Authenticated-User-token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) Authorizing user in order to grant access.",
																"key": "Authorization",
																"value": "ea laborum"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"content\": {\n        \"Publisher\": \"sunbird.publisher.create\",\n      \"lastPublishedBy\": \"Ekstep\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v4/publish/{{discard_livecontent}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v4",
																"publish",
																"{{discard_livecontent}}"
															]
														},
														"description": "This API is associated with publishing content on the Sunbird Platform .\n  - **_/publish/_** endpoint executes the \"Publish Content\" request based on parameters provided as metadata in the request body.\n  - The endpoint for **Publish Content** is `/content/v1/publish`\n  - It points to knowledge-mw-service - `/v2/content/publish`\n  -  {...}refers to a section of review endpoint URL path that needs to be replaced by appropriate Id.\n  - It is mandatory to provide values for parameters marked with *.\n  - Mandatory fields cannot be null or empty."
													},
													"response": [
														{
															"name": "OK ! Successful operation.**Content publish operation was successfully executed.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json\n  - Multipart/form-data\n  - Application/x-www-form-urlencoded",
																		"key": "Content-Type",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) User Registered ID , which is used for logging In",
																		"key": "X-Authenticated-User-token",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) Authorizing user in order to grant access.",
																		"key": "Authorization",
																		"value": "ea laborum"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"request\": {\n    \"content\": {\n      \"lastPublishedBy\": \"Ekstep\"\n    }\n  }\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/content/v1/publish/:Content_Id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"content",
																		"v1",
																		"publish",
																		":Content_Id"
																	],
																	"variable": [
																		{
																			"key": "Content_Id",
																			"value": "ea laborum",
																			"description": "(Required) Content Id to be published"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"id\": \"api.v3.publish\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-10T21:41:23.491Z\",\n  \"params\": {\n    \"resmsgid\": \"72c4ef30-3b30-11eb-b0a2-8d5c9f561887\",\n    \"msgid\": \"72979da0-3b30-11eb-b0a2-8d5c9f561887\",\n    \"status\": \"successful\",\n    \"err\": null,\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"content_id\": \"do_21316975736724684813479\",\n    \"publishStatus\": \"Publish Operation for Content Id 'do_21316975736724684813479' Started Successfully!\"\n  }\n}"
														},
														{
															"name": "RESOURCE NOT FOUND,**Content Send for Review** operation failed !The possible reason for failure is that you may have provided wrong content id.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json\n  - Multipart/form-data\n  - Application/x-www-form-urlencoded",
																		"key": "Content-Type",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) User Registered ID , which is used for logging In",
																		"key": "X-Authenticated-User-token",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) Authorizing user in order to grant access.",
																		"key": "Authorization",
																		"value": "ea laborum"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"request\": {\n    \"content\": {\n      \"lastPublishedBy\": \"Ekstep\"\n    }\n  }\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/content/v1/publish/:Content_Id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"content",
																		"v1",
																		"publish",
																		":Content_Id"
																	],
																	"variable": [
																		{
																			"key": "Content_Id",
																			"value": "ea laborum",
																			"description": "(Required) Content Id to be published"
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"id\": \"api.v3.publish\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-10T21:51:39.870Z\",\n  \"params\": {\n    \"resmsgid\": \"e228e7e0-3b31-11eb-b0a2-8d5c9f561887\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"NOT_FOUND\",\n    \"errmsg\": \"Error! Node(s) doesn't Exists. | [Invalid Node Id.]: do_213169757367246848134791\"\n  },\n  \"responseCode\": \"RESOURCE_NOT_FOUND\",\n  \"result\": {}\n}"
														},
														{
															"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! We track these errors automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json\n  - Multipart/form-data\n  - Application/x-www-form-urlencoded",
																		"key": "Content-Type",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) User Registered ID , which is used for logging In",
																		"key": "X-Authenticated-User-token",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) Authorizing user in order to grant access.",
																		"key": "Authorization",
																		"value": "ea laborum"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"request\": {\n    \"content\": {\n      \"lastPublishedBy\": \"Ekstep\"\n    }\n  }\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/content/v1/publish/:Content_Id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"content",
																		"v1",
																		"publish",
																		":Content_Id"
																	],
																	"variable": [
																		{
																			"key": "Content_Id",
																			"value": "ea laborum",
																			"description": "(Required) Content Id to be published"
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"result\": {},\n  \"id\": \"cupidatat reprehenderit dolor\",\n  \"ver\": \"minim anim commodo\",\n  \"ts\": \"commodo\",\n  \"params\": {\n    \"resmsgid\": \"pariatur repre\",\n    \"msgid\": \"irure\",\n    \"err\": \"consequat esse ea\",\n    \"status\": \"esse\",\n    \"errmsg\": \"aliqua laboris velit\"\n  },\n  \"responseCode\": \"reprehenderit dolor elit sunt dolore\"\n}"
														}
													]
												}
											]
										},
										{
											"name": "Poitive",
											"item": [
												{
													"name": "Discard a Draft content",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let jsonResponse = pm.response.json()\r",
																	"\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"id has string - api.content.discard \", function () {\r",
																	"    pm.expect(jsonResponse.id).to.be.equal(\"api.content.discard\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Version is 4.0 \", function () {\r",
																	"    pm.expect(jsonResponse.ver).to.be.equal(\"4.0\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Verify keys and data type of the response result\", () => {\r",
																	"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','status', 'err','errmsg');\r",
																	"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");\r",
																	"  pm.expect(jsonResponse.params.msgid).to.be.a(\"null\"); \r",
																	"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");\r",
																	"  pm.expect(jsonResponse.params.err).to.be.a(\"null\");\r",
																	"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"null\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status is successful \", function () {\r",
																	"    pm.expect(jsonResponse.params.status).to.be.equal(\"successful\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"ResponseCode is OK \", function () {\r",
																	"    pm.expect(jsonResponse.responseCode).to.be.equal(\"OK\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Verify keys and data type of the response result\", () => {\r",
																	"  pm.expect(jsonResponse.result).to.have.all.keys('identifier','node_id','message');\r",
																	"  pm.expect(jsonResponse.result.node_id).to.be.a('String');\r",
																	"  pm.expect(jsonResponse.result.identifier).to.be.a('String');\r",
																	"  pm.expect(jsonResponse.result.message).to.be.a('String');\r",
																	"});\r",
																	"\r",
																	"pm.test(`message: Draft version of the content with id : ${pm.collectionVariables.get(\"discard_content\")} is discarded`, () => {\r",
																	"    pm.expect(jsonResponse.result.message).to.eql(`Draft version of the content with id : ${pm.collectionVariables.get(\"discard_content\")} is discarded`);\r",
																	"});\r",
																	"pm.test(`identifier should be: ${pm.collectionVariables.get(\"discard_content\")}`, function () {\r",
																	"    pm.expect(jsonResponse.result.identifier).to.be.equal(`${pm.collectionVariables.get(\"discard_content\")}`);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:- \n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) The Registered User ID used to execute the API.",
																"key": "X-Authenticated-User-Token",
																"value": "ea laborum"
															},
															{
																"description": "The unique ID provided to the State to which the user belongs.",
																"key": "X-Channel-id",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/content/v4/discard/{{discard_content}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v4",
																"discard",
																"{{discard_content}}"
															]
														},
														"description": "This API is associated with Discard Content on the Sunbird Platform .\n  - **_/Content/_** endpoint executes the \"Discard Content\" request based on parameters provided as metadata in the request body.\n  - The endpoint for **Discard Content** is `/Content/v2/discard`\n  - It points to knowledge-mw-service - `/v2/Content/discard`\n  - {...}refers to a section of review endpoint URL path that needs to be replaced by appropriate Id.\n  - It is mandatory to provide values for parameters marked with *.\n  - Mandatory fields cannot be null or empty."
													},
													"response": [
														{
															"name": "OK",
															"originalRequest": {
																"method": "DELETE",
																"header": [
																	{
																		"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:- \n  - Application/json",
																		"key": "Content-Type",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) The Registered User ID used to execute the API.",
																		"key": "X-Authenticated-User-Token",
																		"value": "ea laborum"
																	},
																	{
																		"description": "The unique ID provided to the State to which the user belongs.",
																		"key": "X-Channel-id",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																		"key": "Authorization",
																		"value": "ea laborum"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/content/v2/discard/:content_id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"content",
																		"v2",
																		"discard",
																		":content_id"
																	],
																	"variable": [
																		{
																			"key": "content_id",
																			"value": "ea laborum",
																			"description": "(Required) Please append a valid Content Id To the Request URL"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"id\": \"api.content.discard\",\n  \"ver\": \"4.0\",\n  \"ts\": \"2022-01-06T06:41:51ZZ\",\n  \"params\": {\n    \"resmsgid\": \"fc899cd5-958b-40ad-9a5c-6f31b65404b4\",\n    \"status\": \"successful\"\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"identifier\": \"do_1134467341514588161171\",\n    \"message\": \"Draft version of the content with id : do_1134467341514588161171 is discarded\",\n    \"node_id\": \"do_1134467341514588161171\"\n  }\n}"
														}
													]
												}
											]
										},
										{
											"name": "Negative",
											"item": [
												{
													"name": "Discard a Live content",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let jsonResponse = pm.response.json()\r",
																	"\r",
																	"//Verification\r",
																	"pm.test(\"Status code is 400\", function () {\r",
																	"    pm.response.to.have.status(400)\r",
																	"});\r",
																	"pm.test(\"Params has keys: resmsgid , msgid , err , status , errmsg \", () => {\r",
																	"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid', 'msgid','err','status','errmsg');\r",
																	"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");\r",
																	"  pm.expect(jsonResponse.params.msgid).to.be.a('null');\r",
																	"  pm.expect(jsonResponse.params.err).to.be.a('string');\r",
																	"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");\r",
																	"  pm.expect(jsonResponse.params.errmsg).to.be.a('string');\r",
																	"});\r",
																	"//code name contains a string\r",
																	"tests[\"Status code name has string \\\"Bad Request\\\"\"] = responseCode.name.has(\"Bad Request\");\r",
																	"\r",
																	"pm.test(\"Test data type of the response and keys\", () => {\r",
																	"  pm.expect(jsonResponse.result).to.be.an(\"object\");\r",
																	"  pm.expect(jsonResponse.result).to.have.all.keys('messages');\r",
																	"  pm.expect(jsonResponse.result.messages).to.be.null;\r",
																	"});\r",
																	"\r",
																	"//Validation\r",
																	"// Response body\r",
																	"pm.test(\"id should be api.content.discard\", function () {\r",
																	"   pm.expect(jsonResponse.id).to.eql(\"api.content.discard\");\r",
																	"});\r",
																	"pm.test(\"ver should be 4.0\", () => {\r",
																	"   pm.expect(jsonResponse.ver).to.eql(\"4.0\");\r",
																	"});\r",
																	"pm.test(\"responseCode should be CLIENT_ERROR\", () => {\r",
																	"    pm.expect(jsonResponse.responseCode).to.eql(\"CLIENT_ERROR\");\r",
																	"});\r",
																	"\r",
																	"// Params\r",
																	"pm.test(\"params.err should be \\\"ERR_CONTENT_NOT_DRAFT\\\"\", () => {\r",
																	"    pm.expect(jsonResponse.params.err).to.eql(\"ERR_CONTENT_NOT_DRAFT\");\r",
																	"});\r",
																	"pm.test(\"params.status should be \\\"failed\\\"\", () => {\r",
																	"    pm.expect(jsonResponse.params.status).to.eql(\"failed\");\r",
																	"});\r",
																	"pm.test(`errmsg: No changes to discard for content with content id: ${pm.collectionVariables.get(\"discard_livecontent\")} since content status isnt draft`, () => {\r",
																	"    pm.expect(jsonResponse.params.errmsg).to.eql(`No changes to discard for content with content id: ${pm.collectionVariables.get(\"discard_livecontent\")} since content status isnt draft`);\r",
																	"});\r",
																	"\r",
																	"// Result\r",
																	"pm.test(\"messages should be null\", () => {\r",
																	"    pm.expect(jsonResponse.result.messages).to.eql(null);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:- \n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) The Registered User ID used to execute the API.",
																"key": "X-Authenticated-User-Token",
																"value": "ea laborum"
															},
															{
																"description": "The unique ID provided to the State to which the user belongs.",
																"key": "X-Channel-id",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/content/v4/discard/{{discard_livecontent}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v4",
																"discard",
																"{{discard_livecontent}}"
															]
														},
														"description": "This API is associated with Discard Content on the Sunbird Platform .\n  - **_/Content/_** endpoint executes the \"Discard Content\" request based on parameters provided as metadata in the request body.\n  - The endpoint for **Discard Content** is `/Content/v2/discard`\n  - It points to knowledge-mw-service - `/v2/Content/discard`\n  - {...}refers to a section of review endpoint URL path that needs to be replaced by appropriate Id.\n  - It is mandatory to provide values for parameters marked with *.\n  - Mandatory fields cannot be null or empty."
													},
													"response": [
														{
															"name": "OK",
															"originalRequest": {
																"method": "DELETE",
																"header": [
																	{
																		"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:- \n  - Application/json",
																		"key": "Content-Type",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) The Registered User ID used to execute the API.",
																		"key": "X-Authenticated-User-Token",
																		"value": "ea laborum"
																	},
																	{
																		"description": "The unique ID provided to the State to which the user belongs.",
																		"key": "X-Channel-id",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																		"key": "Authorization",
																		"value": "ea laborum"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/content/v2/discard/:content_id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"content",
																		"v2",
																		"discard",
																		":content_id"
																	],
																	"variable": [
																		{
																			"key": "content_id",
																			"value": "ea laborum",
																			"description": "(Required) Please append a valid Content Id To the Request URL"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"id\": \"api.content.discard\",\n  \"ver\": \"4.0\",\n  \"ts\": \"2022-01-06T06:41:51ZZ\",\n  \"params\": {\n    \"resmsgid\": \"fc899cd5-958b-40ad-9a5c-6f31b65404b4\",\n    \"status\": \"successful\"\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"identifier\": \"do_1134467341514588161171\",\n    \"message\": \"Draft version of the content with id : do_1134467341514588161171 is discarded\",\n    \"node_id\": \"do_1134467341514588161171\"\n  }\n}"
														}
													]
												},
												{
													"name": "Discard a discarded content",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let jsonResponse = pm.response.json()\r",
																	"\r",
																	"//Verification\r",
																	"pm.test(\"Status code is 404\", function () {\r",
																	"    pm.response.to.have.status(404)\r",
																	"});\r",
																	"pm.test(\"Params has keys: resmsgid , msgid , err , status , errmsg \", () => {\r",
																	"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid', 'msgid','err','status','errmsg');\r",
																	"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");\r",
																	"  pm.expect(jsonResponse.params.msgid).to.be.a('null');\r",
																	"  pm.expect(jsonResponse.params.err).to.be.a('string');\r",
																	"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");\r",
																	"  pm.expect(jsonResponse.params.errmsg).to.be.a('string');\r",
																	"});\r",
																	"//code name contains a string\r",
																	"tests[\"Status code name has string \\\"Not Found\\\"\"] = responseCode.name.has(\"Not Found\");\r",
																	"\r",
																	"pm.test(\"Test data type of the response and keys\", () => {\r",
																	"  pm.expect(jsonResponse.result).to.be.an(\"object\");\r",
																	"  pm.expect(jsonResponse.result).to.have.all.keys('messages');\r",
																	"  pm.expect(jsonResponse.result.messages).to.be.null;\r",
																	"});\r",
																	"\r",
																	"//Validation\r",
																	"// Response body\r",
																	"pm.test(\"id should be api.content.discard\", () => {\r",
																	"   pm.expect(jsonResponse.id).to.eql(\"api.content.discard\");\r",
																	"});\r",
																	"pm.test(\"ver should be 4.0\", () => {\r",
																	"   pm.expect(jsonResponse.ver).to.eql(\"4.0\");\r",
																	"});\r",
																	"pm.test(\"responseCode should be RESOURCE_NOT_FOUND\", () => {\r",
																	"    pm.expect(jsonResponse.responseCode).to.eql(\"RESOURCE_NOT_FOUND\");\r",
																	"});\r",
																	"\r",
																	"// Params\r",
																	"pm.test(\"params.err should be \\\"NOT_FOUND\\\"\", () => {\r",
																	"    pm.expect(jsonResponse.params.err).to.eql(\"NOT_FOUND\");\r",
																	"});\r",
																	"pm.test(\"params.status should be \\\"failed\\\"\", () => {\r",
																	"    pm.expect(jsonResponse.params.status).to.eql(\"failed\");\r",
																	"});\r",
																	"pm.test(`errmsg: Error! Node(s) doesn't Exists. | [Invalid Node Id.]: ${pm.collectionVariables.get(\"discard_content\")}`, () => {\r",
																	"    pm.expect(jsonResponse.params.errmsg).to.eql(`Error! Node(s) doesn't Exists. | [Invalid Node Id.]: ${pm.collectionVariables.get(\"discard_content\")}`);\r",
																	"});\r",
																	"\r",
																	"// Result\r",
																	"pm.test(\"messages should be null\", () => {\r",
																	"    pm.expect(jsonResponse.result.messages).to.eql(null);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:- \n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) The Registered User ID used to execute the API.",
																"key": "X-Authenticated-User-Token",
																"value": "ea laborum"
															},
															{
																"description": "The unique ID provided to the State to which the user belongs.",
																"key": "X-Channel-id",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/content/v4/discard/{{discard_content}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v4",
																"discard",
																"{{discard_content}}"
															]
														},
														"description": "This API is associated with Discard Content on the Sunbird Platform .\n  - **_/Content/_** endpoint executes the \"Discard Content\" request based on parameters provided as metadata in the request body.\n  - The endpoint for **Discard Content** is `/Content/v2/discard`\n  - It points to knowledge-mw-service - `/v2/Content/discard`\n  - {...}refers to a section of review endpoint URL path that needs to be replaced by appropriate Id.\n  - It is mandatory to provide values for parameters marked with *.\n  - Mandatory fields cannot be null or empty."
													},
													"response": [
														{
															"name": "OK",
															"originalRequest": {
																"method": "DELETE",
																"header": [
																	{
																		"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:- \n  - Application/json",
																		"key": "Content-Type",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) The Registered User ID used to execute the API.",
																		"key": "X-Authenticated-User-Token",
																		"value": "ea laborum"
																	},
																	{
																		"description": "The unique ID provided to the State to which the user belongs.",
																		"key": "X-Channel-id",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																		"key": "Authorization",
																		"value": "ea laborum"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/content/v2/discard/:content_id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"content",
																		"v2",
																		"discard",
																		":content_id"
																	],
																	"variable": [
																		{
																			"key": "content_id",
																			"value": "ea laborum",
																			"description": "(Required) Please append a valid Content Id To the Request URL"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"id\": \"api.content.discard\",\n  \"ver\": \"4.0\",\n  \"ts\": \"2022-01-06T06:41:51ZZ\",\n  \"params\": {\n    \"resmsgid\": \"fc899cd5-958b-40ad-9a5c-6f31b65404b4\",\n    \"status\": \"successful\"\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"identifier\": \"do_1134467341514588161171\",\n    \"message\": \"Draft version of the content with id : do_1134467341514588161171 is discarded\",\n    \"node_id\": \"do_1134467341514588161171\"\n  }\n}"
														}
													]
												},
												{
													"name": "Discard an invalid content",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let jsonResponse = pm.response.json()\r",
																	"\r",
																	"//Verification\r",
																	"pm.test(\"Status code is 404\", function () {\r",
																	"    pm.response.to.have.status(404)\r",
																	"});\r",
																	"pm.test(\"Params has keys: resmsgid , msgid , err , status , errmsg \", () => {\r",
																	"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid', 'msgid','err','status','errmsg');\r",
																	"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");\r",
																	"  pm.expect(jsonResponse.params.msgid).to.be.a('null');\r",
																	"  pm.expect(jsonResponse.params.err).to.be.a('string');\r",
																	"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");\r",
																	"  pm.expect(jsonResponse.params.errmsg).to.be.a('string');\r",
																	"});\r",
																	"//code name contains a string\r",
																	"tests[\"Status code name has string \\\"Not Found\\\"\"] = responseCode.name.has(\"Not Found\");\r",
																	"\r",
																	"pm.test(\"Test data type of the response and keys\", () => {\r",
																	"  pm.expect(jsonResponse.result).to.be.an(\"object\");\r",
																	"  pm.expect(jsonResponse.result).to.have.all.keys('messages');\r",
																	"  pm.expect(jsonResponse.result.messages).to.be.null;\r",
																	"});\r",
																	"\r",
																	"//Validation\r",
																	"// Response body\r",
																	"pm.test(\"id should be api.content.discard\", () => {\r",
																	"   pm.expect(jsonResponse.id).to.eql(\"api.content.discard\");\r",
																	"});\r",
																	"pm.test(\"ver should be 4.0\", () => {\r",
																	"   pm.expect(jsonResponse.ver).to.eql(\"4.0\");\r",
																	"});\r",
																	"pm.test(\"responseCode should be RESOURCE_NOT_FOUND\", () => {\r",
																	"    pm.expect(jsonResponse.responseCode).to.eql(\"RESOURCE_NOT_FOUND\");\r",
																	"});\r",
																	"\r",
																	"// Params\r",
																	"pm.test(\"params.err should be \\\"NOT_FOUND\\\"\", () => {\r",
																	"    pm.expect(jsonResponse.params.err).to.eql(\"NOT_FOUND\");\r",
																	"});\r",
																	"pm.test(\"params.status should be \\\"failed\\\"\", () => {\r",
																	"    pm.expect(jsonResponse.params.status).to.eql(\"failed\");\r",
																	"});\r",
																	"pm.test(`errmsg: Error! Node(s) doesn't Exists. | [Invalid Node Id.]: dummy`, () => {\r",
																	"    pm.expect(jsonResponse.params.errmsg).to.eql(`Error! Node(s) doesn't Exists. | [Invalid Node Id.]: dummy`);\r",
																	"});\r",
																	"\r",
																	"// Result\r",
																	"pm.test(\"messages should be null\", () => {\r",
																	"    pm.expect(jsonResponse.result.messages).to.eql(null);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:- \n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) The Registered User ID used to execute the API.",
																"key": "X-Authenticated-User-Token",
																"value": "ea laborum"
															},
															{
																"description": "The unique ID provided to the State to which the user belongs.",
																"key": "X-Channel-id",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/content/v4/discard/dummy",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v4",
																"discard",
																"dummy"
															]
														},
														"description": "This API is associated with Discard Content on the Sunbird Platform .\n  - **_/Content/_** endpoint executes the \"Discard Content\" request based on parameters provided as metadata in the request body.\n  - The endpoint for **Discard Content** is `/Content/v2/discard`\n  - It points to knowledge-mw-service - `/v2/Content/discard`\n  - {...}refers to a section of review endpoint URL path that needs to be replaced by appropriate Id.\n  - It is mandatory to provide values for parameters marked with *.\n  - Mandatory fields cannot be null or empty."
													},
													"response": [
														{
															"name": "OK",
															"originalRequest": {
																"method": "DELETE",
																"header": [
																	{
																		"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:- \n  - Application/json",
																		"key": "Content-Type",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) The Registered User ID used to execute the API.",
																		"key": "X-Authenticated-User-Token",
																		"value": "ea laborum"
																	},
																	{
																		"description": "The unique ID provided to the State to which the user belongs.",
																		"key": "X-Channel-id",
																		"value": "ea laborum"
																	},
																	{
																		"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																		"key": "Authorization",
																		"value": "ea laborum"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/content/v2/discard/:content_id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"content",
																		"v2",
																		"discard",
																		":content_id"
																	],
																	"variable": [
																		{
																			"key": "content_id",
																			"value": "ea laborum",
																			"description": "(Required) Please append a valid Content Id To the Request URL"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"id\": \"api.content.discard\",\n  \"ver\": \"4.0\",\n  \"ts\": \"2022-01-06T06:41:51ZZ\",\n  \"params\": {\n    \"resmsgid\": \"fc899cd5-958b-40ad-9a5c-6f31b65404b4\",\n    \"status\": \"successful\"\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"identifier\": \"do_1134467341514588161171\",\n    \"message\": \"Draft version of the content with id : do_1134467341514588161171 is discarded\",\n    \"node_id\": \"do_1134467341514588161171\"\n  }\n}"
														}
													]
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "Copy content",
							"item": [
								{
									"name": "Pre requisite",
									"item": [
										{
											"name": "Create Content",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"\r",
															"pm.collectionVariables.set(\"copy_content\", jsonResponse.result.identifier);\r",
															"console.log(pm.collectionVariables.get(\"copy_content\"));\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "{{keycloak_access_token}}"
													},
													{
														"key": "Authorization",
														"value": "{{kong_api_key}}"
													},
													{
														"key": "X-Channel-Id",
														"value": "sunbird"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"name\": \"Untitled Content\",\n            \"code\": \"1242e9ea-660a-4536-a142-cc242a7a4162\",\n            \"mimeType\": \"application/pdf\",\n            \"primaryCategory\": \"Explanation Content\",\n            \"body\": \"{\\\"key\\\":\\\"value\\\"}\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/content/v4/create",
													"host": [
														"{{host}}"
													],
													"path": [
														"content",
														"v4",
														"create"
													]
												},
												"description": "This API is associated with creating content on the Sunbird Platform.\n  - The endpoint for **Create Content** is `/content/v2/create`\n  - It points to knowledge-mw-service - `/v2/content/create`\n  - It is mandatory to provide values for parameters marked with *.\n  - Mandatory fields cannot be null or empty."
											},
											"response": [
												{
													"name": "SUCCESS. The **Create Content** operation was successful!",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) Represents a physical location (e.g: state) uniquely to which the user belongs.",
																"key": "x-channel-id",
																"value": "ea laborum"
															},
															{
																"description": "(Required) Represents the authorized User ID to execute the API.",
																"key": "X-Authenticated-User-Token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"content\": {\n      \"name\": \"H5P Content\",\n      \"code\": \"h5pcontent\",\n      \"mimeType\": \"application/vnd.ekstep.h5p-archive\",\n      \"primaryCategory\": \"Resource\",\n      \"createdBy\": \"874ed8a5-782e-4f6c-8f36-e0288455901e\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"create"
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.content.create\",\n  \"ver\": \"3.0\",\n  \"ts\": \"2020-12-10T20:24:45ZZ\",\n  \"params\": {\n    \"resmsgid\": \"3be02c4b-3324-41a3-afd8-60f6be0584d2\",\n    \"msgid\": null,\n    \"err\": null,\n    \"status\": \"successful\",\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"identifier\": \"do_1131697204035993601314\",\n    \"node_id\": \"do_1131697204035993601314\",\n    \"versionKey\": \"1607631885207\"\n  }\n}"
												},
												{
													"name": "'BAD REQUEST. The **Create Content** operation failed. You may have missed input for a mandatory parameter.'",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) Represents a physical location (e.g: state) uniquely to which the user belongs.",
																"key": "x-channel-id",
																"value": "ea laborum"
															},
															{
																"description": "(Required) Represents the authorized User ID to execute the API.",
																"key": "X-Authenticated-User-Token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"content\": {\n      \"name\": \"H5P Content\",\n      \"code\": \"h5pcontent\",\n      \"mimeType\": \"application/vnd.ekstep.h5p-archive\",\n      \"primaryCategory\": \"Resource\",\n      \"createdBy\": \"874ed8a5-782e-4f6c-8f36-e0288455901e\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"create"
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.content.create\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-10T08:50:29.786Z\",\n  \"params\": {\n    \"resmsgid\": \"c169a7a0-3ac4-11eb-b0a2-8d5c9f561887\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"ERR_CONTENT_CREATE_FIELDS_MISSING\",\n    \"errmsg\": \"Required fields for create content are missing\"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {}\n}"
												},
												{
													"name": "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) Represents a physical location (e.g: state) uniquely to which the user belongs.",
																"key": "x-channel-id",
																"value": "ea laborum"
															},
															{
																"description": "(Required) Represents the authorized User ID to execute the API.",
																"key": "X-Authenticated-User-Token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"content\": {\n      \"name\": \"H5P Content\",\n      \"code\": \"h5pcontent\",\n      \"mimeType\": \"application/vnd.ekstep.h5p-archive\",\n      \"primaryCategory\": \"Resource\",\n      \"createdBy\": \"874ed8a5-782e-4f6c-8f36-e0288455901e\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"create"
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.content.create\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-10T08:51:51.647Z\",\n  \"params\": {\n    \"resmsgid\": \"f234a6f0-3ac4-11eb-b0a2-8d5c9f561887\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": null,\n    \"errmsg\": null\n  },\n  \"responseCode\": \"SERVER_ERROR\",\n  \"result\": {}\n}"
												}
											]
										},
										{
											"name": "Upload URL",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Status code name has string OK\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"id should be api.content.upload.url\", function () {\r",
															"   pm.expect(jsonResponse.id).to.eql(\"api.content.upload.url\");\r",
															"});\r",
															"pm.test(\"ver should be 4.0\", function () {\r",
															"   pm.expect(jsonResponse.ver).to.eql(\"4.0\");\r",
															"});\r",
															"\r",
															"pm.test(\"Params has keys: resmsgid , msgid , err , status , errmsg \", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid', 'msgid','err','status','errmsg');\r",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.params.msgid).to.be.a('null');\r",
															"  pm.expect(jsonResponse.params.err).to.be.a('null');\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a('null');\r",
															"});\r",
															"\r",
															"pm.test(\"Status is successful\", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"successful\");\r",
															"});\r",
															"\r",
															"pm.test(\"ResponseCode is OK\", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"OK\");\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.result).to.have.all.keys('identifier', 'url_expiry', 'pre_signed_url');\r",
															"});\r",
															"pm.collectionVariables.set(\"pre_signed_URL\",jsonResponse.result.pre_signed_url );\r",
															"console.log(pm.collectionVariables.get(\"pre_signed_URL\"));\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "value",
															"value": "<API Key>",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"description": "(Required) The Registered User ID to execute the API.",
														"key": "X-Authenticated-Userid",
														"value": "ea laborum"
													},
													{
														"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
														"key": "Authorization",
														"value": "ea laborum"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"fileName\":\"test.pdf\"\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/content/v4/upload/url/{{copy_content}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"content",
														"v4",
														"upload",
														"url",
														"{{copy_content}}"
													]
												},
												"description": "This API is associated with uploading content on the Sunbird Platform .\n   - The**_/upload/url/{content Id}_** endpoint executes \"Upload Content URL\" request based on parameters provided as metadata in the request body.\n   - The endpoint for **Upload Content URL** is `/content/v2/upload/url`\n  - It points to knowledge-mw-service - `/v2/content/upload/url`\n  - {...}refers to a section of upload endpoint URL path that needs to be replaced by appropriate Id.\n   - You need to provide a valid content Id value in {Content Id} field of API URL.\n   - On Success api returns pre-signed-url link with come configured ttl against which file can be uploaded.\n   - It is mandatory to provide values for parameters marked with *.\n   - Mandatory fields cannot be null or empty."
											},
											"response": [
												{
													"name": "OK ! Successful operation.\"Content upload\" operation was successfully executed.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) The Registered User ID to execute the API.",
																"key": "X-Authenticated-Userid",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"content\": {\n      \"fileName\": \"test.pdf\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/upload/url/:Content_Id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"upload",
																"url",
																":Content_Id"
															],
															"variable": [
																{
																	"key": "Content_Id",
																	"value": "ea laborum",
																	"description": "(Required) Please append a valid Content Id To the Request URL"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.content.upload.url\",\n  \"ver\": \"3.0\",\n  \"ts\": \"2020-12-11T23:52:44ZZ\",\n  \"params\": {\n    \"resmsgid\": \"81e308fa-3e36-45ff-b295-e28e8f757dc7\",\n    \"msgid\": null,\n    \"err\": null,\n    \"status\": \"successful\",\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"identifier\": \"do_11317053041892556811094\",\n    \"url_expiry\": \"54000\",\n    \"pre_signed_url\": \"https://sunbirddev.blob.core.windows.net/sunbird-content-dev/content/assets/do_11317053041892556811094/10-page-pdf.pdf?sv=2017-04-17&se=2020-12-12T14%3A52%3A44Z&sr=b&sp=w&sig=Tlt6uWI/6lMeupkEbsTAmGajmo1qzw8HeUHrVwOm6yk%3D\"\n  }\n}"
												},
												{
													"name": "BAD REQUEST. The 'Upload Url' operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) The Registered User ID to execute the API.",
																"key": "X-Authenticated-Userid",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"content\": {\n      \"fileName\": \"test.pdf\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/upload/url/:Content_Id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"upload",
																"url",
																":Content_Id"
															],
															"variable": [
																{
																	"key": "Content_Id",
																	"value": "ea laborum",
																	"description": "(Required) Please append a valid Content Id To the Request URL"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.content.upload.url\",\n  \"ver\": \"3.0\",\n  \"ts\": \"2020-12-11T23:54:07ZZ\",\n  \"params\": {\n    \"resmsgid\": \"4edde64d-3116-4271-bcc1-a8ba0ec2d56b\",\n    \"msgid\": null,\n    \"err\": \"ERR_CONTENT_BLANK_FILE_NAME\",\n    \"status\": \"failed\",\n    \"errmsg\": \"File name is blank\"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {\n    \"messages\": null\n  }\n}"
												},
												{
													"name": "RESOURCE NOT FOUND,**Content Id sent for generating upload url** operation failed !The possible reason for failure is that you may have provided wrong content id.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) The Registered User ID to execute the API.",
																"key": "X-Authenticated-Userid",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"content\": {\n      \"fileName\": \"test.pdf\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/upload/url/:Content_Id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"upload",
																"url",
																":Content_Id"
															],
															"variable": [
																{
																	"key": "Content_Id",
																	"value": "ea laborum",
																	"description": "(Required) Please append a valid Content Id To the Request URL"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.upload.url\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-11T23:48:26.694Z\",\n  \"params\": {\n    \"resmsgid\": \"5cf72660-3c0b-11eb-b0a2-8d5c9f561887\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"NOT_FOUND\",\n    \"errmsg\": \"Error! Node(s) doesn't Exists. | [Invalid Node Id.]: do_11254577204586086415\"\n  },\n  \"responseCode\": \"RESOURCE_NOT_FOUND\",\n  \"result\": {}\n}"
												},
												{
													"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) The Registered User ID to execute the API.",
																"key": "X-Authenticated-Userid",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"content\": {\n      \"fileName\": \"test.pdf\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/upload/url/:Content_Id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"upload",
																"url",
																":Content_Id"
															],
															"variable": [
																{
																	"key": "Content_Id",
																	"value": "ea laborum",
																	"description": "(Required) Please append a valid Content Id To the Request URL"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"result\": {},\n  \"id\": \"cupidatat reprehenderit dolor\",\n  \"ver\": \"minim anim commodo\",\n  \"ts\": \"commodo\",\n  \"params\": {\n    \"resmsgid\": \"pariatur repre\",\n    \"msgid\": \"irure\",\n    \"err\": \"consequat esse ea\",\n    \"status\": \"esse\",\n    \"errmsg\": \"aliqua laboris velit\"\n  },\n  \"responseCode\": \"reprehenderit dolor elit sunt dolore\"\n}"
												}
											]
										},
										{
											"name": "Upload file to the URL",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"var fullUrl= pm.collectionVariables.get(\"pre_signed_URL\");\r",
															"\r",
															"// Find the index of '?' to get the position of the query parameters\r",
															"var indexOfQuestionMark = fullUrl.indexOf('?');\r",
															"\r",
															"// Extract the partial URL without the query parameters\r",
															"var partialUrl = indexOfQuestionMark !== -1 ? fullUrl.slice(0, indexOfQuestionMark) : fullUrl;\r",
															"pm.collectionVariables.set(\"partial_URL\", partialUrl);\r",
															"// Log the partial URL to the console (you can remove this line if not needed)\r",
															"console.log(pm.collectionVariables.get(\"partial_URL\"));\r",
															"\r",
															"// Now you can use the 'partialUrl' variable in Postman as needed\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Ms-Blob-Type",
														"value": "BlockBlob"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"type": "file",
															"src": "/C:/Users/Qualitrix/Downloads/pdf_233.pdf"
														}
													]
												},
												"url": {
													"raw": "{{pre_signed_URL}}",
													"host": [
														"{{pre_signed_URL}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update the content with URL and mime type",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Status code name has string OK\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"id should be api.content.upload\", function () {\r",
															"   pm.expect(jsonResponse.id).to.eql(\"api.content.upload\");\r",
															"});\r",
															"pm.test(\"ver should be 4.0\", function () {\r",
															"   pm.expect(jsonResponse.ver).to.eql(\"4.0\");\r",
															"});\r",
															"\r",
															"pm.test(\"Params has keys: resmsgid , msgid , err , status , errmsg \", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid', 'msgid','err','status','errmsg');\r",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.params.msgid).to.be.a('null');\r",
															"  pm.expect(jsonResponse.params.err).to.be.a('null');\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a('null');\r",
															"});\r",
															"\r",
															"pm.test(\"Status is successful\", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"successful\");\r",
															"});\r",
															"\r",
															"pm.test(\"ResponseCode is OK\", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test(\"Result has keys: identifier , artifactUrl , content_url , node_id , versionKey \", () => {\r",
															"  pm.expect(jsonResponse.result).to.have.all.keys('identifier', 'artifactUrl','content_url','node_id','versionKey');\r",
															"  pm.expect(jsonResponse.result.identifier).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.result.artifactUrl).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.result.content_url).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.result.node_id).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.result.versionKey).to.be.a(\"string\");\r",
															"});\r",
															"\r",
															"pm.test(`artifactUrl should be: ${pm.collectionVariables.get(\"partial_URL\")}`, function () {\r",
															"    pm.expect(jsonResponse.result.artifactUrl).to.be.equal(`${pm.collectionVariables.get(\"partial_URL\")}`);\r",
															"});\r",
															"\r",
															"pm.test(`content_url should be: ${pm.collectionVariables.get(\"partial_URL\")}`, function () {\r",
															"    pm.expect(jsonResponse.result.content_url).to.be.equal(`${pm.collectionVariables.get(\"partial_URL\")}`);\r",
															"});\r",
															"\r",
															"pm.test(`identifier should be: ${pm.collectionVariables.get(\"copy_content\")}`, function () {\r",
															"    pm.expect(jsonResponse.result.identifier).to.be.equal(`${pm.collectionVariables.get(\"copy_content\")}`);\r",
															"});\r",
															"\r",
															"pm.test(`node_id should be: ${pm.collectionVariables.get(\"copy_content\")}`, function () {\r",
															"    pm.expect(jsonResponse.result.node_id).to.be.equal(`${pm.collectionVariables.get(\"copy_content\")}`);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "user-id",
														"value": "mahesh"
													},
													{
														"key": "Cookie",
														"value": "connect.sid=s%3AnLNdCeYI27WUkZBIFdX1J5MKTM6ISEdJ.SFTq%2FeT2cVLh5TSEWmwZPCekWDSeNXILHPDyziKa26E"
													},
													{
														"key": "X-Channel-Id",
														"value": "0137541424673095687"
													},
													{
														"key": "X-Authenticated-User-token",
														"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6ImFjY2Vzc3YxX2tleTEifQ.eyJhdWQiOiJodHRwczovL2Rldi5zdW5iaXJkZWQub3JnL2F1dGgvcmVhbG1zL3N1bmJpcmQiLCJzdWIiOiJmOjVhOGEzZjJiLTM0MDktNDJlMC05MDAxLWY5MTNiYzBmZGUzMToxNTVjZTNjNS03MTNlLTQ3NDktYmMxYy05NWQwOWM2NDA5MTQiLCJyb2xlcyI6W3sicm9sZSI6IkNPTlRFTlRfQ1JFQVRPUiIsInNjb3BlIjpbeyJvcmdhbmlzYXRpb25JZCI6IjAxMzc1NDE0MjQ2NzMwOTU2ODcifV19LHsicm9sZSI6IkNPVVJTRV9NRU5UT1IiLCJzY29wZSI6W3sib3JnYW5pc2F0aW9uSWQiOiIwMTM3NTQxNDI0NjczMDk1Njg3In1dfSx7InJvbGUiOiJQVUJMSUMiLCJzY29wZSI6W119XSwiaXNzIjoiaHR0cHM6Ly9kZXYuc3VuYmlyZGVkLm9yZy9hdXRoL3JlYWxtcy9zdW5iaXJkIiwibmFtZSI6ImNvbnRlbnRDcmVhdG9yIiwidHlwIjoiQmVhcmVyIiwiZXhwIjoxNzAyMzI0NjU0LCJpYXQiOjE3MDIyODE0NTR9.MxiIhP6YJmI1XbozLNoJeQAbdQKs597f2mlNHWcJ-ZZIXvBx4BcX7T57B5xXGIT6LJ6YlS86saiG6SXHIG5ptgICphdefNysfVgkSUmqTsgzfzvjp2lzIw8Re7xi735Kd7B612y5Tkswm0ETP7NIeQ7-Tc_3h37GV04ISfx0LMD75UvgllxcDz91Bl6N3-WN4KwCeKIfJ-iZj-EJLwoBmJjGsgNCNTn5DTzF_joFcyett__WVc14Ex-BqRSq8Hr2fMVoHpNXze3QUJ7PcD4JRY2Ywg5R9VkHz3mkhY9kI1cWeHdQypeSsM8niQK1XCWJz_aTqsP35MshDnHkWhmDyg"
													},
													{
														"key": "Authorization",
														"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiIzZGNjMzY3OWIwYTE0NmU2YWYyZjlmZDA5NWU5NTlkNCJ9.0NZhX5sqUNy-GZUya90aQFkr5ZNiqfOuELYz_IvoyS8"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "fileUrl",
															"value": "{{partial_URL}}",
															"type": "text"
														},
														{
															"key": "mimeType",
															"value": "application/pdf",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{host}}/content/v4/upload/{{copy_content}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"content",
														"v4",
														"upload",
														"{{copy_content}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Submit for Review",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Status code name has string OK\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"id should be api.content.review\", function () {\r",
															"   pm.expect(jsonResponse.id).to.eql(\"api.content.review\");\r",
															"});\r",
															"pm.test(\"ver should be 4.0\", function () {\r",
															"   pm.expect(jsonResponse.ver).to.eql(\"4.0\");\r",
															"});\r",
															"\r",
															"pm.test(\"Params has keys: resmsgid , msgid , err , status , errmsg \", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid', 'msgid','err','status','errmsg');\r",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.params.msgid).to.be.a('null');\r",
															"  pm.expect(jsonResponse.params.err).to.be.a('null');\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a('null');\r",
															"});\r",
															"\r",
															"pm.test(\"Status is successful\", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"successful\");\r",
															"});\r",
															"\r",
															"pm.test(\"ResponseCode is OK\", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"OK\");\r",
															"});\r",
															"pm.test(\"Result has keys: identifier , versionKey\", () => {\r",
															"  pm.expect(jsonResponse.result).to.have.all.keys('identifier','versionKey');\r",
															"  pm.expect(jsonResponse.result.identifier).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.result.versionKey).to.be.a(\"string\");\r",
															"});\r",
															"\r",
															"pm.test(`identifier should be: ${pm.collectionVariables.get(\"copy_content\")}`, function () {\r",
															"    pm.expect(jsonResponse.result.identifier).to.be.equal(`${pm.collectionVariables.get(\"copy_content\")}`);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{auth_token}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"description": "(Required) The Registered User ID to execute the API.",
														"key": "X-Authenticated-User-token",
														"value": "ea laborum"
													},
													{
														"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
														"key": "Authorization",
														"value": "ea laborum"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/content/v4/review/{{copy_content}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"content",
														"v4",
														"review",
														"{{copy_content}}"
													]
												},
												"description": ">- This API is associated with Submission of content for Review  on the Sunbird Platform .\n  - The**_/review/{content Id}_** endpoint executes \"Submit for Review\" request based on parameters provided as metadata in the request body.\n  - The endpoint for **Review Content** is `/content/v2/review`\n  - It points to knowledge-mw-service - `/v2/content/review`\n  - {...}refers to a section of review endpoint URL path that needs to be replaced by appropriate Id.\n  - You need to provide a valid content Id value in {Content Id} field of API URL.\n  - It is mandatory to provide values for parameters marked with *.\n  - Mandatory fields cannot be null or empty."
											},
											"response": [
												{
													"name": "OK ! Successful operation.Content sent for review operation was successfully executed.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) The Registered User ID to execute the API.",
																"key": "X-Authenticated-User-token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/review/:Content_Id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"review",
																":Content_Id"
															],
															"variable": [
																{
																	"key": "Content_Id",
																	"value": "ea laborum",
																	"description": "(Required) Please append a valid Content Id To the Request URL"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"ekstep.learning.content.review\",\n  \"ver\": \"3.0\",\n  \"ts\": \"2020-12-10T21:06:26ZZ\",\n  \"params\": {\n    \"resmsgid\": \"186cf9a9-8094-4cdd-926f-b77a030921d1\",\n    \"msgid\": null,\n    \"err\": null,\n    \"status\": \"successful\",\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"node_id\": \"do_1131697376667402241315\",\n    \"versionKey\": \"1607634386533\"\n  }\n}"
												},
												{
													"name": "RESOURCE NOT FOUND,**Content Send for Review** operation failed !The possible reason for failure is that you may have provided wrong content id.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) The Registered User ID to execute the API.",
																"key": "X-Authenticated-User-token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/review/:Content_Id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"review",
																":Content_Id"
															],
															"variable": [
																{
																	"key": "Content_Id",
																	"value": "ea laborum",
																	"description": "(Required) Please append a valid Content Id To the Request URL"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"ekstep.learning.content.review\",\n  \"ver\": \"3.0\",\n  \"ts\": \"2020-12-10T21:06:54ZZ\",\n  \"params\": {\n    \"resmsgid\": \"944ac944-78d9-43e2-bfd5-337ab52b6552\",\n    \"msgid\": null,\n    \"err\": \"ERR_TAXONOMY_INVALID_CONTENT\",\n    \"status\": \"failed\",\n    \"errmsg\": \"Error! While Fetching the Content for Operation | [Content Id: do_11316973766674022413151]\"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {}\n}"
												},
												{
													"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! We track these errors automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) The Registered User ID to execute the API.",
																"key": "X-Authenticated-User-token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/review/:Content_Id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"review",
																":Content_Id"
															],
															"variable": [
																{
																	"key": "Content_Id",
																	"value": "ea laborum",
																	"description": "(Required) Please append a valid Content Id To the Request URL"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"result\": {},\n  \"id\": \"cupidatat reprehenderit dolor\",\n  \"ver\": \"minim anim commodo\",\n  \"ts\": \"commodo\",\n  \"params\": {\n    \"resmsgid\": \"pariatur repre\",\n    \"msgid\": \"irure\",\n    \"err\": \"consequat esse ea\",\n    \"status\": \"esse\",\n    \"errmsg\": \"aliqua laboris velit\"\n  },\n  \"responseCode\": \"reprehenderit dolor elit sunt dolore\"\n}"
												}
											]
										},
										{
											"name": "Publish Content",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"id has string - api.content.publish.public \", function () {\r",
															"    pm.expect(jsonResponse.id).to.be.equal(\"api.content.publish.public\");\r",
															"});\r",
															"\r",
															"pm.test(\"Version is 4.0 \", function () {\r",
															"    pm.expect(jsonResponse.ver).to.be.equal(\"4.0\");\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','status', 'err','errmsg');\r",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.params.msgid).to.be.a(\"null\"); \r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"null\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status is successful \", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"successful\");\r",
															"});\r",
															"\r",
															"pm.test(\"ResponseCode is OK \", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.result).to.have.all.keys('publishStatus','node_id');\r",
															"  pm.expect(jsonResponse.result.publishStatus).to.be.a('String');\r",
															"  pm.expect(jsonResponse.result.node_id).to.be.a('String');\r",
															"});\r",
															"\r",
															"pm.test(\"node should be equal to \" + pm.collectionVariables.get(\"copy_content\"), () => {\r",
															"    pm.expect(jsonResponse.result.node_id).to.eql(pm.collectionVariables.get(\"copy_content\"));\r",
															"});\r",
															"pm.test(`publishStatus should be equal to Publish Event for Content Id ${pm.collectionVariables.get(\"copy_content\")} is pushed Successfully!`, () => {\r",
															"    pm.expect(jsonResponse.result.publishStatus).to.eql(`Publish Event for Content Id '${pm.collectionVariables.get(\"copy_content\")}' is pushed Successfully!`);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "value",
															"value": "<API Key>",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json\n  - Multipart/form-data\n  - Application/x-www-form-urlencoded",
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"description": "(Required) User Registered ID , which is used for logging In",
														"key": "X-Authenticated-User-token",
														"value": "ea laborum"
													},
													{
														"description": "(Required) Authorizing user in order to grant access.",
														"key": "Authorization",
														"value": "ea laborum"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"request\": {\n    \"content\": {\n        \"Publisher\": \"sunbird.publisher.create\",\n      \"lastPublishedBy\": \"Ekstep\"\n    }\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/content/v4/publish/{{copy_content}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"content",
														"v4",
														"publish",
														"{{copy_content}}"
													]
												},
												"description": "This API is associated with publishing content on the Sunbird Platform .\n  - **_/publish/_** endpoint executes the \"Publish Content\" request based on parameters provided as metadata in the request body.\n  - The endpoint for **Publish Content** is `/content/v1/publish`\n  - It points to knowledge-mw-service - `/v2/content/publish`\n  -  {...}refers to a section of review endpoint URL path that needs to be replaced by appropriate Id.\n  - It is mandatory to provide values for parameters marked with *.\n  - Mandatory fields cannot be null or empty."
											},
											"response": [
												{
													"name": "OK ! Successful operation.**Content publish operation was successfully executed.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json\n  - Multipart/form-data\n  - Application/x-www-form-urlencoded",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) User Registered ID , which is used for logging In",
																"key": "X-Authenticated-User-token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) Authorizing user in order to grant access.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"content\": {\n      \"lastPublishedBy\": \"Ekstep\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v1/publish/:Content_Id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v1",
																"publish",
																":Content_Id"
															],
															"variable": [
																{
																	"key": "Content_Id",
																	"value": "ea laborum",
																	"description": "(Required) Content Id to be published"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.v3.publish\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-10T21:41:23.491Z\",\n  \"params\": {\n    \"resmsgid\": \"72c4ef30-3b30-11eb-b0a2-8d5c9f561887\",\n    \"msgid\": \"72979da0-3b30-11eb-b0a2-8d5c9f561887\",\n    \"status\": \"successful\",\n    \"err\": null,\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"content_id\": \"do_21316975736724684813479\",\n    \"publishStatus\": \"Publish Operation for Content Id 'do_21316975736724684813479' Started Successfully!\"\n  }\n}"
												},
												{
													"name": "RESOURCE NOT FOUND,**Content Send for Review** operation failed !The possible reason for failure is that you may have provided wrong content id.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json\n  - Multipart/form-data\n  - Application/x-www-form-urlencoded",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) User Registered ID , which is used for logging In",
																"key": "X-Authenticated-User-token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) Authorizing user in order to grant access.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"content\": {\n      \"lastPublishedBy\": \"Ekstep\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v1/publish/:Content_Id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v1",
																"publish",
																":Content_Id"
															],
															"variable": [
																{
																	"key": "Content_Id",
																	"value": "ea laborum",
																	"description": "(Required) Content Id to be published"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.v3.publish\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-10T21:51:39.870Z\",\n  \"params\": {\n    \"resmsgid\": \"e228e7e0-3b31-11eb-b0a2-8d5c9f561887\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"NOT_FOUND\",\n    \"errmsg\": \"Error! Node(s) doesn't Exists. | [Invalid Node Id.]: do_213169757367246848134791\"\n  },\n  \"responseCode\": \"RESOURCE_NOT_FOUND\",\n  \"result\": {}\n}"
												},
												{
													"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! We track these errors automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json\n  - Multipart/form-data\n  - Application/x-www-form-urlencoded",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) User Registered ID , which is used for logging In",
																"key": "X-Authenticated-User-token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) Authorizing user in order to grant access.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"content\": {\n      \"lastPublishedBy\": \"Ekstep\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v1/publish/:Content_Id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v1",
																"publish",
																":Content_Id"
															],
															"variable": [
																{
																	"key": "Content_Id",
																	"value": "ea laborum",
																	"description": "(Required) Content Id to be published"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"result\": {},\n  \"id\": \"cupidatat reprehenderit dolor\",\n  \"ver\": \"minim anim commodo\",\n  \"ts\": \"commodo\",\n  \"params\": {\n    \"resmsgid\": \"pariatur repre\",\n    \"msgid\": \"irure\",\n    \"err\": \"consequat esse ea\",\n    \"status\": \"esse\",\n    \"errmsg\": \"aliqua laboris velit\"\n  },\n  \"responseCode\": \"reprehenderit dolor elit sunt dolore\"\n}"
												}
											]
										}
									]
								},
								{
									"name": "Positive",
									"item": [
										{
											"name": "Copy Valid Content",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Status code name has string OK\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"pm.test(\"id should be api.content.copy\", function () {\r",
															"   pm.expect(jsonResponse.id).to.eql(\"api.content.copy\");\r",
															"});\r",
															"pm.test(\"ver should be 4.0\", function () {\r",
															"   pm.expect(jsonResponse.ver).to.eql(\"4.0\");\r",
															"});\r",
															"\r",
															"pm.test(\"Params has keys: resmsgid , msgid , err , status , errmsg \", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid', 'msgid','err','status','errmsg');\r",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.params.msgid).to.be.a('null');\r",
															"  pm.expect(jsonResponse.params.err).to.be.a('null');\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a('null');\r",
															"});\r",
															"\r",
															"pm.test(\"Status is successful\", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"successful\");\r",
															"});\r",
															"\r",
															"pm.test(\"ResponseCode is OK\", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"OK\");\r",
															"});\r",
															"pm.test(\"Result has keys: identifier , node_id , versionKey\", () => {\r",
															"  pm.expect(jsonResponse.result).to.have.all.keys('node_id','versionKey');\r",
															"  pm.expect(jsonResponse.result.versionKey).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.result.node_id).to.be.a('object');\r",
															"});\r",
															"pm.test(\r",
															"  // Check if \"node_id\" has exactly one key-value pair\r",
															"  pm.expect(Object.keys(jsonResponse.result.node_id)).to.have.length(1)\r",
															");\r",
															"// Get the key and value from \"node_id\"\r",
															"var nodeIdKey = Object.keys(jsonResponse.result.node_id)[0];\r",
															"var nodeIdValue = jsonResponse.result.node_id[nodeIdKey];\r",
															"pm.test(\r",
															"  // Validate the key and value format\r",
															"  pm.expect(nodeIdKey).to.match(/^do_\\d+$/) // Match the format \"do_\" followed by digits\r",
															");\r",
															"pm.test(\r",
															"  pm.expect(nodeIdValue).to.match(/^do_\\d+$/) // Match the format \"do_\" followed by digits\r",
															");\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "value",
															"value": "<API Key>",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"description": "(Required) The Registered User ID to execute the API.",
														"key": "X-Authenticated-User-token",
														"value": "ea laborum"
													},
													{
														"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
														"key": "Authorization",
														"value": "ea laborum"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"mimeType\": \"application/pdf\",\n            \"objectType\": \"Content\",\n            \"createdBy\": \"user1\",\n            \n            \"createdFor\": [\n                \"user2\"\n            ],\n            \"organisation\": [\n                \"sunbird\"\n            ],\n            \"framework\": \"NCF\"\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/content/v4/copy/{{copy_content}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"content",
														"v4",
														"copy",
														"{{copy_content}}"
													]
												},
												"description": "This API is associated with copying a content on the Sunbird Platform .\n  - The **_/copy/_**endpoint executes request for copy content, if content is found appropriate.\n  - The endpoint for **Copy Content** is `/content/v2/copy`\n  - It points to knowledge-mw-service - `/v2/content/copy`\n  - It is mandatory to provide values for parameters marked with *.\n  - Mandatory fields cannot be null or empty."
											},
											"response": [
												{
													"name": "OK ! Successful operation.\"Copy\" operation was successfully executed.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) The Registered User ID to execute the API.",
																"key": "X-Authenticated-User-token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"content\": {\n      \"createdBy\": \"user1\",\n      \"createdFor\": [\n        \"user2\"\n      ],\n      \"organisation\": [\n        \"sunbird\"\n      ],\n      \"framework\": \"NCF\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/copy/:Content_Id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"copy",
																":Content_Id"
															],
															"variable": [
																{
																	"key": "Content_Id",
																	"value": "ea laborum",
																	"description": "(Required) Please append a valid Content Id To the Request URL"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.content.copy\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-11T23:28:25.343Z\",\n  \"params\": {\n    \"resmsgid\": \"90e788f0-3c08-11eb-b0a2-8d5c9f561887\",\n    \"msgid\": \"90b3f5d0-3c08-11eb-b0a2-8d5c9f561887\",\n    \"status\": \"successful\",\n    \"err\": null,\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"node_id\": {\n      \"do_21316884557433241613378\": \"do_21317051846683852813814\"\n    },\n    \"versionKey\": \"1607729305036\"\n  }\n}"
												},
												{
													"name": "BAD REQUEST. The \"Copy Content\" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) The Registered User ID to execute the API.",
																"key": "X-Authenticated-User-token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"content\": {\n      \"createdBy\": \"user1\",\n      \"createdFor\": [\n        \"user2\"\n      ],\n      \"organisation\": [\n        \"sunbird\"\n      ],\n      \"framework\": \"NCF\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/copy/:Content_Id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"copy",
																":Content_Id"
															],
															"variable": [
																{
																	"key": "Content_Id",
																	"value": "ea laborum",
																	"description": "(Required) Please append a valid Content Id To the Request URL"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.content.copy\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-11T23:27:31.708Z\",\n  \"params\": {\n    \"resmsgid\": \"70ef7bc0-3c08-11eb-b0a2-8d5c9f561887\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"ERR_INVALID_REQUEST\",\n    \"errmsg\": \"Please provide valid value for List(createdBy, createdFor, organisation, framework)\"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {\n    \"messages\": null\n  }\n}"
												},
												{
													"name": "RESOURCE NOT FOUND,**Content Send for Copy** operation failed !The possible reason for failure is that you may have provided wrong content id.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) The Registered User ID to execute the API.",
																"key": "X-Authenticated-User-token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"content\": {\n      \"createdBy\": \"user1\",\n      \"createdFor\": [\n        \"user2\"\n      ],\n      \"organisation\": [\n        \"sunbird\"\n      ],\n      \"framework\": \"NCF\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/copy/:Content_Id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"copy",
																":Content_Id"
															],
															"variable": [
																{
																	"key": "Content_Id",
																	"value": "ea laborum",
																	"description": "(Required) Please append a valid Content Id To the Request URL"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.content.copy\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-11T23:28:36.863Z\",\n  \"params\": {\n    \"resmsgid\": \"97c558f0-3c08-11eb-b0a2-8d5c9f561887\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"NOT_FOUND\",\n    \"errmsg\": \"Error! Node(s) doesn't Exists. | [Invalid Node Id.]: do_213168845574332416133781\"\n  },\n  \"responseCode\": \"RESOURCE_NOT_FOUND\",\n  \"result\": {\n    \"messages\": null\n  }\n}"
												},
												{
													"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) The Registered User ID to execute the API.",
																"key": "X-Authenticated-User-token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"content\": {\n      \"createdBy\": \"user1\",\n      \"createdFor\": [\n        \"user2\"\n      ],\n      \"organisation\": [\n        \"sunbird\"\n      ],\n      \"framework\": \"NCF\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/copy/:Content_Id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"copy",
																":Content_Id"
															],
															"variable": [
																{
																	"key": "Content_Id",
																	"value": "ea laborum",
																	"description": "(Required) Please append a valid Content Id To the Request URL"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"result\": {},\n  \"id\": \"cupidatat reprehenderit dolor\",\n  \"ver\": \"minim anim commodo\",\n  \"ts\": \"commodo\",\n  \"params\": {\n    \"resmsgid\": \"pariatur repre\",\n    \"msgid\": \"irure\",\n    \"err\": \"consequat esse ea\",\n    \"status\": \"esse\",\n    \"errmsg\": \"aliqua laboris velit\"\n  },\n  \"responseCode\": \"reprehenderit dolor elit sunt dolore\"\n}"
												}
											]
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Copy invalid Content",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"//Verification\r",
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404)\r",
															"});\r",
															"pm.test(\"Params has keys: resmsgid , msgid , err , status , errmsg \", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid', 'msgid','err','status','errmsg');\r",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.params.msgid).to.be.a('null');\r",
															"  pm.expect(jsonResponse.params.err).to.be.a('string');\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a('string');\r",
															"});\r",
															"//code name contains a string\r",
															"tests[\"Status code name has string \\\"Not Found\\\"\"] = responseCode.name.has(\"Not Found\");\r",
															"\r",
															"pm.test(\"Test data type of the response and keys\", () => {\r",
															"  pm.expect(jsonResponse.result).to.be.an(\"object\");\r",
															"  pm.expect(jsonResponse.result).to.have.all.keys('messages');\r",
															"  pm.expect(jsonResponse.result.messages).to.be.null;\r",
															"});\r",
															"\r",
															"//Validation\r",
															"// Response body\r",
															"pm.test(\"id should be api.content.copy\", () => {\r",
															"   pm.expect(jsonResponse.id).to.eql(\"api.content.copy\");\r",
															"});\r",
															"pm.test(\"ver should be 4.0\", () => {\r",
															"   pm.expect(jsonResponse.ver).to.eql(\"4.0\");\r",
															"});\r",
															"pm.test(\"responseCode should be RESOURCE_NOT_FOUND\", () => {\r",
															"    pm.expect(jsonResponse.responseCode).to.eql(\"RESOURCE_NOT_FOUND\");\r",
															"});\r",
															"\r",
															"// Params\r",
															"pm.test(\"params.err should be \\\"NOT_FOUND\\\"\", () => {\r",
															"    pm.expect(jsonResponse.params.err).to.eql(\"NOT_FOUND\");\r",
															"});\r",
															"pm.test(\"params.status should be \\\"failed\\\"\", () => {\r",
															"    pm.expect(jsonResponse.params.status).to.eql(\"failed\");\r",
															"});\r",
															"pm.test(`errmsg: Error! Node(s) doesn't Exists. | [Invalid Node Id.]: dummy`, () => {\r",
															"    pm.expect(jsonResponse.params.errmsg).to.eql(`Error! Node(s) doesn't Exists. | [Invalid Node Id.]: dummy`);\r",
															"});\r",
															"\r",
															"// Result\r",
															"pm.test(\"messages should be null\", () => {\r",
															"    pm.expect(jsonResponse.result.messages).to.eql(null);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "value",
															"value": "<API Key>",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"description": "(Required) The Registered User ID to execute the API.",
														"key": "X-Authenticated-User-token",
														"value": "ea laborum"
													},
													{
														"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
														"key": "Authorization",
														"value": "ea laborum"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": {\n            \"mimeType\": \"application/pdf\",\n            \"objectType\": \"Content\",\n            \"createdBy\": \"user1\",\n            \n            \"createdFor\": [\n                \"user2\"\n            ],\n            \"organisation\": [\n                \"sunbird\"\n            ],\n            \"framework\": \"NCF\"\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/content/v4/copy/dummy",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"content",
														"v4",
														"copy",
														"dummy"
													]
												},
												"description": "This API is associated with copying a content on the Sunbird Platform .\n  - The **_/copy/_**endpoint executes request for copy content, if content is found appropriate.\n  - The endpoint for **Copy Content** is `/content/v2/copy`\n  - It points to knowledge-mw-service - `/v2/content/copy`\n  - It is mandatory to provide values for parameters marked with *.\n  - Mandatory fields cannot be null or empty."
											},
											"response": [
												{
													"name": "OK ! Successful operation.\"Copy\" operation was successfully executed.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) The Registered User ID to execute the API.",
																"key": "X-Authenticated-User-token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"content\": {\n      \"createdBy\": \"user1\",\n      \"createdFor\": [\n        \"user2\"\n      ],\n      \"organisation\": [\n        \"sunbird\"\n      ],\n      \"framework\": \"NCF\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/copy/:Content_Id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"copy",
																":Content_Id"
															],
															"variable": [
																{
																	"key": "Content_Id",
																	"value": "ea laborum",
																	"description": "(Required) Please append a valid Content Id To the Request URL"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.content.copy\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-11T23:28:25.343Z\",\n  \"params\": {\n    \"resmsgid\": \"90e788f0-3c08-11eb-b0a2-8d5c9f561887\",\n    \"msgid\": \"90b3f5d0-3c08-11eb-b0a2-8d5c9f561887\",\n    \"status\": \"successful\",\n    \"err\": null,\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"node_id\": {\n      \"do_21316884557433241613378\": \"do_21317051846683852813814\"\n    },\n    \"versionKey\": \"1607729305036\"\n  }\n}"
												},
												{
													"name": "BAD REQUEST. The \"Copy Content\" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) The Registered User ID to execute the API.",
																"key": "X-Authenticated-User-token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"content\": {\n      \"createdBy\": \"user1\",\n      \"createdFor\": [\n        \"user2\"\n      ],\n      \"organisation\": [\n        \"sunbird\"\n      ],\n      \"framework\": \"NCF\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/copy/:Content_Id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"copy",
																":Content_Id"
															],
															"variable": [
																{
																	"key": "Content_Id",
																	"value": "ea laborum",
																	"description": "(Required) Please append a valid Content Id To the Request URL"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.content.copy\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-11T23:27:31.708Z\",\n  \"params\": {\n    \"resmsgid\": \"70ef7bc0-3c08-11eb-b0a2-8d5c9f561887\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"ERR_INVALID_REQUEST\",\n    \"errmsg\": \"Please provide valid value for List(createdBy, createdFor, organisation, framework)\"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {\n    \"messages\": null\n  }\n}"
												},
												{
													"name": "RESOURCE NOT FOUND,**Content Send for Copy** operation failed !The possible reason for failure is that you may have provided wrong content id.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) The Registered User ID to execute the API.",
																"key": "X-Authenticated-User-token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"content\": {\n      \"createdBy\": \"user1\",\n      \"createdFor\": [\n        \"user2\"\n      ],\n      \"organisation\": [\n        \"sunbird\"\n      ],\n      \"framework\": \"NCF\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/copy/:Content_Id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"copy",
																":Content_Id"
															],
															"variable": [
																{
																	"key": "Content_Id",
																	"value": "ea laborum",
																	"description": "(Required) Please append a valid Content Id To the Request URL"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.content.copy\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-11T23:28:36.863Z\",\n  \"params\": {\n    \"resmsgid\": \"97c558f0-3c08-11eb-b0a2-8d5c9f561887\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"NOT_FOUND\",\n    \"errmsg\": \"Error! Node(s) doesn't Exists. | [Invalid Node Id.]: do_213168845574332416133781\"\n  },\n  \"responseCode\": \"RESOURCE_NOT_FOUND\",\n  \"result\": {\n    \"messages\": null\n  }\n}"
												},
												{
													"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) The Registered User ID to execute the API.",
																"key": "X-Authenticated-User-token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"content\": {\n      \"createdBy\": \"user1\",\n      \"createdFor\": [\n        \"user2\"\n      ],\n      \"organisation\": [\n        \"sunbird\"\n      ],\n      \"framework\": \"NCF\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/copy/:Content_Id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"copy",
																":Content_Id"
															],
															"variable": [
																{
																	"key": "Content_Id",
																	"value": "ea laborum",
																	"description": "(Required) Please append a valid Content Id To the Request URL"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"result\": {},\n  \"id\": \"cupidatat reprehenderit dolor\",\n  \"ver\": \"minim anim commodo\",\n  \"ts\": \"commodo\",\n  \"params\": {\n    \"resmsgid\": \"pariatur repre\",\n    \"msgid\": \"irure\",\n    \"err\": \"consequat esse ea\",\n    \"status\": \"esse\",\n    \"errmsg\": \"aliqua laboris velit\"\n  },\n  \"responseCode\": \"reprehenderit dolor elit sunt dolore\"\n}"
												}
											]
										},
										{
											"name": "Copy Valid Content with missing fields",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"//Verification\r",
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400)\r",
															"});\r",
															"pm.test(\"Params has keys: resmsgid , msgid , err , status , errmsg \", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid', 'msgid','err','status','errmsg');\r",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.params.msgid).to.be.a('null');\r",
															"  pm.expect(jsonResponse.params.err).to.be.a('string');\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a('string');\r",
															"});\r",
															"//code name contains a string\r",
															"tests[\"Status code name has string \\\"Bad Request\\\"\"] = responseCode.name.has(\"Bad Request\");\r",
															"\r",
															"pm.test(\"Test data type of the response and keys\", () => {\r",
															"  pm.expect(jsonResponse.result).to.be.an(\"object\");\r",
															"  pm.expect(jsonResponse.result).to.have.all.keys('messages');\r",
															"  pm.expect(jsonResponse.result.messages).to.be.null;\r",
															"});\r",
															"\r",
															"//Validation\r",
															"// Response body\r",
															"pm.test(\"id should be api.content.copy\", function () {\r",
															"   pm.expect(jsonResponse.id).to.eql(\"api.content.copy\");\r",
															"});\r",
															"pm.test(\"ver should be 4.0\", () => {\r",
															"   pm.expect(jsonResponse.ver).to.eql(\"4.0\");\r",
															"});\r",
															"pm.test(\"responseCode should be CLIENT_ERROR\", () => {\r",
															"    pm.expect(jsonResponse.responseCode).to.eql(\"CLIENT_ERROR\");\r",
															"});\r",
															"\r",
															"// Params\r",
															"pm.test(`params.err should be \\\"ERR_INVALID_REQUEST\\\"`, () => {\r",
															"    pm.expect(jsonResponse.params.err).to.eql(\"ERR_INVALID_REQUEST\");\r",
															"});\r",
															"pm.test(\"params.status should be \\\"failed\\\"\", () => {\r",
															"    pm.expect(jsonResponse.params.status).to.eql(\"failed\");\r",
															"});\r",
															"pm.test(`errmsg: Please provide valid value for List(createdBy, createdFor, organisation, framework)`, () => {\r",
															"    pm.expect(jsonResponse.params.errmsg).to.eql(`Please provide valid value for List(createdBy, createdFor, organisation, framework)`);\r",
															"});\r",
															"\r",
															"// Result\r",
															"pm.test(\"messages should be null\", () => {\r",
															"    pm.expect(jsonResponse.result.messages).to.eql(null);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "value",
															"value": "<API Key>",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"description": "(Required) The Registered User ID to execute the API.",
														"key": "X-Authenticated-User-token",
														"value": "ea laborum"
													},
													{
														"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
														"key": "Authorization",
														"value": "ea laborum"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {}\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/content/v4/copy/{{copy_content}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"content",
														"v4",
														"copy",
														"{{copy_content}}"
													]
												},
												"description": "This API is associated with copying a content on the Sunbird Platform .\n  - The **_/copy/_**endpoint executes request for copy content, if content is found appropriate.\n  - The endpoint for **Copy Content** is `/content/v2/copy`\n  - It points to knowledge-mw-service - `/v2/content/copy`\n  - It is mandatory to provide values for parameters marked with *.\n  - Mandatory fields cannot be null or empty."
											},
											"response": [
												{
													"name": "OK ! Successful operation.\"Copy\" operation was successfully executed.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) The Registered User ID to execute the API.",
																"key": "X-Authenticated-User-token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"content\": {\n      \"createdBy\": \"user1\",\n      \"createdFor\": [\n        \"user2\"\n      ],\n      \"organisation\": [\n        \"sunbird\"\n      ],\n      \"framework\": \"NCF\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/copy/:Content_Id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"copy",
																":Content_Id"
															],
															"variable": [
																{
																	"key": "Content_Id",
																	"value": "ea laborum",
																	"description": "(Required) Please append a valid Content Id To the Request URL"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.content.copy\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-11T23:28:25.343Z\",\n  \"params\": {\n    \"resmsgid\": \"90e788f0-3c08-11eb-b0a2-8d5c9f561887\",\n    \"msgid\": \"90b3f5d0-3c08-11eb-b0a2-8d5c9f561887\",\n    \"status\": \"successful\",\n    \"err\": null,\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"node_id\": {\n      \"do_21316884557433241613378\": \"do_21317051846683852813814\"\n    },\n    \"versionKey\": \"1607729305036\"\n  }\n}"
												},
												{
													"name": "BAD REQUEST. The \"Copy Content\" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) The Registered User ID to execute the API.",
																"key": "X-Authenticated-User-token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"content\": {\n      \"createdBy\": \"user1\",\n      \"createdFor\": [\n        \"user2\"\n      ],\n      \"organisation\": [\n        \"sunbird\"\n      ],\n      \"framework\": \"NCF\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/copy/:Content_Id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"copy",
																":Content_Id"
															],
															"variable": [
																{
																	"key": "Content_Id",
																	"value": "ea laborum",
																	"description": "(Required) Please append a valid Content Id To the Request URL"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.content.copy\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-11T23:27:31.708Z\",\n  \"params\": {\n    \"resmsgid\": \"70ef7bc0-3c08-11eb-b0a2-8d5c9f561887\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"ERR_INVALID_REQUEST\",\n    \"errmsg\": \"Please provide valid value for List(createdBy, createdFor, organisation, framework)\"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {\n    \"messages\": null\n  }\n}"
												},
												{
													"name": "RESOURCE NOT FOUND,**Content Send for Copy** operation failed !The possible reason for failure is that you may have provided wrong content id.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) The Registered User ID to execute the API.",
																"key": "X-Authenticated-User-token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"content\": {\n      \"createdBy\": \"user1\",\n      \"createdFor\": [\n        \"user2\"\n      ],\n      \"organisation\": [\n        \"sunbird\"\n      ],\n      \"framework\": \"NCF\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/copy/:Content_Id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"copy",
																":Content_Id"
															],
															"variable": [
																{
																	"key": "Content_Id",
																	"value": "ea laborum",
																	"description": "(Required) Please append a valid Content Id To the Request URL"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.content.copy\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-11T23:28:36.863Z\",\n  \"params\": {\n    \"resmsgid\": \"97c558f0-3c08-11eb-b0a2-8d5c9f561887\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"NOT_FOUND\",\n    \"errmsg\": \"Error! Node(s) doesn't Exists. | [Invalid Node Id.]: do_213168845574332416133781\"\n  },\n  \"responseCode\": \"RESOURCE_NOT_FOUND\",\n  \"result\": {\n    \"messages\": null\n  }\n}"
												},
												{
													"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) The Registered User ID to execute the API.",
																"key": "X-Authenticated-User-token",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"content\": {\n      \"createdBy\": \"user1\",\n      \"createdFor\": [\n        \"user2\"\n      ],\n      \"organisation\": [\n        \"sunbird\"\n      ],\n      \"framework\": \"NCF\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/copy/:Content_Id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"copy",
																":Content_Id"
															],
															"variable": [
																{
																	"key": "Content_Id",
																	"value": "ea laborum",
																	"description": "(Required) Please append a valid Content Id To the Request URL"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"result\": {},\n  \"id\": \"cupidatat reprehenderit dolor\",\n  \"ver\": \"minim anim commodo\",\n  \"ts\": \"commodo\",\n  \"params\": {\n    \"resmsgid\": \"pariatur repre\",\n    \"msgid\": \"irure\",\n    \"err\": \"consequat esse ea\",\n    \"status\": \"esse\",\n    \"errmsg\": \"aliqua laboris velit\"\n  },\n  \"responseCode\": \"reprehenderit dolor elit sunt dolore\"\n}"
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "Import Content",
							"item": [
								{
									"name": "Pre requisite",
									"item": []
								},
								{
									"name": "Positive",
									"item": [
										{
											"name": "Import Valid Content",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"id has string - api.content.import\", function () {\r",
															"    pm.expect(jsonResponse.id).to.be.equal(\"api.content.import\");\r",
															"});\r",
															"\r",
															"pm.test(\"Version is 4.0 \", function () {\r",
															"    pm.expect(jsonResponse.ver).to.be.equal(\"4.0\");\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid','msgid','status', 'err','errmsg');\r",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.params.msgid).to.be.a(\"null\"); \r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.params.err).to.be.a(\"null\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"null\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status is successful \", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"successful\");\r",
															"});\r",
															"\r",
															"pm.test(\"ResponseCode is OK \", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test(\"Verify keys and data type of the response result\", () => {\r",
															"  pm.expect(jsonResponse.result).to.have.all.keys('processId');\r",
															"  pm.expect(jsonResponse.result.processId).to.be.a('String');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-Authenticated-User-token",
														"value": ""
													},
													{
														"key": "Authorization",
														"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJxSVg4R1paOVg5eEQ4OGdENWU4WkZTN1FJTERueWxZdiJ9.iDXhLiLkRaDWTKcsstOhzJSvj4qWX_OuGUbCfHwIFeU"
													},
													{
														"key": "X-Channel-Id",
														"value": "sunbird"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": [\n            {\n                \"stage\": \"publish\",\n                \"metadata\": {\n                    \"name\": \"content_11\",\n                    \"description\": \"MP3\",\n                    \"source\": \"https://drive.google.com/uc?export=download&id=16vH_ks10WSjfLLqqGdUE7ZECr8L_YU5T\",\n                    \"artifactUrl\": \"https://drive.google.com/uc?export=download&id=16vH_ks10WSjfLLqqGdUE7ZECr8L_YU5T\",\n                    \"appIcon\": \"https://drive.google.com/uc?export=download&id=1-dFzAeSNmx1ZRn77CEntyQA-VcBE0PKg\",\n                    \"code\": \"22a82329-f098-a984-05b9-f9ee84ff858d\",\n                    \"mimeType\": \"audio/mp3\",\n                    \"primaryCategory\": \"Learning Resource\",\n                    \"framework\": \"test\"\n                }\n            }\n        ]\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/content/v4/import",
													"host": [
														"{{host}}"
													],
													"path": [
														"content",
														"v4",
														"import"
													]
												},
												"description": "This API is associated with importing a content on the Sunbird Platform from different environment.\n  - The **_/import/_**endpoint executes request for impoting content, if content is found appropriate.\n  - The endpoint for **Import Content** is `/content/v2/import`\n  - It points to content-service - `/content/v3/import`\n  - It is mandatory to provide values for parameters marked with *.\n  - Mandatory fields cannot be null or empty."
											},
											"response": [
												{
													"name": "OK ! Successful operation.\"Import\" operation was successfully executed.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"content\": [\n      {\n        \"source\": \"https://vdn.diksha.gov.in/api/content/v2/read/do_4313124780355543040126730\",\n        \"metadata\": {},\n        \"collection\": [\n          {\n            \"identifier\": \"do_3131112587361648641337\",\n            \"unitId\": \"do_3131112587369922561425\"\n          }\n        ]\n      }\n    ]\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/import",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"import"
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.content.import\",\n  \"ver\": \"3.0\",\n  \"ts\": \"2020-12-17T16:29:11ZZ\",\n  \"params\": {\n    \"resmsgid\": \"7cce8934-0a2f-46bf-a0ee-be5f49874cae\",\n    \"msgid\": null,\n    \"err\": null,\n    \"status\": \"successful\",\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"processId\": \"80a765c7-2202-4b3f-b473-448b5c2cd20e\"\n  }\n}"
												},
												{
													"name": "BAD REQUEST. The \"Import Content\" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"content\": [\n      {\n        \"source\": \"https://vdn.diksha.gov.in/api/content/v2/read/do_4313124780355543040126730\",\n        \"metadata\": {},\n        \"collection\": [\n          {\n            \"identifier\": \"do_3131112587361648641337\",\n            \"unitId\": \"do_3131112587369922561425\"\n          }\n        ]\n      }\n    ]\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/import",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"import"
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.content.import\",\n  \"ver\": \"3.0\",\n  \"ts\": \"2020-12-17T16:30:16ZZ\",\n  \"params\": {\n    \"resmsgid\": \"31f88a39-2514-4d86-b424-240166e315be\",\n    \"msgid\": null,\n    \"err\": \"ERR_REQUIRED_PROPS_VALIDATION\",\n    \"status\": \"failed\",\n    \"errmsg\": \"Validation Failed! Mandatory Properties Are [name, code, mimeType, primaryCategory, artifactUrl, framework]\"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {\n    \"messages\": null\n  }\n}"
												},
												{
													"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"content\": [\n      {\n        \"source\": \"https://vdn.diksha.gov.in/api/content/v2/read/do_4313124780355543040126730\",\n        \"metadata\": {},\n        \"collection\": [\n          {\n            \"identifier\": \"do_3131112587361648641337\",\n            \"unitId\": \"do_3131112587369922561425\"\n          }\n        ]\n      }\n    ]\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/import",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"import"
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"result\": {},\n  \"id\": \"cupidatat reprehenderit dolor\",\n  \"ver\": \"minim anim commodo\",\n  \"ts\": \"commodo\",\n  \"params\": {\n    \"resmsgid\": \"pariatur repre\",\n    \"msgid\": \"irure\",\n    \"err\": \"consequat esse ea\",\n    \"status\": \"esse\",\n    \"errmsg\": \"aliqua laboris velit\"\n  },\n  \"responseCode\": \"reprehenderit dolor elit sunt dolore\"\n}"
												}
											]
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Import Content with missing mandatory fields",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string Bad Request\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"pm.test(\"id has string - api.content.import\", function () {\r",
															"    pm.expect(jsonResponse.id).to.be.equal(\"api.content.import\");\r",
															"});\r",
															"\r",
															"pm.test(\"Version is 4.0 \", function () {\r",
															"    pm.expect(jsonResponse.ver).to.be.equal(\"4.0\");\r",
															"});\r",
															"\r",
															"pm.test(\"Params has keys: resmsgid , msgid , err , status , errmsg \", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid', 'msgid','err','status','errmsg');\r",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.params.msgid).to.be.a('null');\r",
															"  pm.expect(jsonResponse.params.err).to.be.a('string');\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a('string');\r",
															"});\r",
															"\r",
															"pm.test(\"err is ERR_REQUIRED_PROPS_VALIDATION\", function () {\r",
															"    pm.expect(jsonResponse.params.err).to.be.equal(\"ERR_REQUIRED_PROPS_VALIDATION\");\r",
															"});\r",
															"pm.test(`errmsg: Validation Failed! Mandatory Properties Are [\\\"name\\\",\\\"code\\\",\\\"mimeType\\\",\\\"primaryCategory\\\",\\\"artifactUrl\\\",\\\"framework\\\"]`, function () {\r",
															"    pm.expect(jsonResponse.params.errmsg).to.be.equal(`Validation Failed! Mandatory Properties Are [\\\"name\\\",\\\"code\\\",\\\"mimeType\\\",\\\"primaryCategory\\\",\\\"artifactUrl\\\",\\\"framework\\\"]`);\r",
															"});\r",
															"\r",
															"pm.test(\"Status is failed\", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"failed\");\r",
															"});\r",
															"\r",
															"pm.test(\"ResponseCode is CLIENT_ERROR\", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"CLIENT_ERROR\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-Authenticated-User-token",
														"value": ""
													},
													{
														"key": "Authorization",
														"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJxSVg4R1paOVg5eEQ4OGdENWU4WkZTN1FJTERueWxZdiJ9.iDXhLiLkRaDWTKcsstOhzJSvj4qWX_OuGUbCfHwIFeU"
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": [\n            {\n                \n            }\n        ]\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/content/v4/import",
													"host": [
														"{{host}}"
													],
													"path": [
														"content",
														"v4",
														"import"
													]
												},
												"description": "This API is associated with importing a content on the Sunbird Platform from different environment.\n  - The **_/import/_**endpoint executes request for impoting content, if content is found appropriate.\n  - The endpoint for **Import Content** is `/content/v2/import`\n  - It points to content-service - `/content/v3/import`\n  - It is mandatory to provide values for parameters marked with *.\n  - Mandatory fields cannot be null or empty."
											},
											"response": [
												{
													"name": "OK ! Successful operation.\"Import\" operation was successfully executed.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"content\": [\n      {\n        \"source\": \"https://vdn.diksha.gov.in/api/content/v2/read/do_4313124780355543040126730\",\n        \"metadata\": {},\n        \"collection\": [\n          {\n            \"identifier\": \"do_3131112587361648641337\",\n            \"unitId\": \"do_3131112587369922561425\"\n          }\n        ]\n      }\n    ]\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/import",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"import"
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.content.import\",\n  \"ver\": \"3.0\",\n  \"ts\": \"2020-12-17T16:29:11ZZ\",\n  \"params\": {\n    \"resmsgid\": \"7cce8934-0a2f-46bf-a0ee-be5f49874cae\",\n    \"msgid\": null,\n    \"err\": null,\n    \"status\": \"successful\",\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"processId\": \"80a765c7-2202-4b3f-b473-448b5c2cd20e\"\n  }\n}"
												},
												{
													"name": "BAD REQUEST. The \"Import Content\" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"content\": [\n      {\n        \"source\": \"https://vdn.diksha.gov.in/api/content/v2/read/do_4313124780355543040126730\",\n        \"metadata\": {},\n        \"collection\": [\n          {\n            \"identifier\": \"do_3131112587361648641337\",\n            \"unitId\": \"do_3131112587369922561425\"\n          }\n        ]\n      }\n    ]\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/import",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"import"
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.content.import\",\n  \"ver\": \"3.0\",\n  \"ts\": \"2020-12-17T16:30:16ZZ\",\n  \"params\": {\n    \"resmsgid\": \"31f88a39-2514-4d86-b424-240166e315be\",\n    \"msgid\": null,\n    \"err\": \"ERR_REQUIRED_PROPS_VALIDATION\",\n    \"status\": \"failed\",\n    \"errmsg\": \"Validation Failed! Mandatory Properties Are [name, code, mimeType, primaryCategory, artifactUrl, framework]\"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {\n    \"messages\": null\n  }\n}"
												},
												{
													"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"content\": [\n      {\n        \"source\": \"https://vdn.diksha.gov.in/api/content/v2/read/do_4313124780355543040126730\",\n        \"metadata\": {},\n        \"collection\": [\n          {\n            \"identifier\": \"do_3131112587361648641337\",\n            \"unitId\": \"do_3131112587369922561425\"\n          }\n        ]\n      }\n    ]\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/import",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"import"
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"result\": {},\n  \"id\": \"cupidatat reprehenderit dolor\",\n  \"ver\": \"minim anim commodo\",\n  \"ts\": \"commodo\",\n  \"params\": {\n    \"resmsgid\": \"pariatur repre\",\n    \"msgid\": \"irure\",\n    \"err\": \"consequat esse ea\",\n    \"status\": \"esse\",\n    \"errmsg\": \"aliqua laboris velit\"\n  },\n  \"responseCode\": \"reprehenderit dolor elit sunt dolore\"\n}"
												}
											]
										},
										{
											"name": "Import Content with missing Artifact URL",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string Bad Request\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"pm.test(\"id has string - api.content.import\", function () {\r",
															"    pm.expect(jsonResponse.id).to.be.equal(\"api.content.import\");\r",
															"});\r",
															"\r",
															"pm.test(\"Version is 4.0 \", function () {\r",
															"    pm.expect(jsonResponse.ver).to.be.equal(\"4.0\");\r",
															"});\r",
															"\r",
															"pm.test(\"Params has keys: resmsgid , msgid , err , status , errmsg \", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid', 'msgid','err','status','errmsg');\r",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.params.msgid).to.be.a('null');\r",
															"  pm.expect(jsonResponse.params.err).to.be.a('string');\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a('string');\r",
															"});\r",
															"\r",
															"pm.test(\"err is ERR_REQUIRED_PROPS_VALIDATION\", function () {\r",
															"    pm.expect(jsonResponse.params.err).to.be.equal(\"ERR_REQUIRED_PROPS_VALIDATION\");\r",
															"});\r",
															"pm.test(`errmsg: Validation Failed! Mandatory Properties Are [\\\"name\\\",\\\"code\\\",\\\"mimeType\\\",\\\"primaryCategory\\\",\\\"artifactUrl\\\",\\\"framework\\\"] | Required Property's Missing For`, function () {\r",
															"    pm.expect(jsonResponse.params.errmsg).to.be.include(`Validation Failed! Mandatory Properties Are [\\\"name\\\",\\\"code\\\",\\\"mimeType\\\",\\\"primaryCategory\\\",\\\"artifactUrl\\\",\\\"framework\\\"] | Required Property's Missing For`);\r",
															"});\r",
															"\r",
															"pm.test(\"Status is failed\", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"failed\");\r",
															"});\r",
															"\r",
															"pm.test(\"ResponseCode is CLIENT_ERROR\", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"CLIENT_ERROR\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-Authenticated-User-token",
														"value": ""
													},
													{
														"key": "Authorization",
														"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJxSVg4R1paOVg5eEQ4OGdENWU4WkZTN1FJTERueWxZdiJ9.iDXhLiLkRaDWTKcsstOhzJSvj4qWX_OuGUbCfHwIFeU"
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": [\n            {\n                \"metadata\": {\n                    \"name\": \"content_11\",\n                    \"code\": \"22a82329-f098-a984-05b9-f9ee84ff858d\",\n                    \"mimeType\": \"audio/mp3\",\n                    \"primaryCategory\": \"Learning Resource\",\n                    \"framework\": \"test\"\n                }\n            }\n        ]\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/content/v4/import",
													"host": [
														"{{host}}"
													],
													"path": [
														"content",
														"v4",
														"import"
													]
												},
												"description": "This API is associated with importing a content on the Sunbird Platform from different environment.\n  - The **_/import/_**endpoint executes request for impoting content, if content is found appropriate.\n  - The endpoint for **Import Content** is `/content/v2/import`\n  - It points to content-service - `/content/v3/import`\n  - It is mandatory to provide values for parameters marked with *.\n  - Mandatory fields cannot be null or empty."
											},
											"response": [
												{
													"name": "OK ! Successful operation.\"Import\" operation was successfully executed.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"content\": [\n      {\n        \"source\": \"https://vdn.diksha.gov.in/api/content/v2/read/do_4313124780355543040126730\",\n        \"metadata\": {},\n        \"collection\": [\n          {\n            \"identifier\": \"do_3131112587361648641337\",\n            \"unitId\": \"do_3131112587369922561425\"\n          }\n        ]\n      }\n    ]\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/import",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"import"
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.content.import\",\n  \"ver\": \"3.0\",\n  \"ts\": \"2020-12-17T16:29:11ZZ\",\n  \"params\": {\n    \"resmsgid\": \"7cce8934-0a2f-46bf-a0ee-be5f49874cae\",\n    \"msgid\": null,\n    \"err\": null,\n    \"status\": \"successful\",\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"processId\": \"80a765c7-2202-4b3f-b473-448b5c2cd20e\"\n  }\n}"
												},
												{
													"name": "BAD REQUEST. The \"Import Content\" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"content\": [\n      {\n        \"source\": \"https://vdn.diksha.gov.in/api/content/v2/read/do_4313124780355543040126730\",\n        \"metadata\": {},\n        \"collection\": [\n          {\n            \"identifier\": \"do_3131112587361648641337\",\n            \"unitId\": \"do_3131112587369922561425\"\n          }\n        ]\n      }\n    ]\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/import",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"import"
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.content.import\",\n  \"ver\": \"3.0\",\n  \"ts\": \"2020-12-17T16:30:16ZZ\",\n  \"params\": {\n    \"resmsgid\": \"31f88a39-2514-4d86-b424-240166e315be\",\n    \"msgid\": null,\n    \"err\": \"ERR_REQUIRED_PROPS_VALIDATION\",\n    \"status\": \"failed\",\n    \"errmsg\": \"Validation Failed! Mandatory Properties Are [name, code, mimeType, primaryCategory, artifactUrl, framework]\"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {\n    \"messages\": null\n  }\n}"
												},
												{
													"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"content\": [\n      {\n        \"source\": \"https://vdn.diksha.gov.in/api/content/v2/read/do_4313124780355543040126730\",\n        \"metadata\": {},\n        \"collection\": [\n          {\n            \"identifier\": \"do_3131112587361648641337\",\n            \"unitId\": \"do_3131112587369922561425\"\n          }\n        ]\n      }\n    ]\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/import",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"import"
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"result\": {},\n  \"id\": \"cupidatat reprehenderit dolor\",\n  \"ver\": \"minim anim commodo\",\n  \"ts\": \"commodo\",\n  \"params\": {\n    \"resmsgid\": \"pariatur repre\",\n    \"msgid\": \"irure\",\n    \"err\": \"consequat esse ea\",\n    \"status\": \"esse\",\n    \"errmsg\": \"aliqua laboris velit\"\n  },\n  \"responseCode\": \"reprehenderit dolor elit sunt dolore\"\n}"
												}
											]
										},
										{
											"name": "Import Content with missing Artifact URL Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string Bad Request\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"pm.test(\"id has string - api.content.import\", function () {\r",
															"    pm.expect(jsonResponse.id).to.be.equal(\"api.content.import\");\r",
															"});\r",
															"\r",
															"pm.test(\"Version is 4.0 \", function () {\r",
															"    pm.expect(jsonResponse.ver).to.be.equal(\"4.0\");\r",
															"});\r",
															"\r",
															"pm.test(\"Params has keys: resmsgid , msgid , err , status , errmsg \", () => {\r",
															"  pm.expect(jsonResponse.params).to.have.all.keys('resmsgid', 'msgid','err','status','errmsg');\r",
															"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.params.msgid).to.be.a('null');\r",
															"  pm.expect(jsonResponse.params.err).to.be.a('string');\r",
															"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");\r",
															"  pm.expect(jsonResponse.params.errmsg).to.be.a('string');\r",
															"});\r",
															"\r",
															"pm.test(\"err is ERR_INVALID_IMPORT_REQUEST\", function () {\r",
															"    pm.expect(jsonResponse.params.err).to.be.equal(\"ERR_INVALID_IMPORT_REQUEST\");\r",
															"});\r",
															"pm.test(`errmsg: Invalid Request! Please Provide Valid Request.`, function () {\r",
															"    pm.expect(jsonResponse.params.errmsg).to.be.include(`Invalid Request! Please Provide Valid Request.`);\r",
															"});\r",
															"\r",
															"pm.test(\"Status is failed\", function () {\r",
															"    pm.expect(jsonResponse.params.status).to.be.equal(\"failed\");\r",
															"});\r",
															"\r",
															"pm.test(\"ResponseCode is CLIENT_ERROR\", function () {\r",
															"    pm.expect(jsonResponse.responseCode).to.be.equal(\"CLIENT_ERROR\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-Authenticated-User-token",
														"value": ""
													},
													{
														"key": "Authorization",
														"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJxSVg4R1paOVg5eEQ4OGdENWU4WkZTN1FJTERueWxZdiJ9.iDXhLiLkRaDWTKcsstOhzJSvj4qWX_OuGUbCfHwIFeU"
													},
													{
														"key": "X-Channel-Id",
														"value": "{{channel_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"request\": {\n        \"content\": [\n            \n        ]\n    }\n}"
												},
												"url": {
													"raw": "{{host}}/content/v4/import",
													"host": [
														"{{host}}"
													],
													"path": [
														"content",
														"v4",
														"import"
													]
												},
												"description": "This API is associated with importing a content on the Sunbird Platform from different environment.\n  - The **_/import/_**endpoint executes request for impoting content, if content is found appropriate.\n  - The endpoint for **Import Content** is `/content/v2/import`\n  - It points to content-service - `/content/v3/import`\n  - It is mandatory to provide values for parameters marked with *.\n  - Mandatory fields cannot be null or empty."
											},
											"response": [
												{
													"name": "OK ! Successful operation.\"Import\" operation was successfully executed.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"content\": [\n      {\n        \"source\": \"https://vdn.diksha.gov.in/api/content/v2/read/do_4313124780355543040126730\",\n        \"metadata\": {},\n        \"collection\": [\n          {\n            \"identifier\": \"do_3131112587361648641337\",\n            \"unitId\": \"do_3131112587369922561425\"\n          }\n        ]\n      }\n    ]\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/import",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"import"
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.content.import\",\n  \"ver\": \"3.0\",\n  \"ts\": \"2020-12-17T16:29:11ZZ\",\n  \"params\": {\n    \"resmsgid\": \"7cce8934-0a2f-46bf-a0ee-be5f49874cae\",\n    \"msgid\": null,\n    \"err\": null,\n    \"status\": \"successful\",\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"processId\": \"80a765c7-2202-4b3f-b473-448b5c2cd20e\"\n  }\n}"
												},
												{
													"name": "BAD REQUEST. The \"Import Content\" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"content\": [\n      {\n        \"source\": \"https://vdn.diksha.gov.in/api/content/v2/read/do_4313124780355543040126730\",\n        \"metadata\": {},\n        \"collection\": [\n          {\n            \"identifier\": \"do_3131112587361648641337\",\n            \"unitId\": \"do_3131112587369922561425\"\n          }\n        ]\n      }\n    ]\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/import",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"import"
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.content.import\",\n  \"ver\": \"3.0\",\n  \"ts\": \"2020-12-17T16:30:16ZZ\",\n  \"params\": {\n    \"resmsgid\": \"31f88a39-2514-4d86-b424-240166e315be\",\n    \"msgid\": null,\n    \"err\": \"ERR_REQUIRED_PROPS_VALIDATION\",\n    \"status\": \"failed\",\n    \"errmsg\": \"Validation Failed! Mandatory Properties Are [name, code, mimeType, primaryCategory, artifactUrl, framework]\"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {\n    \"messages\": null\n  }\n}"
												},
												{
													"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"content\": [\n      {\n        \"source\": \"https://vdn.diksha.gov.in/api/content/v2/read/do_4313124780355543040126730\",\n        \"metadata\": {},\n        \"collection\": [\n          {\n            \"identifier\": \"do_3131112587361648641337\",\n            \"unitId\": \"do_3131112587369922561425\"\n          }\n        ]\n      }\n    ]\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v2/import",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v2",
																"import"
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"result\": {},\n  \"id\": \"cupidatat reprehenderit dolor\",\n  \"ver\": \"minim anim commodo\",\n  \"ts\": \"commodo\",\n  \"params\": {\n    \"resmsgid\": \"pariatur repre\",\n    \"msgid\": \"irure\",\n    \"err\": \"consequat esse ea\",\n    \"status\": \"esse\",\n    \"errmsg\": \"aliqua laboris velit\"\n  },\n  \"responseCode\": \"reprehenderit dolor elit sunt dolore\"\n}"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "v1",
					"item": [
						{
							"name": "lock",
							"item": [
								{
									"name": "Lock list",
									"item": [
										{
											"name": "Positive",
											"item": [
												{
													"name": "lock list",
													"request": {
														"method": "POST",
														"header": [
															{
																"description": "(Required) The Content Type entity is the media type of the resource",
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "ipsum voluptate qui"
															},
															{
																"key": "Accept",
																"value": "application/json; charset=utf-8"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"filters\": {\n      \"resourceId\": [\n        \n      ]\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/lock/v4/list",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"lock",
																"v4",
																"list"
															]
														},
														"description": "This API searches for a list of Locked resource by a user or system or service.\n   - The **_lock/v1/list_** endpoint searches the list of  Locked resource.\n   - All fields marked with an * are mandatory\n   - Required fields cannot be null or empty\n   - Backend Route: http://knowledge-mw-service:5000/v1/lock/list"
													},
													"response": [
														{
															"name": "This represents the list response success",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"description": "(Required) The Content Type entity is the media type of the resource",
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																		"key": "Authorization",
																		"value": "ipsum voluptate qui"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"request\": {\n    \"filters\": {\n      \"resourceId\": [\n        \"do_11319479631000371211\",\n        \"do_11319851826161254418\",\n        \"do_113107812356022272164\",\n        \"do_1131983093687828481353\",\n        \"do_113197939102253056140\",\n        \"do_113197917149233152139\",\n        \"do_113197913444737024138\",\n        \"do_113197844509425664130\",\n        \"do_113197903995772928137\"\n      ]\n    }\n  }\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/lock/v1/list",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"lock",
																		"v1",
																		"list"
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json; charset=utf-8"
																}
															],
															"cookie": [],
															"body": "{\n  \"id\": \"api.lock.list\",\n  \"ver\": 1,\n  \"ts\": \"2021-01-21T09:44:03.248Z\",\n  \"params\": {\n    \"resmsgid\": \"32228b00-5bcd-11eb-9b0c-abcfbdf41bc3\",\n    \"msgid\": \"3247615a-0095-9236-9b6b-357d7b130b6e\",\n    \"status\": \"successful\",\n    \"err\": null,\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"count\": 1,\n    \"data\": [\n      {\n        \"lockId\": \"1d767439-a517-4433-bf46-fb0cca148d31\",\n        \"resourceId\": \"do_11319479631000371211\",\n        \"resourceType\": \"Content\",\n        \"resourceInfo\": \"{\\\"contentType\\\":\\\"TextBook\\\",\\\"framework\\\":\\\"ekstep_ncert_k-12\\\",\\\"identifier\\\":\\\"do_11319479631000371211\\\",\\\"mimeType\\\":\\\"application/vnd.ekstep.content-collection\\\"}\",\n        \"createdBy\": \"5a587cc1-e018-4859-a0a8-e842650b9d64\",\n        \"creatorInfo\": \"{\\\"name\\\":\\\"N11\\\",\\\"id\\\":\\\"5a587cc1-e018-4859-a0a8-e842650b9d64\\\"}\",\n        \"createdOn\": \"2021-01-21T09:22:12.577Z\",\n        \"deviceId\": \"ad8ed16beb09e7c91534c2af80a1a41e\",\n        \"expiresAt\": \"2021-01-21T10:26:27.591Z\"\n      }\n    ]\n  }\n}"
														},
														{
															"name": "This represents the Internal Server Error",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"description": "(Required) The Content Type entity is the media type of the resource",
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																		"key": "Authorization",
																		"value": "ipsum voluptate qui"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"request\": {\n    \"filters\": {\n      \"resourceId\": [\n        \"do_11319479631000371211\",\n        \"do_11319851826161254418\",\n        \"do_113107812356022272164\",\n        \"do_1131983093687828481353\",\n        \"do_113197939102253056140\",\n        \"do_113197917149233152139\",\n        \"do_113197913444737024138\",\n        \"do_113197844509425664130\",\n        \"do_113197903995772928137\"\n      ]\n    }\n  }\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/lock/v1/list",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"lock",
																		"v1",
																		"list"
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"id\": \"api.lock.list\",\n  \"ver\": 1,\n  \"ts\": \"2021-01-21T12:59:12.456Z\",\n  \"params\": {\n    \"resmsgid\": \"755de480-5be8-11eb-9b0c-abcfbdf41bc3\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"ERR_LISTING_LOCK_FAILED\",\n    \"errmsg\": \"Listing lock failed\"\n  },\n  \"responseCode\": \"SERVER_ERROR\",\n  \"result\": {}\n}"
														}
													]
												}
											]
										},
										{
											"name": "Negative",
											"item": []
										}
									]
								},
								{
									"name": "Lock retire",
									"item": [
										{
											"name": "Positive",
											"item": [
												{
													"name": "Lock retire",
													"request": {
														"method": "DELETE",
														"header": [
															{
																"description": "(Required) The Content Type entity is the media type of the resource",
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "ipsum voluptate qui"
															},
															{
																"key": "Accept",
																"value": "application/json; charset=utf-8"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/lock/v1/retire",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"lock",
																"v1",
																"retire"
															]
														},
														"description": "This API used to retire the Locked resource by a user or system or service.\n   - The **_lock/v1/retire_** endpoint used to retire  the Locked resource by a user or system or service.\n   - All fields marked with an * are mandatory\n   - Required fields cannot be null or empty\n   - Backend Route: http://knowledge-mw-service:5000/v1/lock/retire"
													},
													"response": [
														{
															"name": "This represents the retire success response",
															"originalRequest": {
																"method": "DELETE",
																"header": [
																	{
																		"description": "(Required) The Content Type entity is the media type of the resource",
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																		"key": "Authorization",
																		"value": "ipsum voluptate qui"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/lock/v1/retire",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"lock",
																		"v1",
																		"retire"
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json; charset=utf-8"
																}
															],
															"cookie": [],
															"body": "{\n  \"id\": \"api.lock.retire\",\n  \"ver\": 1,\n  \"ts\": \"2021-01-21T11:07:24.864Z\",\n  \"params\": {\n    \"resmsgid\": \"d7549400-5bd8-11eb-9b0c-abcfbdf41bc3\",\n    \"msgid\": \"eb729276-769e-8db2-477a-91548152908b\",\n    \"status\": \"successful\",\n    \"err\": null,\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {}\n}"
														},
														{
															"name": "This represents the retire Bad Request",
															"originalRequest": {
																"method": "DELETE",
																"header": [
																	{
																		"description": "(Required) The Content Type entity is the media type of the resource",
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																		"key": "Authorization",
																		"value": "ipsum voluptate qui"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/lock/v1/retire",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"lock",
																		"v1",
																		"retire"
																	]
																}
															},
															"status": "Bad Request",
															"code": 400,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"id\": \"api.lock.retire\",\n  \"ver\": 1,\n  \"ts\": \"2021-01-21T11:08:43.618Z\",\n  \"params\": {\n    \"resmsgid\": \"0645ca40-5bd9-11eb-9b0c-abcfbdf41bc3\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"ERR_LOCK_RETIRING_FAILED\",\n    \"errmsg\": \"Resource is not locked\"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {}\n}"
														}
													]
												}
											]
										},
										{
											"name": "Negative",
											"item": []
										}
									]
								},
								{
									"name": "Lock Create",
									"item": [
										{
											"name": "Positive",
											"item": [
												{
													"name": "Lock create",
													"request": {
														"method": "POST",
														"header": [
															{
																"description": "(Required) The Content Type entity is the media type of the resource",
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "ipsum voluptate qui"
															},
															{
																"key": "Accept",
																"value": "application/json; charset=utf-8"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"resourceId\": \"do_11319479631000371211\",\n    \"resourceType\": \"Content\",\n    \"resourceInfo\": \"{\\\"contentType\\\":\\\"TextBook\\\",\\\"framework\\\":\\\"ekstep_ncert_k-12\\\",\\\"identifier\\\":\\\"do_11319479631000371211\\\",\\\"mimeType\\\":\\\"application/vnd.ekstep.content-collection\\\"}\",\n    \"creatorInfo\": \"{\\\"name\\\":\\\"N11\\\",\\\"id\\\":\\\"5a587cc1-e018-4859-a0a8-e842650b9d64\\\"}\",\n    \"createdBy\": \"5a587cc1-e018-4859-a0a8-e842650b9d64\",\n    \"isRootOrgAdmin\": true\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/lock/v1/create",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"lock",
																"v1",
																"create"
															]
														},
														"description": "This API used to create the Lock resource by a user or system or service.\n   - The **_lock/v1/create_** endpoint search the bulk job approve of the content.\n   - All fields marked with an * are mandatory\n   - Required fields cannot be null or empty\n   - Backend Route: http://knowledge-mw-service:5000/v1/lock/create"
													},
													"response": [
														{
															"name": "This represents the create response body 200",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"description": "(Required) The Content Type entity is the media type of the resource",
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																		"key": "Authorization",
																		"value": "ipsum voluptate qui"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"request\": {\n    \"resourceId\": \"do_11319479631000371211\",\n    \"resourceType\": \"Content\",\n    \"resourceInfo\": \"{\\\"contentType\\\":\\\"TextBook\\\",\\\"framework\\\":\\\"ekstep_ncert_k-12\\\",\\\"identifier\\\":\\\"do_11319479631000371211\\\",\\\"mimeType\\\":\\\"application/vnd.ekstep.content-collection\\\"}\",\n    \"creatorInfo\": \"{\\\"name\\\":\\\"N11\\\",\\\"id\\\":\\\"5a587cc1-e018-4859-a0a8-e842650b9d64\\\"}\",\n    \"createdBy\": \"5a587cc1-e018-4859-a0a8-e842650b9d64\",\n    \"isRootOrgAdmin\": true\n  }\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/lock/v1/create",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"lock",
																		"v1",
																		"create"
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json; charset=utf-8"
																}
															],
															"cookie": [],
															"body": "{\n  \"id\": \"api.lock.create\",\n  \"ver\": 1,\n  \"ts\": \"2021-01-21T11:14:46.643Z\",\n  \"params\": {\n    \"resmsgid\": \"dea6b430-5bd9-11eb-9b0c-abcfbdf41bc3\",\n    \"msgid\": \"33e7b5d4-7662-bab6-1c06-72e71b8b8221\",\n    \"status\": \"successful\",\n    \"err\": null,\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"lockKey\": \"bad55f24-8081-4d03-baab-364296062b47\",\n    \"expiresAt\": \"2021-01-21T12:14:46.594Z\",\n    \"expiresIn\": 60\n  }\n}"
														},
														{
															"name": "This represents the create response Bad Request",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"description": "(Required) The Content Type entity is the media type of the resource",
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																		"key": "Authorization",
																		"value": "ipsum voluptate qui"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"request\": {\n    \"resourceId\": \"do_11319479631000371211\",\n    \"resourceType\": \"Content\",\n    \"resourceInfo\": \"{\\\"contentType\\\":\\\"TextBook\\\",\\\"framework\\\":\\\"ekstep_ncert_k-12\\\",\\\"identifier\\\":\\\"do_11319479631000371211\\\",\\\"mimeType\\\":\\\"application/vnd.ekstep.content-collection\\\"}\",\n    \"creatorInfo\": \"{\\\"name\\\":\\\"N11\\\",\\\"id\\\":\\\"5a587cc1-e018-4859-a0a8-e842650b9d64\\\"}\",\n    \"createdBy\": \"5a587cc1-e018-4859-a0a8-e842650b9d64\",\n    \"isRootOrgAdmin\": true\n  }\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/lock/v1/create",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"lock",
																		"v1",
																		"create"
																	]
																}
															},
															"status": "Bad Request",
															"code": 400,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"id\": \"api.lock.create\",\n  \"ver\": 1,\n  \"ts\": \"2021-01-21T13:09:44.935Z\",\n  \"params\": {\n    \"resmsgid\": \"ee5a8770-5be9-11eb-9b0c-abcfbdf41bc3\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"ERR_LOCK_CREATION_FIELDS_MISSING\",\n    \"errmsg\": \"\\\"resourceInfo\\\" is required\"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {}\n}"
														}
													]
												}
											]
										},
										{
											"name": "Negative",
											"item": []
										}
									]
								},
								{
									"name": "Lock Refresh",
									"item": [
										{
											"name": "Positive",
											"item": [
												{
													"name": "Lock Refresh",
													"request": {
														"method": "PATCH",
														"header": [
															{
																"description": "(Required) The Content Type entity is the media type of the resource",
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "ipsum voluptate qui"
															},
															{
																"key": "Accept",
																"value": "application/json; charset=utf-8"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"resourceId\": \"do_11316513466772684811649\",\n    \"resourceType\": \"Content\",\n    \"lockId\": \"0e6b1631-93e6-4726-9dcf-0debdba37aa1\"\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/lock/v1/refresh",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"lock",
																"v1",
																"refresh"
															]
														},
														"description": "This API used to refresh the Locked resource by a user or system or service.\n   - The **_lock/v1/refresh_** endpoint refresh the Locked resource by a user or system or service.\n   - All fields marked with an * are mandatory\n   - Required fields cannot be null or empty\n   - Backend Route: http://knowledge-mw-service:5000/v1/lock/refresh"
													},
													"response": [
														{
															"name": "This represents the refresh response 200",
															"originalRequest": {
																"method": "PATCH",
																"header": [
																	{
																		"description": "(Required) The Content Type entity is the media type of the resource",
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																		"key": "Authorization",
																		"value": "ipsum voluptate qui"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"request\": {\n    \"resourceId\": \"do_11316513466772684811649\",\n    \"resourceType\": \"Content\",\n    \"lockId\": \"0e6b1631-93e6-4726-9dcf-0debdba37aa1\"\n  }\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/lock/v1/refresh",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"lock",
																		"v1",
																		"refresh"
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json; charset=utf-8"
																}
															],
															"cookie": [],
															"body": "{\n  \"id\": \"api.v1.refresh\",\n  \"ver\": 1,\n  \"ts\": \"2021-01-21T11:24:31.981Z\",\n  \"params\": {\n    \"resmsgid\": \"3b8a31d0-5bdb-11eb-9b0c-abcfbdf41bc3\",\n    \"msgid\": \"3a33a280-5bdb-11eb-9b0c-abcfbdf41bc3\",\n    \"status\": \"successful\",\n    \"err\": null,\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"lockKey\": \"0e6b1631-93e6-4726-9dcf-0debdba37aa1\",\n    \"expiresAt\": \"2021-01-21T12:24:29.738Z\",\n    \"expiresIn\": 60\n  }\n}"
														},
														{
															"name": "This represents the refresh response for Bad Request",
															"originalRequest": {
																"method": "PATCH",
																"header": [
																	{
																		"description": "(Required) The Content Type entity is the media type of the resource",
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																		"key": "Authorization",
																		"value": "ipsum voluptate qui"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"request\": {\n    \"resourceId\": \"do_11316513466772684811649\",\n    \"resourceType\": \"Content\",\n    \"lockId\": \"0e6b1631-93e6-4726-9dcf-0debdba37aa1\"\n  }\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/lock/v1/refresh",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"lock",
																		"v1",
																		"refresh"
																	]
																}
															},
															"status": "Bad Request",
															"code": 400,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"id\": \"api.v1.refresh\",\n  \"ver\": 1,\n  \"ts\": \"2021-01-21T11:27:46.193Z\",\n  \"params\": {\n    \"resmsgid\": \"af4c9810-5bdb-11eb-9b0c-abcfbdf41bc3\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"ERR_LOCK_REFRESHING_FIELDS_MISSING\",\n    \"errmsg\": \"\\\"resourceId\\\" is required\"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {}\n}"
														}
													]
												}
											]
										},
										{
											"name": "Negative",
											"item": []
										}
									]
								}
							],
							"description": "This services explains the design of lock service and types of locks that are possible with mechanisms to lock a resource and unlock it with different possibilities.\n\nContact Support:  \nEmail: [info@sunbird.org](https://desktop.postman.com/?desktopVersion=10.6.0&userId=1419050&teamId=304931)"
						},
						{
							"name": "Search Content",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "Search Content",
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "value",
															"value": "<API Key>",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"description": "The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
														"key": "Content-Type",
														"value": "ea laborum"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"request\": {\n    \"filters\": {\n      \"objectType\": \"Content\",\n      \"status\": []\n    },\n    \"limit\": 1\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/content/v1/search",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"content",
														"v1",
														"search"
													]
												},
												"description": "This API is associated with Searching Object created as part of sourcing object creation on the Sunbird Platform.\n  - The endpoint for **Content Search** is `/content/v1/search`\n  - It points to knowledge-mw-service - `/v1/search`\n  - It is mandatory to provide values for parameters marked with *.\n  - Mandatory fields cannot be null or empty."
											},
											"response": [
												{
													"name": "SUCCESS. The **Content Search** operation was successful!",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"filters\": {\n      \"objectType\": \"Content\",\n      \"status\": []\n    },\n    \"limit\": 1\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v1/search",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v1",
																"search"
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.content.search\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-22T06:24:45.025Z\",\n  \"params\": {\n    \"resmsgid\": \"62160510-441e-11eb-9b0c-abcfbdf41bc3\",\n    \"msgid\": \"620ae180-441e-11eb-9b0c-abcfbdf41bc3\",\n    \"status\": \"successful\",\n    \"err\": null,\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"count\": 480465,\n    \"content\": [\n      {\n        \"code\": \"org.ekstep.jun16.story.test05\",\n        \"subject\": [\n          \"literacy\"\n        ],\n        \"flags\": [\n          \"Test case\"\n        ],\n        \"channel\": \"in.ekstep\",\n        \"downloadUrl\": \"https://ekstep-public-dev.s3-ap-south-1.amazonaws.com/ecar_files/org.ekstep.jun16.story.test05/vrgaatiil-upkrmclassroom-activities_1498725323304_org.ekstep.jun16.story.test05_1.0.ecar\",\n        \"description\": \"शेर का साथी हाथी\",\n        \"lastFlaggedOn\": \"2017-12-27T13:30:48.942+0000\",\n        \"language\": [\n          \"English\"\n        ],\n        \"variants\": {\n          \"spine\": {\n            \"ecarUrl\": \"https://ekstep-public-dev.s3-ap-south-1.amazonaws.com/ecar_files/org.ekstep.jun16.story.test05/vrgaatiil-upkrmclassroom-activities_1498725324677_org.ekstep.jun16.story.test05_1.0_spine.ecar\",\n            \"size\": 851\n          }\n        },\n        \"mimeType\": \"application/vnd.ekstep.ecml-archive\",\n        \"flaggedBy\": [\n          \"Test case\"\n        ],\n        \"idealScreenSize\": \"normal\",\n        \"createdOn\": \"2017-06-29T07:44:15.875+0000\",\n        \"objectType\": \"Content\",\n        \"collections\": [\n          \"do_11228062262625075214\"\n        ],\n        \"appId\": \"ekstep_portal\",\n        \"contentDisposition\": \"inline\",\n        \"contentEncoding\": \"gzip\",\n        \"artifactUrl\": \"https://ekstep-public-dev.s3-ap-south-1.amazonaws.com/content/org.ekstep.jun16.story.test05/artifact/1485166711340_do_30102464_1498725273215.zip\",\n        \"lastUpdatedOn\": \"2017-12-27T13:30:48.968+0000\",\n        \"SYS_INTERNAL_LAST_UPDATED_ON\": \"2018-01-09T18:41:32.368+0000\",\n        \"primaryCategory\": \"Story\",\n        \"owner\": \"EkStep\",\n        \"lastUpdatedBy\": \"Test case\",\n        \"identifier\": \"org.ekstep.jun16.story.test05\",\n        \"audience\": [\n          \"Learner\"\n        ],\n        \"flagReasons\": [\n          \"Copyright Violation\"\n        ],\n        \"visibility\": \"default\",\n        \"os\": [\n          \"All\"\n        ],\n        \"consumerId\": \"72e54829-6402-4cf0-888e-9b30733c1b88\",\n        \"mediaType\": \"content\",\n        \"osId\": \"org.ekstep.quiz.app\",\n        \"graph_id\": \"domain\",\n        \"nodeType\": \"DATA_NODE\",\n        \"pkgVersion\": 1,\n        \"versionKey\": \"1515523292368\",\n        \"prevState\": \"Draft\",\n        \"idealScreenDensity\": \"hdpi\",\n        \"dialcodes\": [\n          \"DAKDF\",\n          \"FSDFDSA\"\n        ],\n        \"s3Key\": \"ecar_files/org.ekstep.jun16.story.test05/vrgaatiil-upkrmclassroom-activities_1498725323304_org.ekstep.jun16.story.test05_1.0.ecar\",\n        \"size\": 9983654,\n        \"lastPublishedOn\": \"2017-06-29T08:35:23.302+0000\",\n        \"compatibilityLevel\": 1,\n        \"name\": \"\\tवर्गातील उपक्रम(Classroom Activities)\",\n        \"resourceType\": \"Story\",\n        \"status\": \"Flagged\",\n        \"node_id\": 105761\n      }\n    ]\n  }\n}"
												},
												{
													"name": "BAD REQUEST. The **Content Search** operation failed. You may have missed input for a mandatory parameter - Content-Type in header",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"filters\": {\n      \"objectType\": \"Content\",\n      \"status\": []\n    },\n    \"limit\": 1\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v1/search",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v1",
																"search"
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.content.search\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-21T11:46:50.400Z\",\n  \"params\": {\n    \"resmsgid\": \"367e7a00-4382-11eb-9b0c-abcfbdf41bc3\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"ERR_CONTENT_SEARCH_FIELDS_MISSING\",\n    \"errmsg\": \"Required fields for search content are missing\"\n  },\n  \"responseCode\": \"CLIENT_ERROR\",\n  \"result\": {}\n}"
												},
												{
													"name": "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"request\": {\n    \"filters\": {\n      \"objectType\": \"Content\",\n      \"status\": []\n    },\n    \"limit\": 1\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/content/v1/search",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v1",
																"search"
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.content.search\",\n  \"ver\": \"1.0\",\n  \"ts\": \"2020-12-10T08:51:51.647Z\",\n  \"params\": {\n    \"resmsgid\": \"f234a6f0-3ac4-11eb-b0a2-8d5c9f561887\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": null,\n    \"errmsg\": null\n  },\n  \"responseCode\": \"SERVER_ERROR\",\n  \"result\": {}\n}"
												}
											]
										}
									]
								},
								{
									"name": "Negative",
									"item": []
								}
							]
						},
						{
							"name": "Read Private Content",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "Read Private Content",
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "key",
															"value": "Authorization",
															"type": "string"
														},
														{
															"key": "value",
															"value": "<API Key>",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"description": "The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
														"key": "Content-Type",
														"value": "ea laborum"
													},
													{
														"description": "(Required) Represents a physical location (e.g: state) uniquely to which the user belongs.",
														"key": "x-channel-id",
														"value": "ea laborum"
													},
													{
														"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
														"key": "Authorization",
														"value": "ea laborum"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/content/v1/private/read/:Content_Id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"content",
														"v1",
														"private",
														"read",
														":Content_Id"
													],
													"variable": [
														{
															"key": "Content_Id",
															"value": "ea laborum",
															"description": "(Required) Please append a valid Content Id To the Request URL"
														}
													]
												},
												"description": "This API is associated with viewing and reading out the private and public contents on the Sunbird Platform.\n  - The **_/private/read/{contentId}_** endpoint executes request for fetching the private and public contents to be viewed and read.\n  - The endpoint for **Read Private Content** is `/content/v1/private/read`\n  - It points to content-service - `/content/v4/private/read`\n  - {...}refers to a section of reject endpoint URL path that needs to be replaced by appropriate Id.\n  - You need to provide a valid content Id value in {Content Id} field of API URL.\n  - It is mandatory to provide values for parameters marked with *.\n  - Mandatory fields cannot be null or empty."
											},
											"response": [
												{
													"name": "OK ! Successful operation.\"Read Private content\" operation was successfully executed. For all possible metadata, please [refer](https://github.com/project-sunbird/knowledge-platform/blob/master/schemas/content/1.0/schema.json)",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) Represents a physical location (e.g: state) uniquely to which the user belongs.",
																"key": "x-channel-id",
																"value": "ea laborum"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/content/v1/private/read/:Content_Id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v1",
																"private",
																"read",
																":Content_Id"
															],
															"variable": [
																{
																	"key": "Content_Id",
																	"value": "ea laborum",
																	"description": "(Required) Please append a valid Content Id To the Request URL"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.content.private.read\",\n  \"ver\": \"4.0\",\n  \"ts\": \"2021-09-20T20:12:52Z+05:30\",\n  \"params\": {\n    \"resmsgid\": \"a31dbba1-c3bf-4c3d-a028-f3e5b7de4b57\",\n    \"msgid\": null,\n    \"err\": null,\n    \"status\": \"successful\",\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"content\": {\n      \"ownershipType\": [\n        \"createdBy\"\n      ],\n      \"code\": \"name\",\n      \"interceptionPoints\": {},\n      \"credentials\": {\n        \"enabled\": \"No\"\n      },\n      \"channel\": \"abc-123\",\n      \"language\": [\n        \"English\"\n      ],\n      \"mimeType\": \"application/pdf\",\n      \"idealScreenSize\": \"normal\",\n      \"createdOn\": \"2021-08-30T13:11:08.485+0530\",\n      \"objectType\": \"Content\",\n      \"primaryCategory\": \"Learning Resource\",\n      \"contentDisposition\": \"inline\",\n      \"lastUpdatedOn\": \"2021-08-30T13:11:08.485+0530\",\n      \"contentEncoding\": \"identity\",\n      \"dialcodeRequired\": \"No\",\n      \"trackable\": {\n        \"enabled\": \"No\",\n        \"autoBatch\": \"No\"\n      },\n      \"identifier\": \"do_11335549352263680012\",\n      \"lastStatusChangedOn\": \"2021-08-30T13:11:08.485+0530\",\n      \"audience\": [\n        \"Student\"\n      ],\n      \"os\": [\n        \"All\"\n      ],\n      \"visibility\": \"Private\",\n      \"discussionForum\": {\n        \"enabled\": \"No\"\n      },\n      \"mediaType\": \"content\",\n      \"osId\": \"org.ekstep.quiz.app\",\n      \"languageCode\": [\n        \"en\"\n      ],\n      \"version\": 2,\n      \"versionKey\": \"1630309268485\",\n      \"license\": \"CC BY 4.0\",\n      \"idealScreenDensity\": \"hdpi\",\n      \"framework\": \"NCF\",\n      \"compatibilityLevel\": 1,\n      \"name\": \"Untitled Resource\",\n      \"status\": \"Draft\"\n    }\n  }\n}"
												},
												{
													"name": "RESOURCE NOT FOUND,**Content Private Read** operation failed !The possible reason for failure is that you may have provided wrong content id.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) Represents a physical location (e.g: state) uniquely to which the user belongs.",
																"key": "x-channel-id",
																"value": "ea laborum"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/content/v1/private/read/:Content_Id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v1",
																"private",
																"read",
																":Content_Id"
															],
															"variable": [
																{
																	"key": "Content_Id",
																	"value": "ea laborum",
																	"description": "(Required) Please append a valid Content Id To the Request URL"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"api.content.private.read\",\n  \"ver\": \"4.0\",\n  \"ts\": \"2021-09-20T21:07:50Z+05:30\",\n  \"params\": {\n    \"resmsgid\": \"a8bb809b-c2e1-4749-b05b-b2cd7dc1ca49\",\n    \"msgid\": null,\n    \"err\": \"NOT_FOUND\",\n    \"status\": \"failed\",\n    \"errmsg\": \"Error! Node(s) doesn't Exists. | [Invalid Node Id.]: do_11335549352263680013\"\n  },\n  \"responseCode\": \"RESOURCE_NOT_FOUND\",\n  \"result\": {\n    \"messages\": null\n  }\n}"
												},
												{
													"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
																"key": "Content-Type",
																"value": "ea laborum"
															},
															{
																"description": "(Required) Represents a physical location (e.g: state) uniquely to which the user belongs.",
																"key": "x-channel-id",
																"value": "ea laborum"
															},
															{
																"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
																"key": "Authorization",
																"value": "ea laborum"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/content/v1/private/read/:Content_Id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"content",
																"v1",
																"private",
																"read",
																":Content_Id"
															],
															"variable": [
																{
																	"key": "Content_Id",
																	"value": "ea laborum",
																	"description": "(Required) Please append a valid Content Id To the Request URL"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"result\": {},\n  \"id\": \"cupidatat reprehenderit dolor\",\n  \"ver\": \"minim anim commodo\",\n  \"ts\": \"commodo\",\n  \"params\": {\n    \"resmsgid\": \"pariatur repre\",\n    \"msgid\": \"irure\",\n    \"err\": \"consequat esse ea\",\n    \"status\": \"esse\",\n    \"errmsg\": \"aliqua laboris velit\"\n  },\n  \"responseCode\": \"reprehenderit dolor elit sunt dolore\"\n}"
												}
											]
										}
									]
								},
								{
									"name": "Negative",
									"item": []
								}
							]
						},
						{
							"name": "Url Fetch Metadata",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
										"key": "Authorization",
										"value": "ea laborum"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"request\": {\n    \"url\": \"https://github.com/project-sunbird/sunbird.org-docs\"\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/content/v4/fetchmeta",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"content",
										"v4",
										"fetchmeta"
									]
								},
								"description": "This API is associated with fetching url metadata details on the Sunbird Platform.\n  - The endpoint for **Create Content** is `/content/v1/fetchmeta`\n  - It points to knowledge-mw-service - `/v1/url/fetchmeta`\n  - It is mandatory to provide values for parameters marked with *.\n  - Mandatory fields cannot be null or empty."
							},
							"response": [
								{
									"name": "SUCCESS. The **URL Fetch Metadata** operation was successful!",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											},
											{
												"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
												"key": "Content-Type",
												"value": "ea laborum"
											},
											{
												"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
												"key": "Authorization",
												"value": "ea laborum"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"request\": {\n    \"url\": \"https://github.com/project-sunbird/sunbird.org-docs\"\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/content/v1/fetchmeta",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"content",
												"v1",
												"fetchmeta"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"ts\": \"2021-02-02T08:38:20.329Z\",\n  \"params\": {\n    \"resmsgid\": \"00edd990-6532-11eb-9dac-65b700f4c009\",\n    \"msgid\": null,\n    \"status\": \"successful\",\n    \"err\": null,\n    \"errmsg\": null\n  },\n  \"responseCode\": \"OK\",\n  \"result\": {\n    \"url\": \"https://github.com/project-sunbird/sunbird.org-docs\",\n    \"canonical\": \"https://github.com/project-sunbird/sunbird.org-docs\",\n    \"title\": \"project-sunbird/sunbird.org-docs\",\n    \"image\": \"https://avatars.githubusercontent.com/u/26705730?s=400&v=4\",\n    \"author\": \"\",\n    \"description\": \"Repository for documentation on sunbird.org. Contribute to project-sunbird/sunbird.org-docs development by creating an account on GitHub.\",\n    \"keywords\": \"\",\n    \"source\": \"github.com\",\n    \"og:url\": \"https://github.com/project-sunbird/sunbird.org-docs\",\n    \"og:locale\": \"\",\n    \"og:locale:alternate\": \"\",\n    \"og:title\": \"project-sunbird/sunbird.org-docs\",\n    \"og:type\": \"object\",\n    \"og:description\": \"Repository for documentation on sunbird.org. Contribute to project-sunbird/sunbird.org-docs development by creating an account on GitHub.\",\n    \"og:determiner\": \"\",\n    \"og:site_name\": \"GitHub\",\n    \"og:image\": \"https://avatars.githubusercontent.com/u/26705730?s=400&v=4\",\n    \"og:image:secure_url\": \"\",\n    \"og:image:type\": \"\",\n    \"og:image:width\": \"\",\n    \"og:image:height\": \"\",\n    \"price\": \"\",\n    \"priceCurrency\": \"\",\n    \"availability\": \"\"\n  }\n}"
								},
								{
									"name": "'BAD REQUEST. The **URL Fetch Metadata** operation failed. You may have missed input for a mandatory parameter.'",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											},
											{
												"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
												"key": "Content-Type",
												"value": "ea laborum"
											},
											{
												"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
												"key": "Authorization",
												"value": "ea laborum"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"request\": {\n    \"url\": \"https://github.com/project-sunbird/sunbird.org-docs\"\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/content/v1/fetchmeta",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"content",
												"v1",
												"fetchmeta"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"ts\": \"2021-02-02T08:53:31.808Z\",\n  \"params\": {\n    \"resmsgid\": \"20368200-6534-11eb-9dac-65b700f4c009\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"ERR_FETCH_URLMETA_MISSING\",\n    \"errmsg\": \"Required fields for fetching url meta data are missing\"\n  },\n  \"responseCode\": \"CLIENT_ERROR\"\n}"
								},
								{
									"name": "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											},
											{
												"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:-\n  - Application/json",
												"key": "Content-Type",
												"value": "ea laborum"
											},
											{
												"description": "(Required) To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.",
												"key": "Authorization",
												"value": "ea laborum"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"request\": {\n    \"url\": \"https://github.com/project-sunbird/sunbird.org-docs\"\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/content/v1/fetchmeta",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"content",
												"v1",
												"fetchmeta"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"ts\": \"2021-02-02T08:57:49.620Z\",\n  \"params\": {\n    \"resmsgid\": \"b9e17f40-6534-11eb-9dac-65b700f4c009\",\n    \"msgid\": null,\n    \"status\": \"failed\",\n    \"err\": \"ERR_FETCH_URLMETA_FAILED\",\n    \"errmsg\": \"Unable to load the url metadata\"\n  }\n}"
								}
							]
						},
						{
							"name": "Reject Flag",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "<API Key>",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:- \n  - Application/json",
										"key": "Content-Type",
										"value": "nisi amet "
									},
									{
										"description": "(Required) The Registered User ID to execute the API.",
										"key": "X-Authenticated-User-token",
										"value": "nisi amet "
									},
									{
										"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
										"key": "Authorization",
										"value": "nisi amet "
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/content/v1/flag/reject/:Content_Id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"content",
										"v1",
										"flag",
										"reject",
										":Content_Id"
									],
									"variable": [
										{
											"key": "Content_Id",
											"value": "nisi amet ",
											"description": "(Required) Please append a valid Content Id To the Request URL"
										}
									]
								},
								"description": "This API is associated with setting Reject Flag for content under review process on the Sunbird Platform .\n  - The **_/flag/reject/_**endpoint executes request for flagging content under review to \"Reject flag\", if content is found in-appropriate.\n  - The endpoint for **Flag Reject Content** is `/content/v1/flag/reject`\n  - It points to knowledge-mw-service - `/v1/content/flag/reject`\n  - It is mandatory to provide values for parameters marked with *. \n  - Mandatory fields cannot be null or empty."
							},
							"response": [
								{
									"name": "OK ! Successful operation.\"Reject Flag\" operation was successfully executed.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											},
											{
												"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:- \n  - Application/json",
												"key": "Content-Type",
												"value": "nisi amet "
											},
											{
												"description": "(Required) The Registered User ID to execute the API.",
												"key": "X-Authenticated-User-token",
												"value": "nisi amet "
											},
											{
												"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
												"key": "Authorization",
												"value": "nisi amet "
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/content/v1/flag/reject/:Content_Id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"content",
												"v1",
												"flag",
												"reject",
												":Content_Id"
											],
											"variable": [
												{
													"key": "Content_Id",
													"value": "nisi amet ",
													"description": "(Required) Please append a valid Content Id To the Request URL"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"result\": {\n    \"node_id\": \"ex reprehenderit magna eiusmod\",\n    \"content_id\": \"adipisicing velit ullamco\",\n    \"versionKey\": \"pari\"\n  },\n  \"id\": \"cupidatat dolore elit\",\n  \"ver\": \"nostrud exercitation dolore labore minim\",\n  \"ts\": \"nisi\",\n  \"params\": {\n    \"resmsgid\": \"ea officia voluptate\",\n    \"msgid\": \"fugiat consequat\",\n    \"err\": \"do non minim\",\n    \"status\": \"in enim\",\n    \"errmsg\": \"mollit eu quis\"\n  },\n  \"responseCode\": \"consectetur voluptate\"\n}"
								},
								{
									"name": "ERR CONTENT NOT FLAGGED! Looks like contentId is not in flagged status.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											},
											{
												"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:- \n  - Application/json",
												"key": "Content-Type",
												"value": "nisi amet "
											},
											{
												"description": "(Required) The Registered User ID to execute the API.",
												"key": "X-Authenticated-User-token",
												"value": "nisi amet "
											},
											{
												"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
												"key": "Authorization",
												"value": "nisi amet "
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/content/v1/flag/reject/:Content_Id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"content",
												"v1",
												"flag",
												"reject",
												":Content_Id"
											],
											"variable": [
												{
													"key": "Content_Id",
													"value": "nisi amet ",
													"description": "(Required) Please append a valid Content Id To the Request URL"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"result\": {},\n  \"id\": \"voluptate culpa Excepteur minim\",\n  \"ver\": \"Duis\",\n  \"ts\": \"exercitation cupidatat aute repr\",\n  \"params\": {\n    \"resmsgid\": \"do Duis cupidatat nostrud\",\n    \"msgid\": \"laboris veniam \",\n    \"err\": \"ut ad pariatur adipisicing enim\",\n    \"status\": \"sit sunt aliqua\",\n    \"errmsg\": \"elit dolore irure\"\n  },\n  \"responseCode\": \"occaecat\"\n}"
								},
								{
									"name": "RESOURCE NOT FOUND,**Content Send for Flag Reject** operation failed !The possible reason for failure is that you may have provided wrong content id.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											},
											{
												"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:- \n  - Application/json",
												"key": "Content-Type",
												"value": "nisi amet "
											},
											{
												"description": "(Required) The Registered User ID to execute the API.",
												"key": "X-Authenticated-User-token",
												"value": "nisi amet "
											},
											{
												"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
												"key": "Authorization",
												"value": "nisi amet "
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/content/v1/flag/reject/:Content_Id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"content",
												"v1",
												"flag",
												"reject",
												":Content_Id"
											],
											"variable": [
												{
													"key": "Content_Id",
													"value": "nisi amet ",
													"description": "(Required) Please append a valid Content Id To the Request URL"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"result\": {},\n  \"id\": \"voluptate culpa Excepteur minim\",\n  \"ver\": \"Duis\",\n  \"ts\": \"exercitation cupidatat aute repr\",\n  \"params\": {\n    \"resmsgid\": \"do Duis cupidatat nostrud\",\n    \"msgid\": \"laboris veniam \",\n    \"err\": \"ut ad pariatur adipisicing enim\",\n    \"status\": \"sit sunt aliqua\",\n    \"errmsg\": \"elit dolore irure\"\n  },\n  \"responseCode\": \"occaecat\"\n}"
								},
								{
									"name": "INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											},
											{
												"description": "(Required) The Content Type entity is the media type of the resource.Possible media types can be:- \n  - Application/json",
												"key": "Content-Type",
												"value": "nisi amet "
											},
											{
												"description": "(Required) The Registered User ID to execute the API.",
												"key": "X-Authenticated-User-token",
												"value": "nisi amet "
											},
											{
												"description": "(Required) All content APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.",
												"key": "Authorization",
												"value": "nisi amet "
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/content/v1/flag/reject/:Content_Id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"content",
												"v1",
												"flag",
												"reject",
												":Content_Id"
											],
											"variable": [
												{
													"key": "Content_Id",
													"value": "nisi amet ",
													"description": "(Required) Please append a valid Content Id To the Request URL"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"result\": {},\n  \"id\": \"voluptate culpa Excepteur minim\",\n  \"ver\": \"Duis\",\n  \"ts\": \"exercitation cupidatat aute repr\",\n  \"params\": {\n    \"resmsgid\": \"do Duis cupidatat nostrud\",\n    \"msgid\": \"laboris veniam \",\n    \"err\": \"ut ad pariatur adipisicing enim\",\n    \"status\": \"sit sunt aliqua\",\n    \"errmsg\": \"elit dolore irure\"\n  },\n  \"responseCode\": \"occaecat\"\n}"
								}
							]
						}
					]
				}
			]
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://staging.sunbirded.org/api",
			"type": "string"
		},
		{
			"key": "upload_content_id",
			"value": ""
		},
		{
			"key": "update_content_id",
			"value": ""
		},
		{
			"key": "updatecontent_versionkey",
			"value": ""
		},
		{
			"key": "update_content",
			"value": ""
		},
		{
			"key": "update_versionkey",
			"value": ""
		},
		{
			"key": "content_update",
			"value": ""
		},
		{
			"key": "versionkey_update",
			"value": ""
		},
		{
			"key": "read_content",
			"value": ""
		},
		{
			"key": "identifier",
			"value": ""
		},
		{
			"key": "submit_content",
			"value": ""
		},
		{
			"key": "submit_content_neg",
			"value": ""
		},
		{
			"key": "content_id",
			"value": ""
		},
		{
			"key": "versionKey",
			"value": ""
		},
		{
			"key": "pre_signed_URL",
			"value": ""
		},
		{
			"key": "id",
			"value": ""
		},
		{
			"key": "partial_URL",
			"value": ""
		},
		{
			"key": "content_id_01",
			"value": ""
		},
		{
			"key": "publish_content",
			"value": ""
		},
		{
			"key": "reject_content",
			"value": ""
		},
		{
			"key": "retire_content",
			"value": ""
		},
		{
			"key": "retire_draft",
			"value": ""
		},
		{
			"key": "discard_content",
			"value": ""
		},
		{
			"key": "discard_livecontent",
			"value": ""
		},
		{
			"key": "copy_content",
			"value": ""
		},
		{
			"key": "pre_content_id",
			"value": ""
		},
		{
			"key": "flag_content_id",
			"value": ""
		},
		{
			"key": "flag_accept_content_id",
			"value": ""
		},
		{
			"key": "content_id_02",
			"value": ""
		},
		{
			"key": "content_id_03",
			"value": ""
		},
		{
			"key": "content_wo_url",
			"value": ""
		}
	]
}